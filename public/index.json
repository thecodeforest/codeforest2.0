[{"authors":null,"categories":null,"content":"I love asking big questions and answering them with data. My background is in Psychology and Statistics, and it’s been a blast seeing how these fields have co-evolved over the years. I currently work as a data scientist, and I started this blog as a way to document a few of the more interesting topics I’ve encountered throughout my journeys. The goal is to abstract away some of the technical bits in an attempt to give you (the reader) the ability to implement while learning. I’m always interested in connecting with fellow data-scientists/whisperers/magicians/analysts, so feel free to PM me on linkedin!\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/mark-leboeuf/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/mark-leboeuf/","section":"authors","summary":"I love asking big questions and answering them with data. My background is in Psychology and Statistics, and it’s been a blast seeing how these fields have co-evolved over the years.","tags":null,"title":"Mark LeBoeuf","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Mark LeBoeuf FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":["Pyspark","Time Series Forecasting","Prophet"],"content":" Overview Forecasting at scale is a challenge faced by many businesses. Whether trying to predict daily demand for thousands of products or the number of people to staff across many stores, the task of generating forecasts in parallel is a common task for improving efficiencies within a business. Accordingly, the goal of this post is to outline an approach to creating many forecasts in a short period with Pyspark. We’ll cover some common data-cleaning steps that often precede forecasting, and then generate several thousand week-level forecasts via the Prophet package. Note that we will not cover how to implement in a cloud computing environment (which, in a real-world setting, would typically be the case). Nor will we delve into model tuning or selection. The goal is to provide a workflow for quickly generating many time-series forecasts.\n Getting Started The data we’ll be using was originally furnished by Walmart and represents weekly demand for products at the store-department level. All code for this post is stored in the Codeforest Repository, while the original data is stored here. Before diving into the details, let’s briefly review talk through the key modules and files.\n* conf.json - here is where we define things like our grouping variables, our outcome variable, or if we want to log transform our outcome variable. It’s a good practice to keep these parameters outside of your actual code, as it makes it easier for others (or future you!) to adapt and extend to other use cases. * pyspark_fcast.py - Our main module – that is, where the actual forecasting gets done. We’ll cover this in detail below.\n fcast_data_frame.py - a helper class responsible for common pre-forecasting data transformations. These include filling in missing values, replacing negative values with zeros, filtering time-series with only a few observations, etc. We’ll cover several of these methods below, but I’d recommend cloning the repository if you’d like to access all methods.  To follow along with this tutorial, you’ll also need to be able to import the following packages.\nimport argparse import json import logging import os import re from datetime import datetime from pathlib import Path from typing import List import numpy as np import pandas as pd from fbprophet import Prophet # Using fbprophet==0.7.1 \u0026amp; pystan==2.18.0 from pyspark.sql import SparkSession # Using pyspark==3.0.1 from pyspark.sql.functions import lit from pyspark.sql.types import (DateType, FloatType, IntegerType, StructField, StructType) from pyspark_ts_fcast.fcast_data_frame import FcastDataFrame Assuming the above imports have been successful, let’s have a look at the first few rows in our data. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #egamultfoy .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #egamultfoy .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #egamultfoy .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #egamultfoy .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #egamultfoy .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #egamultfoy .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #egamultfoy .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #egamultfoy .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #egamultfoy .gt_column_spanner_outer:first-child { padding-left: 0; } #egamultfoy .gt_column_spanner_outer:last-child { padding-right: 0; } #egamultfoy .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #egamultfoy .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #egamultfoy .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #egamultfoy .gt_from_md  :first-child { margin-top: 0; } #egamultfoy .gt_from_md  :last-child { margin-bottom: 0; } #egamultfoy .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #egamultfoy .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #egamultfoy .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #egamultfoy .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #egamultfoy .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #egamultfoy .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #egamultfoy .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #egamultfoy .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #egamultfoy .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #egamultfoy .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #egamultfoy .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #egamultfoy .gt_sourcenote { font-size: 90%; padding: 4px; } #egamultfoy .gt_left { text-align: left; } #egamultfoy .gt_center { text-align: center; } #egamultfoy .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #egamultfoy .gt_font_normal { font-weight: normal; } #egamultfoy .gt_font_bold { font-weight: bold; } #egamultfoy .gt_font_italic { font-style: italic; } #egamultfoy .gt_super { font-size: 65%; } #egamultfoy .gt_footnote_marks { font-style: italic; font-size: 65%; }     Sample Data       store dept date weekly_sales    1 1 2010-02-05 24924   1 1 2010-02-12 46039   1 1 2010-02-19 41596   1 1 2010-02-26 19404   1 1 2010-03-05 21828    Let’s also discuss the process of passing in the forecasting parameters in addition to documenting which parameters we’ve selected. We’ll use the following command: python3 pyspark_fcast.py --forecast-config-file 'config/conf.json'. Here we are passing in the location of our configuration file and extracting the parameters. Don’t worry if the individual parameters don’t make sense now. I’ll explain each in greater detail below.\nargs = read_args() with open(args.forecast_config_file) as f: config = json.load(f) log_input_params(config=config) input_data_path = config[\u0026quot;input_data_path\u0026quot;] fcast_params = config[\u0026quot;fcast_parameters\u0026quot;] group_fields = fcast_params[\u0026quot;group_fields\u0026quot;] date_field = fcast_params[\u0026quot;date_field\u0026quot;] yvar_field = fcast_params[\u0026quot;yvar_field\u0026quot;] ts_frequency = fcast_params[\u0026quot;ts_frequency\u0026quot;] fcast_floor = fcast_params[\u0026quot;forecast_floor\u0026quot;] fcast_cap = fcast_params[\u0026quot;forecast_cap\u0026quot;] min_obs_threshold = fcast_params[\u0026#39;min_obs_count\u0026#39;] Note the usage of the two helper functions: read_args and log_input_params.\ndef read_args() -\u0026gt; argparse.Namespace: \u0026quot;\u0026quot;\u0026quot;Read Forecasting arguments Returns: argparse.Namespace: argparse Namespace \u0026quot;\u0026quot;\u0026quot; parser = argparse.ArgumentParser() parser.add_argument(\u0026quot;--forecast-config-file\u0026quot;, type=str) return parser.parse_args() read_args takes the arguments in our configuration file, which are then converted into a dictionary. Next, we document which parameters we’ve passed to our module with log_input_params.\nlogging.basicConfig( format=\u0026quot;%(levelname)s - %(asctime)s - %(filename)s - %(message)s\u0026quot;, level=logging.INFO, filename=\u0026quot;run_{start_time}.log\u0026quot;.format( start_time=datetime.now().strftime(\u0026quot;%Y-%m-%d %H-%M-%S\u0026quot;) ), ) def log_input_params(config: dict) -\u0026gt; None: \u0026quot;\u0026quot;\u0026quot;Logs all parameters in configuration file Args: config (dict): Configuration parameters for forecast and data \u0026quot;\u0026quot;\u0026quot; params = pd.json_normalize(config).transpose() [ logging.info(\u0026quot;input params:\u0026quot; + x[0] + \u0026quot;-\u0026quot; + str(x[1])) for x in zip(params.index, params.iloc[:, 0]) ] return None There are several benefits to documenting these inputs. First, we can validate that the correct parameters have been passed to our forecasting process. Having a record facilitates debugging. Second, it is useful for experimentation. We can try out different parameters to see which combination provides the best results. Logging does not receive a lot of attention in the data science world, but it is incredibly useful and will save a lot of time as your project matures.\nNow we that we have our parameters and have set up logging, we’ll read in the data stored here and execute some basic field formatting with clean_names.\ndef clean_names(df: pd.DataFrame) -\u0026gt; pd.DataFrame: \u0026quot;\u0026quot;\u0026quot;Applies the following transformations to column names: - Removes camel case - Replaces any double underscore with single underscore - Removes spaces in the middle of a string name - Replaces periods with underscores Args: df (pd.DataFrame): Dataframe with untransformed column names Returns: pd.DataFrame: Dataframe with transformed column names \u0026quot;\u0026quot;\u0026quot; cols = df.columns cols = [re.sub(r\u0026quot;(?\u0026lt;!^)(?=[A-Z])\u0026quot;, \u0026quot;_\u0026quot;, x).lower() for x in cols] cols = [re.sub(r\u0026quot;_{2,}\u0026quot;, \u0026quot;_\u0026quot;, x) for x in cols] cols = [re.sub(r\u0026quot;\\s\u0026quot;, \u0026quot;\u0026quot;, x) for x in cols] cols = [re.sub(r\u0026quot;\\.\u0026quot;, \u0026quot;_\u0026quot;, x) for x in cols] df.columns = cols return df sales_df = pd.read_csv(input_data_path) sales_df = clean_names(sales_df) If you don’t have a clean_names-type function as part of your team’s codebase, I’d highly recommend creating one. It’s a function that I use frequently when reading data from various sources and encourages a standardized way of formatting field names.\nNow that we have our data, we’ll do some pre-forecasting data cleaning. The main steps are outlined below:\nFilter groups with limited observations - It’s a good idea to put predictions against items where you have some historical data. While the space of cold-start forecasting is very interesting, it is outside the scope of this post. Thus, we are putting a minimum number of data points in place for something to be considered. This is also a good idea because some forecasting algorithms will not fit a model against a time series with fewer than N observations.\nReplace negative values with zero - I’m assuming a negative value represents a returned product. Our goal is to forecast demand not demand - returns. This is an assumption that would need to be validated with domain knowledge.\nPad missing values - This is an important but easy to overlook step for one simple reason: Missing values in time-series data are not usually flagged as “missing”. For example, a store may shut down for six weeks of renovations. As a result, there will be a series of dates that have no sales data. Identifying these gaps is pivotal for generating reliable forecasts. I’ve provied a brief example below to illustrate what this looks like from a data perspective.\nhtml { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #kasmpplzul .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kasmpplzul .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kasmpplzul .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kasmpplzul .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #kasmpplzul .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kasmpplzul .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kasmpplzul .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kasmpplzul .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kasmpplzul .gt_column_spanner_outer:first-child { padding-left: 0; } #kasmpplzul .gt_column_spanner_outer:last-child { padding-right: 0; } #kasmpplzul .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #kasmpplzul .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #kasmpplzul .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kasmpplzul .gt_from_md  :first-child { margin-top: 0; } #kasmpplzul .gt_from_md  :last-child { margin-bottom: 0; } #kasmpplzul .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kasmpplzul .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #kasmpplzul .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kasmpplzul .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #kasmpplzul .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kasmpplzul .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kasmpplzul .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kasmpplzul .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kasmpplzul .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kasmpplzul .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #kasmpplzul .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kasmpplzul .gt_sourcenote { font-size: 90%; padding: 4px; } #kasmpplzul .gt_left { text-align: left; } #kasmpplzul .gt_center { text-align: center; } #kasmpplzul .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kasmpplzul .gt_font_normal { font-weight: normal; } #kasmpplzul .gt_font_bold { font-weight: bold; } #kasmpplzul .gt_font_italic { font-style: italic; } #kasmpplzul .gt_super { font-size: 65%; } #kasmpplzul .gt_footnote_marks { font-style: italic; font-size: 65%; }     Incomplete Data       store dept date weekly    1 1 2010-02-05 24924   1 1 2010-02-19 41596   1 1 2010-02-26 19404   1 1 2010-03-19 22137   1 1 2010-03-26 26229    html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #moirnnfdnv .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #moirnnfdnv .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #moirnnfdnv .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #moirnnfdnv .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #moirnnfdnv .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #moirnnfdnv .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #moirnnfdnv .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #moirnnfdnv .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #moirnnfdnv .gt_column_spanner_outer:first-child { padding-left: 0; } #moirnnfdnv .gt_column_spanner_outer:last-child { padding-right: 0; } #moirnnfdnv .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #moirnnfdnv .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #moirnnfdnv .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #moirnnfdnv .gt_from_md  :first-child { margin-top: 0; } #moirnnfdnv .gt_from_md  :last-child { margin-bottom: 0; } #moirnnfdnv .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #moirnnfdnv .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #moirnnfdnv .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #moirnnfdnv .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #moirnnfdnv .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #moirnnfdnv .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #moirnnfdnv .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #moirnnfdnv .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #moirnnfdnv .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #moirnnfdnv .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #moirnnfdnv .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #moirnnfdnv .gt_sourcenote { font-size: 90%; padding: 4px; } #moirnnfdnv .gt_left { text-align: left; } #moirnnfdnv .gt_center { text-align: center; } #moirnnfdnv .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #moirnnfdnv .gt_font_normal { font-weight: normal; } #moirnnfdnv .gt_font_bold { font-weight: bold; } #moirnnfdnv .gt_font_italic { font-style: italic; } #moirnnfdnv .gt_super { font-size: 65%; } #moirnnfdnv .gt_footnote_marks { font-style: italic; font-size: 65%; }     Padded Data       store dept date weekly    1 1 2010-02-05 24924   NA NA 2010-02-12 NA   1 1 2010-02-19 41596   1 1 2010-02-26 19404   NA NA 2010-03-05 NA   NA NA 2010-03-12 NA   1 1 2010-03-19 22137   1 1 2010-03-26 26229    We’ll go back and fill or “interpolate” those missing values in the weekly_sales field in a later step.\nFilter groups with long ‘streaks’ of missing observations - Building on the previous example, let’s say the store closes for six months instead of six weeks. Thus, half of the year will not have any sales information. We could fill it in with a reasonable value, such as the average, but this won’t capture the overall trend, seasonality, or potential holiday/event effects that help improve our forecasting accuracy. I will initially exclude these time-series, and then try to understand why/how long streaks of values are missing. In this case, I’ll set a limit of four weeks, which says “if any time-series has more than four consecutive dates missing, exclude from the final forecasting step”.\nInterpolate missing values - Fills in missing data with “reasonable” values. We’ll use the overall mean of each series, which is a very simple and easy to understand technique.\nAdd forecasting bounds - This function is specific to the Prophet API and is not required to generate a forecast. However, in a context where you cannot individually inspect the quality of each forecast, adding in some “guardrails” can prevent errant predictions that erode trust with your end stakeholders. adds a “floor” and “cap” field for each group, indicating that forecast cannot go above or below these bounds. For example, if a minimum value in a time-series in 10 and the max is 100, a floor of 0.5 and a cap of 1.5 would allow a forecast no higher than 150 and no lower than 5.\nLog transform outcome variable - Log transforming our outcome variable is an effective approach to reduce the influence of outliers on our forecats. The other approach is to use a box-cox transformation (see here for more details), but I often start with a log-transformation because it does require me to keep track of the transformation parameters, which is something you’ll need to do with a box-cox transformation.\nBelow we’ll implement all of these data-cleaning steps via the FcastDataFrame class, which I often use to prepare a clean grouped time-series data prior to generating forecasts.\nclass FcastDataFrame: \u0026quot;\u0026quot;\u0026quot;Use for pre-processing data prior to forecasting\u0026quot;\u0026quot;\u0026quot; def __init__( self, df: pd.DataFrame, group_fields: List[str], date_field: str, yvar_field: str, ts_frequency: str, ): \u0026quot;\u0026quot;\u0026quot; Args: df (pd.DataFrame): dataframe with to be forecasted data group_fields (List[str]): grouping fields. These are often re represented by attributes of each unit (e.g., store id, product id, etc.). date_field (str): date field yvar_field (str): outcome (\u0026quot;y\u0026quot;) field ts_frequency (str): granularity of the data. For example, data that is recorded on a weekly basis, every Friday will be \u0026quot;W-FRI\u0026quot;. Note that sub-day level (e.g, hourly, minute) data is not supported. \u0026quot;\u0026quot;\u0026quot; self.df = df self.group_fields = group_fields self.date_field = date_field self.yvar_field = yvar_field self.ts_frequency = ts_frequency fcast_df = FcastDataFrame( df=sales_df, group_fields=group_fields, date_field=date_field, yvar_field=yvar_field, ts_frequency=ts_frequency, )  While we won’t cover all methods in this class, I’ll\n def filter_groups_min_obs(self, min_obs_threshold): \u0026quot;\u0026quot;\u0026quot;[summary] Args: min_obs_threshold ([type]): [description] \u0026quot;\u0026quot;\u0026quot; n_unique_groups = self.df[self.group_fields].drop_duplicates().shape[0] min_obs_filter_df = ( self.df.groupby(self.group_fields)[self.yvar_field] .count() .reset_index() .rename(columns={self.yvar_field: \u0026quot;obs_count\u0026quot;}) .query(f\u0026quot;obs_count \u0026gt; {str(min_obs_threshold)}\u0026quot;) .drop(columns=\u0026quot;obs_count\u0026quot;) ) n_remaining_groups = min_obs_filter_df.shape[0] df = pd.merge(self.df, min_obs_filter_df, how=\u0026quot;inner\u0026quot;, on=self.group_fields) self.df = df logger.info(\u0026quot;N groups dropped: {}\u0026quot;.format(n_unique_groups - n_remaining_groups)) Below we’ll apply the filtering step as well as several others that will likely improve the quality of our forecasts.\n# filter out groups with less than min number of observations fcast_df.filter_groups_min_obs(min_obs_threshold=min_obs_threshold) # replace any negative value with a zero fcast_df.replace_negative_value_with_zero() # replace missing dates between start and end of time-series by group fcast_df.pad_missing_values() # filter groups with consecutive missing streak longer than 4 fcast_df.filter_groups_max_missing_streak(max_streak=4) # fill in missing values based on linear interpolation fcast_df.fill_missing_values(method=\u0026quot;interpolate\u0026quot;) # add upper and lower bounds for forecasting fcast_df.add_forecast_bounds( floor_multiplier=fcast_floor, cap_multiplier=fcast_cap ) # log transform outcome, floor, and cap values fcast_df.log_transform_values(yvar_field, \u0026quot;floor_value\u0026quot;, \u0026quot;cap_value\u0026quot;) # return transformed data fcast_df_trans = fcast_df.return_transformed_df() Now we are ready to do some forecasting. In the next section, I’ll lay out how we go from\n  Pyspark Forecasting First, we have to translate the field names to those that Prophet understands. For example, any variable needs to be named ds and our outcome variable y. We’ll use the prep_for_prophet function to make the transition.\ndef prep_for_prophet( df: pd.DataFrame, yvar_field: str, date_field: str, group_fields: List[str] ) -\u0026gt; pd.DataFrame: \u0026quot;\u0026quot;\u0026quot;Renames key field names to be compatible with Prophet Forecasting API Args: df (pd.DataFrame): Contains data that will be used to generate forecasting yvar_field (str): outcome (\u0026quot;y\u0026quot;) field name date_field (str): date field name group_fields (List[str]): grouping fields. These are often represented by attributes of each unit (e.g., store id, product id, etc.). Returns: pd.DataFrame: Data with compatible field names \u0026quot;\u0026quot;\u0026quot; fields = df.columns.tolist() cap_value_index = [ index for index, value in enumerate([\u0026quot;cap_value\u0026quot; in x for x in fields]) if value ] floor_value_index = [ index for index, value in enumerate([\u0026quot;floor_value\u0026quot; in x for x in fields]) if value ] if cap_value_index and floor_value_index: df = df.rename( columns={ fields[cap_value_index[0]]: \u0026quot;cap\u0026quot;, fields[floor_value_index[0]]: \u0026quot;floor\u0026quot;, } ) group_fields = group_fields + [\u0026quot;cap\u0026quot;, \u0026quot;floor\u0026quot;] df = df[group_fields + [date_field] + [yvar_field]] df = df.rename(columns={date_field: \u0026quot;ds\u0026quot;, yvar_field: \u0026quot;y\u0026quot;}) df[\u0026quot;ds\u0026quot;] = pd.to_datetime(df[\u0026quot;ds\u0026quot;]) return df fcast_df_prophet_input = prep_for_prophet( df=fcast_df_trans, yvar_field=\u0026quot;weekly_sales_prep_log1p\u0026quot;, date_field=date_field, group_fields=group_fields, )  Before diving into Pyspark, let’s quickly review to make sure the dataset is in the intended format. - add snippet and put in github and then read in :)\nAdditionally, we haven’t discussed what the “cap” and “floor” fields represent, so briefly cover that is well. These fields represent something.\nThe first step is to create a Spark Session and indicate where our Java version is located. Note this step will vary depending on the environment that you are running.\nos.environ[\u0026quot;JAVA_HOME\u0026quot;] = config[\u0026quot;java_home\u0026quot;] SPARK = ( SparkSession.builder.master(\u0026quot;local[4]\u0026quot;) .appName(config[\u0026quot;app_name\u0026quot;]) .config(\u0026quot;spark.sql.execution.arrow.pyspark.enabled\u0026quot;, \u0026quot;true\u0026quot;) .getOrCreate() ) Next we’ll define the schema (or format) of our input and output data. The fcast_df_prophet_input object is what our input will look like, so we can start by defining that first.\nINPUT_SCHEMA = StructType( [ StructField(\u0026quot;store\u0026quot;, IntegerType(), True), StructField(\u0026quot;dept\u0026quot;, IntegerType(), True), StructField(\u0026quot;cap\u0026quot;, FloatType(), True), StructField(\u0026quot;floor\u0026quot;, FloatType(), True), StructField(\u0026quot;ds\u0026quot;, DateType(), True), StructField(\u0026quot;y\u0026quot;, FloatType(), True), ] ) OUTPUT_SCHEMA = StructType( [ StructField(\u0026quot;ds\u0026quot;, DateType(), True), StructField(\u0026quot;store\u0026quot;, IntegerType(), True), StructField(\u0026quot;dept\u0026quot;, IntegerType(), True), StructField(\u0026quot;yhat_lower\u0026quot;, FloatType(), True), StructField(\u0026quot;yhat_upper\u0026quot;, FloatType(), True), StructField(\u0026quot;yhat\u0026quot;, FloatType(), True), ] )  If that all goes smoothly, you have correctly configured your spark environment. It is time to define what the output of forecasting process should be. Prophet provides many fields. However, I am primarily interested in three: the forecast (yhat), and the upper/lower bounds (yhat_upper/yhat_lower) of a 95% prediction interval.\nSeems reasonable. Now let’s translate our pandas dataframe into a spark dataframe and pass in the schema we defined above.\nfcast_spark_prophet_input = SPARK.createDataFrame( fcast_df_prophet_input, schema=INPUT_SCHEMA ) The function below does the actual forecasting and we’ll spend a bit time unpacking what’s happening here.\ndef run_forecast(keys, df): \u0026quot;\u0026quot;\u0026quot;Generate time-series forecast Args: keys: Grouping keys df: Spark Dataframe \u0026quot;\u0026quot;\u0026quot; fields = [\u0026quot;ds\u0026quot;, \u0026quot;store\u0026quot;, \u0026quot;dept\u0026quot;, \u0026quot;yhat_lower\u0026quot;, \u0026quot;yhat_upper\u0026quot;,\u0026quot;yhat\u0026quot;] store, dept = keys cap = df[\u0026quot;cap\u0026quot;][0] floor = df[\u0026quot;floor\u0026quot;][0] model = Prophet( interval_width=0.95, growth=\u0026quot;logistic\u0026quot;, yearly_seasonality=True, seasonality_mode=\u0026quot;additive\u0026quot;, ) model.add_country_holidays(country_name=\u0026quot;US\u0026quot;) model.fit(df) future_df = model.make_future_dataframe( periods=13, freq=\u0026quot;W-FRI\u0026quot;, include_history=False ) future_df[\u0026quot;cap\u0026quot;] = cap future_df[\u0026quot;floor\u0026quot;] = floor results_df = model.predict(future_df) results_df[\u0026quot;store\u0026quot;] = store results_df[\u0026quot;dept\u0026quot;] = dept results_df = results_df[fields] return results_df Let’s start discussin the model. In plain English, we want a forecast with 95% prediction interval, with yearly seasonality. Logistic growth indicates that we expect the growth of our time-series to reach a “saturation point” on both the upper and lower side. The “additive” part captures our belief about how we believe the time-series will evolve over time. Specifically, we assume that . One aspect that confuses people (or at least confused me) when starting out is that the fact that you can pass in these “tuning parameters” and options as part of the input dataframe. You can then extract these for each group by referencing the field (e.g., df['cap'][0])) and pass them into the fit function. Another aspect that tends to trip people up is that when you call model.make_future_dataframe, you must have the same fields and inputs as the data you fit the model against. Thus, we had the cap and floor values to our future dataframe. The same rule would apply if you were using external regressors (e.g., upcoming sales or advertising events that you know will affect sales).\nWe can put it all together with the following.\nfcast_df_prophet_output = ( fcast_spark_prophet_input.groupBy(group_fields) .applyInPandas(func=run_forecast, schema=OUTPUT_SCHEMA) .withColumn(\u0026quot;part\u0026quot;, lit(\u0026quot;forecast\u0026quot;)) .withColumn(\u0026quot;fcast_date\u0026quot;, lit(datetime.now().strftime(\u0026quot;%Y-%m-%d\u0026quot;))) .toPandas() ) We should now have a 13-week ahead forecast for all store-department combinations. The last step is to combine our forecasts with the historical data. However, our forecasting and prediction interval fields were log-transformed prior to fitting our model. Thus, we’ll need to invert this transformation to get back to our original scale. Note that np.log1p and np.expm1 are inverses of one another, and elegantly deal with zero values by adding/subtracting a value of “1” in to avoid taking the log of zero, which is undefined and will make your code go 💥\nfcast_df_prophet_output = fcast_df_prophet_output.apply( lambda x: round(np.expm1(x)) if \u0026quot;yhat\u0026quot; in x.name else x ) Perfect. Now we’ll bind our input dataframe with our output dataframe so we have a complete dataset and then write it out to the root directory of our project.\ndef bind_actuals_and_forecast( actuals_df: pd.DataFrame, forecast_df: pd.DataFrame, yvar_field: str, group_fields: List[str], date_field: str, exp_yvar_field: bool = True, ) -\u0026gt; pd.DataFrame: \u0026quot;\u0026quot;\u0026quot;[summary] Args: actuals_df (pd.DataFrame): [description] forecast_df (pd.DataFrame): [description] yvar_field (str): [description] group_fields (List[str]): [description] date_field (str): [description] exp_yvar_field (bool, optional): [description]. Defaults to True. Returns: pd.DataFrame: [description] \u0026quot;\u0026quot;\u0026quot; # prep actuals actuals_df[\u0026quot;part\u0026quot;] = \u0026quot;actuals\u0026quot; actuals_df = actuals_df.rename(columns={\u0026quot;y\u0026quot;: yvar_field}) if exp_yvar_field: actuals_df[yvar_field] = actuals_df[yvar_field].apply(lambda x: np.expm1(x)) if any([\u0026quot;cap\u0026quot; in x for x in actuals_df.columns]): del actuals_df[\u0026quot;cap\u0026quot;] del actuals_df[\u0026quot;floor\u0026quot;] # prep forecast forecast_df = forecast_df.rename( columns={ \u0026quot;yhat\u0026quot;: yvar_field, \u0026quot;yhat_lower\u0026quot;: f\u0026quot;{yvar_field}_lb\u0026quot;, \u0026quot;yhat_upper\u0026quot;: f\u0026quot;{yvar_field}_ub\u0026quot;, } ) bound_df = pd.concat([actuals_df, forecast_df]) bound_df = bound_df.rename(columns={\u0026quot;ds\u0026quot;: date_field}).sort_values( group_fields + [date_field] ) return bound_df df_forecast = bind_actuals_and_forecast( actuals_df=fcast_df_prophet_input, forecast_df=fcast_df_prophet_output, yvar_field=yvar_field, group_fields=group_fields, date_field=date_field, ) df_forecast.to_csv(Path.cwd() / \u0026quot;sales_data_forecast.csv\u0026quot;, index=False) We’ll transition back to the world of R for some quick quality-assurance work. Let’s read in our forecasts and examine a few store-department combinations. Note there are much more formal ways to validate the performance of our models, but our objective is to just do a quick sanity check. In short, “do the forecasts look reasonable for a few randomly sampled grouped?” We’ll read the raw output from github. Let’s start by examining the first and last five rows for a single Store-Dept combination.\nlibrary(tidyverse) library(timetk) library(lubridate) library(gt) fcast_df_url = \u0026quot;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/pyspark_forecasting_data/sales_data_forecast.csv\u0026quot; fcast_df = read_csv(fcast_df_url) df_store_dept_sample \u0026lt;- fcast_df %\u0026gt;% filter(store == 1, dept == 1) %\u0026gt;% mutate(date = as_date(date)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #kjlawyujzx .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 10px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kjlawyujzx .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kjlawyujzx .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kjlawyujzx .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #kjlawyujzx .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kjlawyujzx .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kjlawyujzx .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kjlawyujzx .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kjlawyujzx .gt_column_spanner_outer:first-child { padding-left: 0; } #kjlawyujzx .gt_column_spanner_outer:last-child { padding-right: 0; } #kjlawyujzx .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #kjlawyujzx .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #kjlawyujzx .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kjlawyujzx .gt_from_md  :first-child { margin-top: 0; } #kjlawyujzx .gt_from_md  :last-child { margin-bottom: 0; } #kjlawyujzx .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kjlawyujzx .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #kjlawyujzx .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kjlawyujzx .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #kjlawyujzx .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kjlawyujzx .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kjlawyujzx .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kjlawyujzx .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kjlawyujzx .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kjlawyujzx .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #kjlawyujzx .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kjlawyujzx .gt_sourcenote { font-size: 90%; padding: 4px; } #kjlawyujzx .gt_left { text-align: left; } #kjlawyujzx .gt_center { text-align: center; } #kjlawyujzx .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kjlawyujzx .gt_font_normal { font-weight: normal; } #kjlawyujzx .gt_font_bold { font-weight: bold; } #kjlawyujzx .gt_font_italic { font-style: italic; } #kjlawyujzx .gt_super { font-size: 65%; } #kjlawyujzx .gt_footnote_marks { font-style: italic; font-size: 65%; }     Top 5 Rows of Forecasting Data       store dept date weekly_sales part weekly_sales_lb weekly_sales_ub fcast_date    1 1 2010-02-05 24924 actuals NA NA NA   1 1 2010-02-12 46039 actuals NA NA NA   1 1 2010-02-19 41596 actuals NA NA NA   1 1 2010-02-26 19404 actuals NA NA NA   1 1 2010-03-05 21828 actuals NA NA NA    html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #vqoondoukn .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 10px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #vqoondoukn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vqoondoukn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #vqoondoukn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #vqoondoukn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vqoondoukn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vqoondoukn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #vqoondoukn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #vqoondoukn .gt_column_spanner_outer:first-child { padding-left: 0; } #vqoondoukn .gt_column_spanner_outer:last-child { padding-right: 0; } #vqoondoukn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #vqoondoukn .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #vqoondoukn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #vqoondoukn .gt_from_md  :first-child { margin-top: 0; } #vqoondoukn .gt_from_md  :last-child { margin-bottom: 0; } #vqoondoukn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #vqoondoukn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #vqoondoukn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vqoondoukn .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #vqoondoukn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vqoondoukn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #vqoondoukn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #vqoondoukn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vqoondoukn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vqoondoukn .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #vqoondoukn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vqoondoukn .gt_sourcenote { font-size: 90%; padding: 4px; } #vqoondoukn .gt_left { text-align: left; } #vqoondoukn .gt_center { text-align: center; } #vqoondoukn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #vqoondoukn .gt_font_normal { font-weight: normal; } #vqoondoukn .gt_font_bold { font-weight: bold; } #vqoondoukn .gt_font_italic { font-style: italic; } #vqoondoukn .gt_super { font-size: 65%; } #vqoondoukn .gt_footnote_marks { font-style: italic; font-size: 65%; }     Bottom 5 Rows of Forecasting Data       store dept date weekly_sales part weekly_sales_lb weekly_sales_ub fcast_date    1 1 2012-12-28 30948 forecast 21883 42839 2021-04-05   1 1 2013-01-04 21138 forecast 14793 30024 2021-04-05   1 1 2013-01-11 16149 forecast 11384 22832 2021-04-05   1 1 2013-01-18 15553 forecast 10712 21662 2021-04-05   1 1 2013-01-25 18954 forecast 13475 27282 2021-04-05    Let’s select sample a few forecasts and plot them out.\nset.seed(2021) fcast_df %\u0026gt;% filter(store \u0026lt; 3, dept %in% c(df %\u0026gt;% distinct(dept) %\u0026gt;% sample_n(2) %\u0026gt;% pull()) ) %\u0026gt;% mutate(store_id = paste(store, dept, sep=\u0026#39;_\u0026#39;)) %\u0026gt;% select(date, store_id, contains(\u0026#39;weekly\u0026#39;)) %\u0026gt;% pivot_longer(contains(\u0026#39;weekly\u0026#39;)) %\u0026gt;% mutate(name = str_to_title(str_replace_all(name, \u0026#39;_\u0026#39;, \u0026#39; \u0026#39;))) %\u0026gt;% ggplot(aes(date, value, color = name)) + geom_line(size = 1.5, alpha = 0.8) + facet_grid(store_id ~ ., scales = \u0026#39;free\u0026#39;) + theme_bw() + scale_y_continuous(labels = scales::comma_format()) + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Weekly Sales\u0026#39;, color = NULL, title = \u0026#39;Sample Forecasts\u0026#39; ) + theme(legend.position = \u0026quot;top\u0026quot;, legend.text = element_text(size = 12), strip.text.y = element_text(size = 12), plot.title = element_text(size = 14) ) Overall, the forecasts seem reasonable.\n Next Steps Now you have what I would consider to be a functioning prototype working in a sandbox of local environment, the next step naturally be to transition it to a cloud environment where the workflow could be scheduled and monitored. Additionally, if the goal was to improve model performance, a natural first place to start is by incorporating additional data sources. For example, in the current example, some of the hisot. Continuing with this theme, another place to look would be at historicla pricing information for the products. For most common consumer products, demand varies as a function of price. Thus, knowing when sales happened in the past – and their affect on consumer demand – would be useful for anticipating how future consumption would respond to upcoming sales. While many tutorials will focus a lot on hyperparameter tuning, I’ve found you are going make the biggest gains by asking yourself what factors external to your time-series . Until next time, happy forecasting.\n ","date":1617070394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617070394,"objectID":"b80014d95722605d7f4bfae86202f384","permalink":"/post/2021-03-28-pyspark-forecasting/pyspark_time_series_forecasting/","publishdate":"2021-03-29T21:13:14-05:00","relpermalink":"/post/2021-03-28-pyspark-forecasting/pyspark_time_series_forecasting/","section":"post","summary":"This is a summary. Add some text here man.","tags":["Pyspark","Time Series Forecasting","Prophet"],"title":"Scalable Time-Series Forecasting in Python","type":"post"},{"authors":[],"categories":[],"content":"def hello_there(): print('hello there') for i in range(1, 10): print(i)  ","date":1617062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617125236,"objectID":"1236cb6abbd6c8ecd729eeb54c392cc6","permalink":"/post/2021-03-30-test-test/","publishdate":"2021-03-30T00:00:00Z","relpermalink":"/post/2021-03-30-test-test/","section":"post","summary":"def hello_there(): print('hello there') for i in range(1, 10): print(i)  ","tags":[],"title":"test-test","type":"post"},{"authors":null,"categories":["Fantasy Football","Python","R","Beta Distribution"],"content":" BING BONG!!! Need to answer Causal graphs. This is different from traditional machine learnining, where the goal is map F(x) -\u0026gt; y.\nInputs, Interventions (T), and Outputs. What is the causal relationship between these three variables?\nX is what you know about the person. X -\u0026gt; T (treatment plan -\u0026gt; binary (treatment 1, treatment 2))\nChallenge is you only observe one outcome. And you must impute the other outcome. And this is the crux of the counterfactual.\nConditional Average Treatment Effect (For someone with a specific age, there is a big difference between the two treatments). What you want to predict.\nAverage treatment effect (does not condition on any variable) (On average, this intervention is a good intervention)\n","date":1615860794,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615860794,"objectID":"6394a27f1d417ab8493a4ce9e099ca04","permalink":"/post/2021-03-15-causal-inference-pt-1/causal_inference_part_1/","publishdate":"2021-03-15T21:13:14-05:00","relpermalink":"/post/2021-03-15-causal-inference-pt-1/causal_inference_part_1/","section":"post","summary":"A Summary","tags":["Fantasy Football","Python","R","Beta Distribution"],"title":"Causal Inference Part 1","type":"post"},{"authors":["Mark LeBoeuf","吳恩達"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":["R"],"content":" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"95c0f36e4b367c191a8b308eedae1cde","permalink":"/post/2020-12-01-r-rmarkdown/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/2020-12-01-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Charts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026quot;chart\u0026quot; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\n  (function() { let a = setInterval( function() { if ( typeof window.Plotly === 'undefined' ) { return; } clearInterval( a ); Plotly.d3.json(\"./line-chart.json\", function(chart) { Plotly.plot('chart-681239457', chart.data, chart.layout, {responsive: true}); }); }, 500 ); })();  You might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$  renders as\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\n1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026quot;Click to view the spoiler\u0026quot; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}}  renders as\nClick to view the spoiler You found me!\n Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it 🙌 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Mark LeBoeuf"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Mark LeBoeuf"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"\u0026hellip;\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"9b10c1f64082d3869fd4cb1f85809430","permalink":"/terms/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/terms/","section":"","summary":"\u0026hellip;","tags":null,"title":"","type":"page"},{"authors":null,"categories":["Fantasy Football","Python","R","Beta Distribution"],"content":" Overview Understanding a new concept is all about connecting it with something you already know. I don’t know much, but I do know Fantasy Football. Thus, when I come across new concepts, I often think to myself, “How can I use this information to beat my friend Steve in Fantasy Football”? This very question was the impetus for putting these words and figures together in a post, which will introduce the idea of using the Beta Distribution to determine your weekly starter. I’ll explain this approach in the context of my 2015 Fantasy Football season.\nAt the outset of that season, I drafted two quarterbacks: Joe Flacco and Marcus Mariota (it was a rough draft). Flacco had been in the NFL for a few years, while Mariota was still a rookie yet to play a game. I was also considering a separate rookie, Jameis Winston, who was available to pick up anytime during the season off the waiver wire. Throughout the season, I was faced with the following questions:\n Who do I make the starting QB? If one QB is performing poorly, when is the right time to make the switch (e.g., Flacco -\u0026gt; Mariota; Flacco -\u0026gt; Winston; Mariota -\u0026gt; Winston)?  This question is faced by NFL coaches and fantasy owners alike. If your QB has a few bad weeks, should you continue with them into the next week, replace them with the 2nd string QB, or sign a free agent to your team mid-season?\nBefore getting into the technical details, let’s first define what “Success” looks like for a Fantasy Football QB. Success can be defined in one word: Consistency. A QB that throws three touchdowns (TDs) every game for the first six games of the season (18 total) is better than a QB who throws five TDs for the first three games and then one TD during the next three games, despite having thrown the same number of TDs. Simply put - you want consistent, reliable performance every week. It doesn’t matter if you win by one point or 50 points – a win is a win. Thus, I evaluate my QB’s performance on the following criteria: A “Successful” performance is defined as 3 or more touchdowns AND/OR 300 or more yards for a given week. Touchdowns and passing yards are the two primary sources of QB fantasy points, and a +3TD|300yard weekly statline should cement a QB amongst that week’s top performers. Failing to meet either of these criteria was defined as an “Unsuccessful” performance. Note that this label could also factor in interceptions, pass completions, and fumble, but we’ll keep it simple and just focus on passing yards and passing touchdowns.\nHaving defined the evaluation criteria, the data generating process was modeled via the beta distribution. Recall that the beta distribution defines a distribution of probabilities, and we’re interested in the probability of our QB having a Successful week. There are several years of performance history on Joe Flacco, so we can provide a reasonably informed estimate of his weekly probabilty for achieving success (i.e., our prior). In contrast, there is no NFL game history on Mariota or Winston, so we’ll assign each a uniform or uninformative prior. Our estimate of the Success parameter for Winston and Mariota will change rapidly as we acquire in-season data because our posterior is determined entirely from the data. We could create a more informed-–and stronger-–prior by assigning Mariota and Winston the historic first-year league average for all rookie QBs entering the NFL but we’ll keep it simple. A uniform prior means that all probabilities from 0-1 are equally likely.\n Collecting QB Data We’ll use the nflgame python package to gather QB data. We’ll pull 2013-2014 weekly performance data for Joe Flacco to calculate our prior, as well as the 2015 data for all three players. During the season we’ll update our priors to determine which QB we should play for a given week. That is, as we acquire results over the season, updates will be made to obtain a better, more reliable estimate of the “success” parameter for each QB.\nimport nflgame import pandas as pd game_years = range(2013, 2016) game_weeks = range(1, 17) qbs = (\u0026quot;Joe Flacco\u0026quot;, \u0026quot;Marcus Mariota\u0026quot;, \u0026quot;Jameis Winston\u0026quot;) def get_passing_data(year, week, players, qbs): qb_list = list() for p in players.passing(): player = \u0026quot; \u0026quot;.join(str(p.player).split(\u0026quot; \u0026quot;)[:2]) if player in qbs: qb_list.append([year, week, player, p.passing_tds, p.passing_yds]) return qb_list quarterback_data = pd.DataFrame() for year in game_years: print \u0026quot;Retrieving Player Data for {year}\u0026quot;.format(year = year) for week in game_weeks: games = nflgame.games(year, week) players = nflgame.combine_game_stats(games) temp_qb_stats = get_passing_data(year, week, players, qbs) quarterback_data = quarterback_data.append(pd.DataFrame(temp_qb_stats)) quarterback_data.columns = [\u0026quot;year\u0026quot;, \u0026quot;week\u0026quot;, \u0026quot;player\u0026quot;, \u0026quot;touchdowns\u0026quot;, \u0026quot;passing_yds\u0026quot;] quarterback_data.to_csv(\u0026quot;quarterback_data.csv\u0026quot;, index = False)  ","date":1505095994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505095994,"objectID":"c31b44c1658f0ae0fa3f3a918c898de5","permalink":"/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/","publishdate":"2017-09-10T21:13:14-05:00","relpermalink":"/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/","section":"post","summary":"Aaron Rodgers or Tom Brady? Carson Wentz or Drew Brees? Choosing the right Fantasy Football QB each week is challenging. To remove some of the guesswork from the decision-making process, I devised an approach that’s worked well over the past few seasons. Read on to learn more about using the Beta Distribution to pick your weekly starting QB.","tags":["Fantasy Football","Python","R","Beta Distribution"],"title":"Choosing a Fantasy Football Quarterback","type":"post"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Mark LeBoeuf","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Mark LeBoeuf","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]