<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | The Code Forest</title>
    <link>http://example.org/tag/r/</link>
      <atom:link href="http://example.org/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Mark LeBoeuf</copyright><lastBuildDate>Mon, 15 Mar 2021 21:13:14 -0500</lastBuildDate>
    <image>
      <url>http://example.org/media/icon_huc737709a4be44af6221d1cabfe197959_22580_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>http://example.org/tag/r/</link>
    </image>
    
    <item>
      <title>Causal Inference with Propensity Scores</title>
      <link>http://example.org/post/2021-05-01-propensity-scores/causal_inference_propensity_scores/</link>
      <pubDate>Mon, 15 Mar 2021 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2021-05-01-propensity-scores/causal_inference_propensity_scores/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-03-15-causal-inference-pt-1/images/dag.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Causal inference attempts to answer “what-if” questions. For example, if the minimum wage were increased, what effect would it have on unemployment rates? Or if an entertainment company launched a marketing campaign for a new movie, what effect would it have on box-office sales? The objective in each of these examples is to quantify the impact of an intervention – a change in wages or a targeted marketing campaign – on an outcome – increasing employment or bolstering revenue. Estimating how a particular action can affect an end-state falls within the realm of &lt;em&gt;prescriptive&lt;/em&gt; analytics and can inform decision-making in the face of multiple possible actions.&lt;/p&gt;
&lt;p&gt;However, most analytics efforts are applied to either &lt;em&gt;describing&lt;/em&gt; or &lt;em&gt;predicting&lt;/em&gt; an outcome rather than understanding what drives it. For example, imagine you work for a cheese shop. You might be asked to &lt;em&gt;describe&lt;/em&gt; how sales of cheese have changed over the past year. Or perhaps you want to &lt;em&gt;predict&lt;/em&gt; how much cheese will sell over the next 12 months. Descriptive analytics can reveal if existing operational or strategic decisions are impacting the business (i.e., cheese sales) as anticipated. Predictive analytics can inform operational planning (e.g., how much cheese to manufacture), improve consumer experiences (e.g., an online cheese recommendation system), or automate repetitive tasks (e.g., automatically detecting defective cheese wheels during production with computer vision). While all of the applications can provide valuable answers to different questions, none can provide insight into the source of variation or root cause(s) of change in an outcome. Without this knowledge, it can be difficult to know where resources should be focused or how to grow and improve the business.&lt;/p&gt;
&lt;p&gt;Accordingly, the goal of this post is to highlight one approach to conducting prescriptive analytics and generating causal inferences with observational data. We’ll first walk through some of the basics of causal inference and propensity scores, followed by a practical example that brings these concepts together. At the end of this post, you should have a solid understanding of how propensity scores can be used in the real world to guide decision-making.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;causal-inference-propensity-scores&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Causal Inference &amp;amp; Propensity Scores&lt;/h3&gt;
&lt;p&gt;When people hear the words “causal inference”, they often think “A/B Test”. Indeed, the traditional way of answering causal questions is to randomly assign individuals to a treatment or control condition. The treatment is exposed to the intervention, while the control is not. The average difference is then calculated between the two conditions on some measure of interest to understand if the intervention had the desired effect.&lt;/p&gt;
&lt;p&gt;While A/B testing is considered the most rigorous way of inferring causation, it is not practical or possible in many situations. For example, if you were interested in the effect of a membership program on future purchasing behavior, you cannot assign customers to be a member or non-member; customers would enroll in the program under their own volition. Further, customers who enrolled as members are probably more interested in the product than those who did not enroll. This fact “confounds” the relationship between the effect of our member program on purchasing behavior.&lt;/p&gt;
&lt;p&gt;Propensity score matching attempts to address this issue, known as &lt;em&gt;selection bias&lt;/em&gt;, by adjusting for factors that relate both to the treatment and outcome (i.e., confounding variables). A propensity score is scaled from 0 - 1 and indicates the probability of receiving treatment. Continuing with our previous membership example, a propensity score indicates the probability that a customer joins our membership program after seeing a banner on our website or receiving a promotional email. It does not indicate their probability of making a future purchase. Formalizing the roles of individual variables that increase/decrease membership enrollment and their interrelations is the topic of the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;causal-graphs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Causal Graphs&lt;/h3&gt;
&lt;p&gt;We can codify our beliefs and assumptions about observational data through a &lt;em&gt;causal graph&lt;/em&gt;. This is normally the first step on our journey of causal inference, as it allows us to translate domain knowledge into a formal structure. By creating a diagram about potential confounding variables as well as the direction of causal influence, we make our assumptions about the data generating process explicit.&lt;/p&gt;
&lt;p&gt;In the context of the current example, we assume that a customer in enrolling as a member influences future purchase behavior, not that future purchase behavior influences enrollment in membership. We can then encode this assumption in our causal graph. The exclusion of certain variables from our graph (e.g., age, gender, what types of products someone has previously purchased, etc.) is also an assumption, such that we assume these variables do not directly or indirectly affect purchase frequency or membership.&lt;/p&gt;
&lt;p&gt;These assumptions can and should be verified. If we believe a customer’s age affects purchase frequency and membership enrollment, we can stratify our customers by age (i.e,., 20-29, 30-39) and test both hypotheses. If there were significant differences between groups, we would include an age variable in our graph and adjust for its influence on the treatment and outcome.&lt;/p&gt;
&lt;p&gt;This is a contrived example, so we’ll keep things simple and formalize the main components of our analysis as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-03-15-causal-inference-pt-1/images/dag.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Purchase Frequency&lt;/strong&gt; - the total number of purchases six months following the launch of our membership program. This is our outcome variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Membership&lt;/strong&gt; - if a customer enrolled as a member since the launch of the membership program. This is our treatment variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engagement&lt;/strong&gt; - this is an example of a latent variable. We would use several variables in practice but, to keep things simple, we’ll only use prior purchase history, defined as the total number of purchases in the six months before the launch of the membership program. This variable will serve as a proxy for Engagement. We assume that customers who have made more purchases in the past six months will be inclined to make more purchases in the future – that is, more engaged in the past translates into more engaged in the future. We also assume that this (partially) motivates membership enrollment. Engaged customers will not only purchase more frequently but also be more interested in exclusive offers and discounts – a few benefits provided to members – relative to customers that have historically purchased infrequently.&lt;/p&gt;
&lt;p&gt;The image above was created via the &lt;a href=&#34;http://dagitty.net/&#34;&gt;daggity website&lt;/a&gt;, which makes it easy to create Causal DAGs or Directed Acyclic Graphs. Note the goal of creating a propensity score is to block the arrow from &lt;strong&gt;Engagement&lt;/strong&gt; to &lt;strong&gt;Purchase Frequency&lt;/strong&gt;. This addresses the issue of &lt;em&gt;selection bias&lt;/em&gt;, in that our customers can “select into” the member condition. By adjusting for this pre-existing difference, we are attempting to make this bias &lt;em&gt;strongly ignorable&lt;/em&gt;, similar to a randomized experiment.&lt;/p&gt;
&lt;p&gt;Another aspect to consider is when an individual joined our membership program. We want to allow enough time for differences to emerge, so ideally a few months have elapsed so we can see what happens. Second, membership offers and the quality may change over time, just as the consumer’s relationship with our brand changes. By narrowing the time frame of analysis, we can further control for time-related factors.&lt;/p&gt;
&lt;p&gt;Last, we want to time-bound prior purchase history. Some customers may have frequently purchased in the past but have not been active for several years (or churned completely). We want to ensure that all customers in our sample have a chance of being exposed to the treatment. Thus, we could apply simple logic to narrow our consideration set, such as “all customers that have engaged with the brand in some capacity (e.g., made a purchase, browsed the website, or opened a marketing communication) since the start of our member program”. This is not a hard-and-fast rule but something to consider when deciding which individuals to include in your analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;estimating-the-effect-of-membership-on-purchase-frequency&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Estimating the Effect of Membership on Purchase Frequency&lt;/h3&gt;
&lt;p&gt;Now that we have a solid conceptual foundation, let’s continue to work through our membership example by generating some contrived data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(broom)
library(rsample)
library(janitor)
# set base theme as black &amp;amp; white
theme_set(theme_bw())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2021)
# sample size of members and non-members
n = 5000
# expected purchase frequency
base_lambda = .75
# purchase frequency effect size for &amp;quot;more engaged&amp;quot; customers 
engagement_effect_size = .25

less_engaged = rpois(n=n, lambda = base_lambda)
more_engaged = rpois(n=n, lambda = base_lambda + engagement_effect_size)
# create tibble with number of previous purchases for each customer
purchase_df &amp;lt;- tibble(n_purchase_pre = c(less_engaged, more_engaged))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the code block above, we expect “less engaged” customers to make 0.75 purchases (on average) over six months, and “more engaged” customers to make one purchase over the same period. The difference in purchase frequency between our customer types is ascribed to our latent variable of Engagement. We assume the data generating process for historical purchase frequency can be represented by the Poisson distribution. Recall that the Poisson distribution models the number of events expected to occur within a given period. It also approximates consumer purchase frequency patterns in the real world, such that most customers make a small number of purchases, while a few customers make a large number of purchases.&lt;/p&gt;
&lt;p&gt;We established our expected purchase frequency and engagement effect size above,so let’s simulate the effect of Engagement on Membership. We’ll create three bins and assign a probability of enrolling as a member within each bin, such that higher bins (i.e., the top 33% of customers) have a higher probability of enrolling relative to lower bins (i.e., the bottom 33% of customers).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;membership_sim &amp;lt;- function(bin){
  if(bin == 1){
    return(rbinom(1, 1, prob = 0.2))
  } else if (bin == 2){
    return(rbinom(1, 1, prob = 0.3))
  } else {
    return(rbinom(1, 1, prob = 0.4))
  }
}

purchase_df &amp;lt;- purchase_df %&amp;gt;% 
  mutate(bin = ntile(n_purchase_pre, 3),
         member_enrolled = map_int(bin, membership_sim)
         ) %&amp;gt;% 
  select(-bin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we know the true effect size (given that we generated the numbers), let’s verify the assumption that our proxy for engagement (Prior Purchases) exhibits the hypothesized effect on membership.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purchase_df %&amp;gt;% 
  mutate(n_purchase_pre = fct_lump(as.factor(n_purchase_pre), 
                                   n=2,
                                   other_level = &amp;#39;2 or More&amp;#39;
                                   )) %&amp;gt;% 
  group_by(n_purchase_pre) %&amp;gt;% 
  summarise(pct_member = mean(member_enrolled)) %&amp;gt;% 
  ggplot(aes(n_purchase_pre, pct_member)) + 
  theme_bw() + 
  geom_col() + 
  coord_flip() + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  labs(x = &amp;#39;N Prior Purchases&amp;#39;,
       y = &amp;#39;Percent Enrolled as Members&amp;#39;
       ) + 
  theme(axis.text.x = element_text(size = 12, angle = 90),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text.y = element_text(size = 14)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-01-propensity-scores/causal_inference_propensity_scores_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have validated the relationship between these variables, we’ll create the joint effect of treatment (Membership) and our single covariate (Engagement) on our outcome (Purchase Frequency).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purchase_sim &amp;lt;- function(n_purchase_pre, member_enrolled){
  membership_effect_size = .1
  if(member_enrolled == 1){
    post_purchase_freq = rpois(n=1, lambda=n_purchase_pre + membership_effect_size)
    return(post_purchase_freq)
  } else {
    post_purchase_freq = rpois(n=1, lambda=n_purchase_pre)
    return(post_purchase_freq)
  }
}

purchase_df &amp;lt;- purchase_df %&amp;gt;% 
  mutate(n_purchase_post = map2_int(n_purchase_pre, 
                                member_enrolled, 
                                purchase_sim)
         )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;purchase_sim&lt;/code&gt; function accounts for the number of prior purchases as well as if the customer has enrolled as a member. If they have enrolled, the true effect size is .1, in that enrolling a customer as a member leads to .1 additional purchases (on average) during the six months.&lt;/p&gt;
&lt;p&gt;Below, we’ll confirm that members have made more purchases relative to non-members.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_purchase_freq &amp;lt;- purchase_df %&amp;gt;% 
  group_by(member_enrolled) %&amp;gt;% 
  summarise(avg_post_purchase = mean(n_purchase_post),
            se = sqrt(mean(n_purchase_post) / n())
            ) %&amp;gt;% 
  mutate(is_member = str_to_title(ifelse(member_enrolled == 1, 
                                         &amp;#39;member&amp;#39;, 
                                         &amp;#39;non-member&amp;#39;)),
         is_member = fct_reorder(is_member, avg_post_purchase),
         lb = avg_post_purchase - 1.96 * se,
         ub = avg_post_purchase + 1.96 * se
         )

avg_purchase_freq %&amp;gt;% 
  ggplot(aes(is_member, avg_post_purchase, fill = is_member)) + 
  geom_col(color = &amp;#39;black&amp;#39;) + 
  geom_errorbar(aes(ymin = lb, ymax=ub), width=0.4) + 
  coord_flip() + 
  labs(x = NULL,
       y = &amp;#39;Average Number of Purchases&amp;#39;,
       fill = &amp;#39;Membership Status&amp;#39;
  ) + 
  theme(axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16),
        legend.position = &amp;#39;top&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-01-propensity-scores/causal_inference_propensity_scores_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Indeed, this confirms that the data aligns with our expectations. We could reach the same conclusion by fitting a regression model and then considering the magnitude of the coefficient for membership.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;incorrect_fit &amp;lt;- glm(n_purchase_post ~ member_enrolled,
                     data = purchase_df,
                     family = &amp;quot;poisson&amp;quot;
                     )

incorrect_fit_coef &amp;lt;- tidy(incorrect_fit)

intercept &amp;lt;- incorrect_fit_coef %&amp;gt;% 
  filter(term == &amp;#39;(Intercept)&amp;#39;) %&amp;gt;% 
  pull(estimate)

member_est &amp;lt;- incorrect_fit_coef %&amp;gt;% 
  filter(term == &amp;#39;member_enrolled&amp;#39;) %&amp;gt;% 
  pull(estimate)

effect_size_est &amp;lt;- round(exp(intercept + member_est) - exp(intercept), 3)
print(glue::glue(&amp;#39;Estimated Difference: {effect_size_est}&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Estimated Difference: 0.402&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if we did not adjust for any confounding variables, we would &lt;strong&gt;mistakenly conclude&lt;/strong&gt; that membership leads to ~.3 extra purchases per customer. That is, we would overestimate the effect size of membership on customer purchase behaviors because we know that Engagement affects both Membership and Purchase Frequency. In the following section, we’ll generate propensity scores to create more balance between our control and treatment groups on our confounding variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;propensity-scores&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Propensity Scores&lt;/h3&gt;
&lt;p&gt;Two common approaches for creating comparison groups with observational data are (1) &lt;em&gt;propensity score matching&lt;/em&gt; and (2) &lt;em&gt;inverse probability of treatment weighting (IPTW)&lt;/em&gt;. Both methods use a propensity score but create groups differently. Matching looks for individuals in the non-treated condition who have similar propensity scores to those in the treated condition. If groups are different sizes, the number of non-treated observations is reduced to the size of the treated condition, as each treated observation is matched with a non-treated observation. In contrast, weighting includes all observations but places more weight on observations with high propensity scores and less weight on observations with low propensity scores. While both approaches can yield similar results, I prefer weighting because you are not discarding any data.&lt;/p&gt;
&lt;p&gt;Below, we’ll specify our model for generating propensity scores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# specify model for estimating P(treatment | Previous Purchases)
model_spec &amp;lt;- as.formula(member_enrolled ~ n_purchase_pre)
member_model &amp;lt;- glm(model_spec, 
                    data = purchase_df, 
                    family = binomial())
member_prop_df &amp;lt;- member_model %&amp;gt;% 
  augment(type.predict = &amp;#39;response&amp;#39;, data = purchase_df) %&amp;gt;% 
  select(member_enrolled, n_purchase_pre, n_purchase_post, member_prob = .fitted) %&amp;gt;% 
  mutate(iptw = 1 / ifelse(member_enrolled == 0, 1 - member_prob, member_prob))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few things to note since we’ve created our propensity scores. First, we used logistic regression to estimate membership probability. However, any classification model can generate a propensity score. If there are non-linearities between your covariates and treatment variable, using a model that can better capture these relationships, such as a tree-based model, may yield better estimates.&lt;/p&gt;
&lt;p&gt;Second, we’ll need to be cognizant of the resulting weights. If certain observations receive very large weights, they will have an outsized influence on our coefficient estimates. It is a common practice to truncate large weights at 10 (why 10 I’m not sure). I’d prefer to use a point from our actual distribution, so we’ll assign any value above the 99th percentile to the value at the 99th percentile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iptw_pct_99 &amp;lt;- quantile(member_prop_df %&amp;gt;% pull(iptw), 0.99)[[1]]
member_prop_df &amp;lt;- member_prop_df %&amp;gt;% 
  mutate(iptw = ifelse(iptw &amp;gt; iptw_pct_99, iptw_pct_99, iptw))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we’ve addressed some common pre-modeling issues, let’s generate an initial estimate of the effect of Membership on Purchase Frequency.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;membership_fit &amp;lt;- glm(n_purchase_post ~ member_enrolled,
              data = member_prop_df,
              family = &amp;#39;poisson&amp;#39;,
              weights = iptw
              )
membership_fit_coef &amp;lt;- tidy(membership_fit)

intercept &amp;lt;- membership_fit_coef %&amp;gt;% 
  filter(term == &amp;#39;(Intercept)&amp;#39;) %&amp;gt;% 
  pull(estimate)

member_est &amp;lt;- membership_fit_coef %&amp;gt;% 
  filter(term == &amp;#39;member_enrolled&amp;#39;) %&amp;gt;% 
  pull(estimate)

effect_size_est_adj &amp;lt;- round(exp(intercept + member_est) - exp(intercept), 3)
print(glue::glue(&amp;#39;Estimated Difference: {effect_size_est_adj}&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Estimated Difference: 0.097&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our initial estimate indicates that membership leads to ~.1 extra purchases, which matches perfectly with the true effect size! This is a great start, but we also need to consider certainty in the estimate. In our example, we have a fairly large sample size, there is only one covariate, and the distribution of treatment (members vs. non-members) is relatively even between groups. Real world data sets, on the other hand, are often small, present a high degree of skew between groups, or exhibit intricate causal structures. The presence of these factors affects how accurately we can estimate a true effect, and using the method above to create a confidence interval can lead to incorrect estimates of our standard error (too small).
To address this issue, we’ll bootstrap the entire process - from generating our propensity score weights to estimating our causal effect - and then use the resulting distribution to better quantify uncertainty in our estimate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;member_fit_bootstrap &amp;lt;- function(split){
  temp_df &amp;lt;- analysis(split)
  
  temp_model &amp;lt;- glm(member_enrolled ~ n_purchase_pre,
                    family = binomial(),
                    data = temp_df
                  )
  
  temp_df &amp;lt;- temp_model %&amp;gt;% 
    augment(type.predict = &amp;#39;response&amp;#39;, data = temp_df) %&amp;gt;% 
    select(member_enrolled, n_purchase_pre, 
           n_purchase_post, member_prob = .fitted) %&amp;gt;% 
    mutate(iptw = 1 / ifelse(member_enrolled == 0, 
                             1 - member_prob, 
                             member_prob))
  
  temp_iptw_pct_99 &amp;lt;- quantile(temp_df %&amp;gt;% pull(iptw), 0.99)[[1]]
  
  temp_df &amp;lt;- temp_df %&amp;gt;% 
    mutate(iptw = ifelse(iptw &amp;gt; temp_iptw_pct_99, 
                         temp_iptw_pct_99, 
                         iptw))
  
  temp_ret_df &amp;lt;- glm(n_purchase_post ~ member_enrolled,
                data = temp_df,
                family = &amp;#39;poisson&amp;#39;,
                weights = iptw) %&amp;gt;% 
    tidy()
  return(temp_ret_df)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_boot = 500
boot_results &amp;lt;- bootstraps(purchase_df, n_boot, apparent = TRUE) %&amp;gt;% 
  mutate(results = map(splits, member_fit_bootstrap))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code snippet, we created 500 boot-strapped replicates and then fit a model to each. Our next step is to look at the distribution of the resulting estimates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boot_results_unnest &amp;lt;- 
  boot_results %&amp;gt;% 
  select(-splits) %&amp;gt;% 
  unnest(cols=results)

boot_results_est &amp;lt;- 
  boot_results_unnest %&amp;gt;% 
  select(id, term, estimate) %&amp;gt;% 
  pivot_wider(names_from = term, 
              values_from = estimate
              ) %&amp;gt;% 
  clean_names() %&amp;gt;% 
  mutate(est_effect = exp(member_enrolled + intercept) - exp(intercept))


boot_results_summary &amp;lt;- boot_results_est %&amp;gt;%
  summarise(lb = quantile(est_effect, 0.025),
            mdn = quantile(est_effect, 0.5),
            ub = quantile(est_effect, 0.975)
  ) %&amp;gt;%
  pivot_longer(everything())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lb_est &amp;lt;- boot_results_summary %&amp;gt;% filter(name==&amp;#39;lb&amp;#39;) %&amp;gt;% pull(value)
ub_est &amp;lt;- boot_results_summary %&amp;gt;% filter(name==&amp;#39;ub&amp;#39;) %&amp;gt;% pull(value)
effect_est &amp;lt;- boot_results_summary %&amp;gt;% filter(name==&amp;#39;mdn&amp;#39;) %&amp;gt;% pull(value)
boot_results_est %&amp;gt;% 
  ggplot(aes(x=est_effect)) + 
  geom_histogram(fill=&amp;#39;grey90&amp;#39;, color = &amp;#39;black&amp;#39;) + 
  theme_bw() + 
  geom_segment(aes(x=lb_est, xend = lb_est), y = 0, yend = 10, lty = 3, size = 2) + 
  geom_segment(aes(x=effect_est, xend = effect_est), y = 0, yend = 10, lty = 3, size = 2) + 
  geom_segment(aes(x=ub_est, xend = ub_est), y = 0, yend = 10, lty = 3, size = 2) + 
  annotate(geom=&amp;#39;text&amp;#39;, x=lb_est, y = 11, label = round(lb_est, 2), size = 8) + 
  annotate(geom=&amp;#39;text&amp;#39;, x=effect_est, y = 11, label = round(effect_est, 2), size = 8) + 
  annotate(geom=&amp;#39;text&amp;#39;, x=ub_est, y = 11, label = round(ub_est, 2), size = 8) + 
  labs(x = &amp;#39;Estimated Treatment Effect&amp;#39;) + 
  theme(
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-01-propensity-scores/causal_inference_propensity_scores_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Our final estimate of the causal effect of membership on purchase frequency is between 0.06 and 0.14. Note that these confidence intervals aren’t much different from those in the original, non-bootstrapped approach. As mentioned previously, the primary reason is that our sample size for both groups is fairly large and there is not a lot of variance in the determinants of membership, given that we generated the data. However, in many instances, confidence intervals following bootstrapping will be wider – and more accurate – than those provided by OLS.&lt;/p&gt;
&lt;p&gt;Hopefully, this provided a solid end-to-end walkthrough of how to generate causal inferences from observational data with propensity scores. In the next post, we’ll discuss an equally important topic – variance reduction methods – that come in handy when you can run a true A/B test. Until then, happy experimenting!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Choosing a Fantasy Football Kicker with Emperical Bayes Estimation</title>
      <link>http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers/</link>
      <pubDate>Mon, 26 Aug 2019 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/images/header_image.jpg&#34; width=&#34;700&#34; height=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;In less than two weeks, Fantasy Football will once again resume for the 2019 NFL season! While I’m looking forward to the impending draft, the start of the season brings back memories of a not-so-distant loss that left me one game shy of the championship. The loss stemmed from a missed field goal, leaving my team two points shy of victory. Of course, a myriad of factors beyond that missed field goal contributed to my fantasy demise, but those two points reinvigorated a question I’ve wondered about for the past few years: Why are kickers drafted in the last round?&lt;/p&gt;
&lt;p&gt;Prevailing wisdom suggests that your kicker doesn’t matter. Some Fantasy Football leagues don’t even have kickers on the roster, which I think does a disservice to a player who probably doesn’t get invited to the cool team parties yet can decide the fate of a season in a single moment (like mine). As long as they suit up to take the field, the rest is out of your control. However, is it a suboptimal strategy to relegate your choice of kicker to the final round of the draft? Let’s find out!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Before loading any data or discussing techniques, we’ll begin by defining our analytical objective. An easy way to get started is by posing a simple question: “How many more points can I expect over a 16-game regular season if I draft the best kicker relative to the worst kicker?” We’ll answer this question in two steps. First, we’ll estimate the &lt;em&gt;True&lt;/em&gt; field goal percentage for each kicker currently active in the NFL (as of 2016), which is analogous to a batting average in baseball or free-throw percentage in basketball. This parameter estimate will be used to compare the skill of one kicker to another. Second, we’ll translate our estimate into actual Fantasy Football points by simulating the outcomes 1000 football seasons for each kicker. Simulation enables us to quantify a realistic point differential between kickers, which is what we (the Fantasy Football team owners) will use to determine if we should try to select the best kicker by drafting in an earlier round.&lt;/p&gt;
&lt;p&gt;With that question in mind, let’s load all pertinent libraries. The data can be downloaded directly from the 🎋 &lt;a href=&#34;https://github.com/thecodeforest&#34;&gt;the codeforest data repo&lt;/a&gt; 🎄. Note the original data comes from Kaggle and can found &lt;a href=&#34;https://www.kaggle.com/kendallgillies/nflstatistics/version/1?select=Career_Stats_Field_Goal_Kickers.csv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Modeling 
library(gamlss)

# Core packages
library(tidyverse)
library(janitor)

# Visualization 
library(ggplot2)
library(scales)
library(viridis)
library(ggridges)

# Tables
library(gt)

# Global plot theme
theme_set(theme_minimal())

# Code Forest repo
data_url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/fantasy_football_kickers_data/Career_Stats_Field_Goal_Kickers.csv&amp;quot;

# Helper function for visualization
my_plot_theme = function(){
  font_family = &amp;quot;Helvetica&amp;quot;
  font_face = &amp;quot;bold&amp;quot;
  return(theme(
    axis.text.x = element_text(size = 16, face = font_face, family = font_family),
    axis.text.y = element_text(size = 16, face = font_face, family = font_family),
    axis.title.x = element_text(size = 16, face = font_face, family = font_family),
    axis.title.y = element_text(size = 16, face = font_face, family = font_family),
    strip.text.y = element_text(size = 22, face = font_face, family = font_family),
    plot.title = element_text(size = 22, face = font_face, family = font_family),
    
    legend.position = &amp;quot;top&amp;quot;,
    legend.title = element_text(size = 16,
                                face = font_face,
                                family = font_family),
    legend.text = element_text(size = 16,
                               face = font_face,
                               family = font_family),
    legend.key = element_rect(size = 5),
    legend.key.size = unit(1.5, &amp;#39;lines&amp;#39;)
  ))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several columns we won’t be using so we’ll select only the relevant ones.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_raw &amp;lt;- read_csv(data_url) %&amp;gt;% 
  clean_names() %&amp;gt;% 
  select(player_id, 
         name, 
         year, 
         games_played, 
         contains(&amp;#39;made&amp;#39;), 
         contains(&amp;#39;attempted&amp;#39;),
         contains(&amp;#39;percentage&amp;#39;),
         -contains(&amp;#39;extra&amp;#39;), 
         -longest_fg_made
         )

glimpse(stats_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 1,994
## Columns: 19
## $ player_id                  &amp;lt;chr&amp;gt; &amp;quot;jeffhall/2500970&amp;quot;, &amp;quot;benagajanian/2508255&amp;quot;…
## $ name                       &amp;lt;chr&amp;gt; &amp;quot;Hall, Jeff&amp;quot;, &amp;quot;Agajanian, Ben&amp;quot;, &amp;quot;Agajanian…
## $ year                       &amp;lt;dbl&amp;gt; 2000, 1964, 1962, 1961, 1961, 1960, 1957, …
## $ games_played               &amp;lt;dbl&amp;gt; 3, 3, 6, 3, 3, 14, 12, 10, 12, 12, 10, 12,…
## $ f_gs_made                  &amp;lt;chr&amp;gt; &amp;quot;4&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;13&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;5&amp;quot;, …
## $ f_gs_made_20_29_yards      &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_made_30_39_yards      &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_made_40_49_yards      &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_made_50_yards         &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_attempted             &amp;lt;chr&amp;gt; &amp;quot;5&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;14&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;24&amp;quot;, &amp;quot;18&amp;quot;, &amp;quot;13&amp;quot;…
## $ f_gs_attempted_20_29_yards &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_attempted_30_39_yards &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_attempted_40_49_yards &amp;lt;chr&amp;gt; &amp;quot;2&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ f_gs_attempted_50_yards    &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;…
## $ fg_percentage              &amp;lt;chr&amp;gt; &amp;quot;80.0&amp;quot;, &amp;quot;50.0&amp;quot;, &amp;quot;35.7&amp;quot;, &amp;quot;50.0&amp;quot;, &amp;quot;33.3&amp;quot;, &amp;quot;5…
## $ fg_percentage_20_29_yards  &amp;lt;chr&amp;gt; &amp;quot;100.0&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--…
## $ fg_percentage_30_39_yards  &amp;lt;chr&amp;gt; &amp;quot;100.0&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--…
## $ fg_percentage_40_49_yards  &amp;lt;chr&amp;gt; &amp;quot;50.0&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;…
## $ fg_percentage_50_yards     &amp;lt;chr&amp;gt; &amp;quot;100.0&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--&amp;quot;, &amp;quot;--…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like most real-world datasets, this one is a bit messy (e.g., non-values are coded as “–”). I find it helps at the outset of data cleaning to envision what a perfect, pristine dataset should look like once data munging steps are complete. Below is an example of a basic starting point.
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#zpvivrqdou .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#zpvivrqdou .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#zpvivrqdou .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#zpvivrqdou .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#zpvivrqdou .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#zpvivrqdou .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#zpvivrqdou .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#zpvivrqdou .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#zpvivrqdou .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#zpvivrqdou .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#zpvivrqdou .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#zpvivrqdou .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#zpvivrqdou .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#zpvivrqdou .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#zpvivrqdou .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#zpvivrqdou .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#zpvivrqdou .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#zpvivrqdou .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#zpvivrqdou .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#zpvivrqdou .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#zpvivrqdou .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#zpvivrqdou .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#zpvivrqdou .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#zpvivrqdou .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#zpvivrqdou .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#zpvivrqdou .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#zpvivrqdou .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#zpvivrqdou .gt_left {
  text-align: left;
}

#zpvivrqdou .gt_center {
  text-align: center;
}

#zpvivrqdou .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#zpvivrqdou .gt_font_normal {
  font-weight: normal;
}

#zpvivrqdou .gt_font_bold {
  font-weight: bold;
}

#zpvivrqdou .gt_font_italic {
  font-style: italic;
}

#zpvivrqdou .gt_super {
  font-size: 65%;
}

#zpvivrqdou .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;zpvivrqdou&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Desired Data Format&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;id&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;n_success&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;n_trials&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;20&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;60&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;61&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I used generic column names if you’re interested in adopting the techniques described herein to solve a separate problem. At a basic level, each row represents an individual observation, a count of the number of successes (i.e., count how many field goals are made), and finally the number of trials (i.e., count how many field goals are attempted). If you have this setup, the building blocks are in place to get started.&lt;/p&gt;
&lt;p&gt;However, before going any further, we need to ensure the relationships in the data align with our understanding of the world. One approach is to generate some simple hypotheses that you know to be true. For example, water is wet, the sky is blue, and, in our case, the field goal percentage should decrease as the distance to the goal increases. That is, field goals taken from 50+ yards should be made at a lower rate those taken from 30-35 yards. Let’s verify our hypothesis below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_by_dist &amp;lt;-
  stats_raw %&amp;gt;%
  select(starts_with(&amp;quot;fg_percentage_&amp;quot;)) %&amp;gt;%
  mutate_all(as.numeric) %&amp;gt;%
  gather(key = &amp;quot;dist&amp;quot;, value = &amp;quot;fg_pct&amp;quot;) %&amp;gt;%
  mutate(
    dist = str_extract(dist,
                       pattern = &amp;quot;\\d{2}&amp;quot;
                       ),
    dist = if_else(dist == &amp;quot;50&amp;quot;,
                   paste0(dist, &amp;quot;+&amp;quot;),
                   paste0(dist,&amp;quot;-&amp;quot;,as.numeric(dist) + 9)
                   ),
    fg_pct = fg_pct / 100
  ) %&amp;gt;%
  na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_by_dist %&amp;gt;% 
  ggplot(aes(fg_pct, dist, fill = dist)) + 
  geom_density_ridges(
    aes(point_color = dist, 
        point_fill = dist, 
        point_shape = dist),
        alpha = .2, 
        point_alpha = 1, 
        jittered_points = TRUE
    ) + 
  scale_point_color_hue(l = 40) +
  scale_discrete_manual(aesthetics = &amp;quot;point_shape&amp;quot;, 
                        values = c(21, 22, 23, 24)) + 
  scale_x_continuous(labels = scales::percent,
                     breaks = c(0,0.2, 0.4, 0.6, 0.8, 1)
                     ) + 
  scale_fill_viridis_d() + 
  my_plot_theme() + 
  labs(x = &amp;#39;Field Goal Percentage&amp;#39;,
       y = &amp;#39;Distance (Yards)&amp;#39;
       ) + 
    theme(legend.position = &amp;#39;none&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looks good! Each point represents the field goal percentage for a player-season-distance combination. As the distance increases, the make rate gradually shifts to left, which is exactly what we’d expect. We’ll do a bit more cleaning below before proceeding.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_processed &amp;lt;- 
  stats_raw %&amp;gt;%
  mutate(
    name = str_remove(name, &amp;quot;,&amp;quot;),
    first_name = map(name, function(x) str_split(x, &amp;quot; &amp;quot;)[[1]][2]),
    last_name = map(name, function(x) str_split(x, &amp;quot; &amp;quot;)[[1]][1]),
    player_id = str_extract(player_id, &amp;quot;\\d+&amp;quot;)
  ) %&amp;gt;%
  unite(&amp;quot;name&amp;quot;, c(&amp;quot;first_name&amp;quot;, &amp;quot;last_name&amp;quot;), sep = &amp;quot; &amp;quot;) %&amp;gt;%
  mutate_at(vars(matches(&amp;quot;attempted|made&amp;quot;)), as.numeric) %&amp;gt;% 
  replace(., is.na(.), 0) %&amp;gt;% 
  select(player_id, name, year, games_played, contains(&amp;quot;made&amp;quot;), contains(&amp;quot;attempted&amp;quot;)) %&amp;gt;%
  rename(
    fg_made = f_gs_made,
    fg_attempted = f_gs_attempted
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s view the resulting data for one of the best kickers in modern NFL to familiarize ourselves with the format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_processed %&amp;gt;%
  filter(name == &amp;quot;Justin Tucker&amp;quot;) %&amp;gt;%
  mutate(fg_pct = fg_made / fg_attempted) %&amp;gt;% 
  select(name, year, fg_made, fg_attempted)&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#pkjidbziro .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pkjidbziro .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pkjidbziro .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pkjidbziro .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pkjidbziro .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pkjidbziro .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pkjidbziro .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pkjidbziro .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pkjidbziro .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pkjidbziro .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pkjidbziro .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pkjidbziro .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#pkjidbziro .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pkjidbziro .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#pkjidbziro .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#pkjidbziro .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pkjidbziro .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#pkjidbziro .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pkjidbziro .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#pkjidbziro .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pkjidbziro .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pkjidbziro .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pkjidbziro .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pkjidbziro .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pkjidbziro .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#pkjidbziro .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pkjidbziro .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#pkjidbziro .gt_left {
  text-align: left;
}

#pkjidbziro .gt_center {
  text-align: center;
}

#pkjidbziro .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pkjidbziro .gt_font_normal {
  font-weight: normal;
}

#pkjidbziro .gt_font_bold {
  font-weight: bold;
}

#pkjidbziro .gt_font_italic {
  font-style: italic;
}

#pkjidbziro .gt_super {
  font-size: 65%;
}

#pkjidbziro .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;pkjidbziro&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Justin Tucker Stats&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;year&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fg_made&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fg_attempted&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Justin Tucker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2016&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;38&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Justin Tucker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2015&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;33&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Justin Tucker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2014&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;29&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;34&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Justin Tucker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2013&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;38&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Justin Tucker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2012&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;33&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Just like what we had above! Next, we’ll add a few filters to reduce some of the noise in our data. Any player who has less than 30 field goal attempts and/or has kicked field goals in only one season across their career will be excluded from the analysis. Additionally, we’ll ignore any players with a rookie year before the 1970s. The rationale here is that the NFL made several changes to the location and positioning of the goal during the early 70s, so we want to keep the dynamics of the kicking environment consistent for all players.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min_attempts &amp;lt;- 30
min_seasons &amp;lt;- 2
min_decade &amp;lt;- 1970

filter_df &amp;lt;- 
  stats_processed %&amp;gt;% 
  group_by(player_id) %&amp;gt;% 
  summarise(n_seasons = n(),
            n_attempts = sum(fg_attempted),
            rookie_decade = min(year) %/% 10 * 10
            ) %&amp;gt;% 
  filter(n_seasons &amp;gt;= min_seasons,
         n_attempts &amp;gt;= min_attempts,
         rookie_decade &amp;gt;= min_decade
         ) %&amp;gt;% 
  select(player_id)

stats_processed &amp;lt;- inner_join(stats_processed, filter_df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll add a few features before aggregating the kicking data from a season level to a career level for each player. I’ll cover the rationale of the features shortly in the estimation and inference section below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_time_stats &amp;lt;- 
  stats_processed %&amp;gt;% 
  group_by(player_id) %&amp;gt;% 
  summarise(
    rookie_decade  = min(year) %/% 10 * 10,
    last_yr_active = max(year)
    ) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  filter(rookie_decade &amp;gt;= min_decade) %&amp;gt;% 
  mutate(status = ifelse(last_yr_active == 2016, &amp;#39;active&amp;#39;, &amp;#39;inactive&amp;#39;))

stats_processed &amp;lt;- inner_join(stats_processed,df_time_stats)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have our time-based features and the last step is to calculate our three key metrics – successes, attempts, and our rate metric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_agg &amp;lt;- 
  stats_processed %&amp;gt;% 
  group_by(player_id, name, rookie_decade, status) %&amp;gt;% 
  summarise(fg_made = sum(fg_made),
            fg_attempted = sum(fg_attempted),
            fg_pct = fg_made / fg_attempted
            ) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time to move on to the key focus of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;estimation-and-inference&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Estimation and Inference&lt;/h3&gt;
&lt;p&gt;Let’s now discuss the logic underlying our estimation method as well as the role of the additional features (Note that some of the code below was inspired by the excellent book &lt;a href=&#34;http://varianceexplained.org/r/empirical-bayes-book/&#34;&gt;Introduction to Empirical Bayes: Examples from Baseball Statistics&lt;/a&gt; by David Robinson). To recap, we are estimating a proportion that captures the relationship between successes and attempts. We can model this outcome with the &lt;code&gt;beta distribution&lt;/code&gt;, which is simply a distribution of probabilities ranging from 0 - 1. In our case, it represents the likelihood of a particular field goal percentage for each player, which will fall somewhere between 0.5 and 0.9 depending on the decade(s) the player was active (more on that in second).&lt;/p&gt;
&lt;p&gt;Below we’ll fit an &lt;em&gt;null model&lt;/em&gt; with no additional parameters when estimating each player’s &lt;code&gt;beta&lt;/code&gt; value. The absence of any inputs means that all players have the same &lt;code&gt;prior&lt;/code&gt;, independent of what decade they played in, whether they’re still active, or how many chances they’ve had to kick a field goal. We’ll then take our prior and update it based on how much information we have about each player, namely the number of field goals they’ve taken and how often they’ve succeeded.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_null &amp;lt;- gamlss(cbind(fg_made, fg_attempted - fg_made) ~ 1,
  family = BB(mu.link = &amp;quot;identity&amp;quot;),
  data = stats_agg
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GAMLSS-RS iteration 1: Global Deviance = 936.6917 
## GAMLSS-RS iteration 2: Global Deviance = 836.9846 
## GAMLSS-RS iteration 3: Global Deviance = 828.0258 
## GAMLSS-RS iteration 4: Global Deviance = 827.9528 
## GAMLSS-RS iteration 5: Global Deviance = 827.9526&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_agg_est &amp;lt;- 
  stats_agg %&amp;gt;% 
   mutate(
    mu = fitted(fit_null, &amp;quot;mu&amp;quot;), 
    sigma = fitted(fit_null, &amp;quot;sigma&amp;quot;), 
    alpha0 = mu / sigma, 
    beta0 = (1 - mu) / sigma,
    alpha1 = alpha0 + fg_made,
    beta1 = beta0 + fg_attempted - fg_made,
    estimate = alpha1 / (alpha1 + beta1),
    raw = fg_made / fg_attempted,
    low = qbeta(.025, alpha1, beta1),
    high = qbeta(.975, alpha1, beta1)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s plot out the estimate for all active players.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_agg_est %&amp;gt;%
  mutate(name = paste0(name, &amp;quot;: &amp;quot;, fg_made, &amp;quot;|&amp;quot;, fg_attempted),
         name = fct_reorder(name, estimate)
         ) %&amp;gt;%
  filter(status == &amp;quot;active&amp;quot;) %&amp;gt;%
  ggplot(aes(name, estimate)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = low, ymax = high)) +
  coord_flip() +
  geom_point(aes(name, raw), color = &amp;quot;red&amp;quot;, size = 3, alpha = 0.6) +
  scale_y_continuous(labels = scales::percent_format()) + 
  my_plot_theme() + 
  labs(x = NULL,
       y = &amp;#39;Field Goal Percentage&amp;#39;,
       title = &amp;#39;Estimated field goal percentage amongst active NFL kickers&amp;#39;,
       subtitle = &amp;#39;Black dot represents estimate while red dot is actual. Note the bias in our estimates.&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s talk through this figure by comparing the field goal percentage estimates for Adam Vinatieri, who has made 530 of 629 fields goals throughout his career, to Chris Boswell, who has made 50 of 57 field goals. While Vinatieri has a lower actual make rate than Boswell (84.2% vs. 87.7%), we consider him to be a better field goal kicker. The seemingly incongruent finding is based on the fact that we have more evidence for Vinatieri (629 FG attempts vs. 57 FG attempts) than Boswell. It’s like saying, “Chris Boswell is good kicker, maybe better than Vinatieri, but we don’t have enough evidence (yet) to believe he is that much better than an average kicker, a number represented by our prior”. Indeed, if we also consider the width of the credible intervals surrounding these two players, Adam Vinatieri’s interval is considerably smaller than Chris Boswell’s interval.&lt;/p&gt;
&lt;p&gt;While this is a good way to gain an intuition for what’s happening under the hood, we see an immediate problem – all of our estimates are biased! The actual field goal percentage is above every single estimate. Luckily, there is a solution: we can create conditional estimates of our prior. One way to do this is to create features that explain variability between our players. For example, &lt;a href=&#34;https://fivethirtyeight.com/features/kickers-are-forever/&#34;&gt;field goal percentages have improved dramatically over the past 50 years&lt;/a&gt;. Let’s consider our own data and map out this pattern from the 1970s to the 2010s.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_agg %&amp;gt;%
  mutate(rookie_decade = as.factor(rookie_decade)) %&amp;gt;%
  ggplot(aes(rookie_decade, fg_pct, color = rookie_decade)) +
  geom_boxplot() +
  geom_jitter() +
  scale_y_continuous(labels = scales::percent_format()) +
  my_plot_theme() +
  scale_color_viridis_d() + 
  theme(legend.position = &amp;quot;none&amp;quot;) +
  labs(
    x = &amp;quot;Decade&amp;quot;,
    y = &amp;quot;Field Goal Percentage&amp;quot;,
    title = &amp;#39;Kicker performance has improved over time&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1152&#34; /&gt;
The best kicker in 1970s has a lower field goal percentage than the worst kicker in the 2010s. Including the decade of a kicker’s rookie season allows us to create a more informed prior. Thus, if we use the median field goal percentage of all kickers who debuted as rookies in 2010+, our best guess would be about 84%, whereas a kicker who debuted in the 1970s would be somewhere around 64%. This explains why the estimates from our null model were biased.&lt;/p&gt;
&lt;p&gt;The second factor to consider is the number of field goal attempts per player, because better players have more opportunities to kick field goals. This makes intuitive sense and is captured in the following plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats_agg %&amp;gt;%
  ggplot(aes(log2(fg_attempted), fg_pct)) +
  geom_point(size = 3) +
  geom_smooth(span = 1) +
  scale_y_continuous(labels = scales::percent_format()) +
  my_plot_theme() +
  labs(
    x = &amp;quot;Log2(Total Attempts)&amp;quot;,
    y = &amp;quot;Field Goal percentage&amp;quot;,
    title = &amp;quot;Better kickers have more opportunities&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Below we’ll use the same model except this time we’ll account for the number of field goal attempts and a player’s rookie decade.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_complete &amp;lt;- 
  gamlss(cbind(fg_made, fg_attempted - fg_made) ~ log2(fg_attempted) + rookie_decade,
  family = BB(mu.link = &amp;quot;identity&amp;quot;),
  data = stats_agg
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GAMLSS-RS iteration 1: Global Deviance = 918.3071 
## GAMLSS-RS iteration 2: Global Deviance = 714.8471 
## GAMLSS-RS iteration 3: Global Deviance = 668.3708 
## GAMLSS-RS iteration 4: Global Deviance = 668.1839 
## GAMLSS-RS iteration 5: Global Deviance = 668.1838&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;1152&#34; /&gt;
Much better! Our estimates do not exhibit the same degree of bias as before. Moreover, the width of our credible intervals shrank across all players. This makes sense, given that we can now condition our prior estimates on inputs that explain variability in the field goal percentage. While there are other factors that might improve our model (e.g., did a player’s team have their home games in a dome?), this is a good starting point for answering our original question.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;from-parameters-to-points&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;From Parameters to Points&lt;/h3&gt;
&lt;p&gt;We have a model that does a reasonable job of estimating a kicker’s field goal percentage. Now we need to translate that into an estimate of fantasy points. This will take a few steps, but I’ll outline each in turn. First, we need to estimate the average worth (in fantasy points) of each successful field goal. Typically, field goals less-than 40 yards are worth 3 points, 40 - 49 yards are worth 4 points, and 50 or more yards are worth 5 points. We’ll use the 2016 season to come up with a global average. While we could technically account for distances of each player (e.g., some kickers are excellent at a longer distances, others not so much), this approach will give us a “good-enough” answer. Second, we’ll estimate the average number of field goal attempts per season. This can vary widely from one season to the next for a given kicker, as it is contingent upon the offense getting within kicking range. Again, we’ll keep it simple and just average the number of attempts across all players from the 2016 season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Average points per FG
pts_per_fg &amp;lt;- 
  stats_processed %&amp;gt;% 
  filter(year == 2016) %&amp;gt;% 
  mutate(pt_3_fgs = (f_gs_made_20_29_yards + f_gs_made_30_39_yards) * 3,
         pt_4_fgs = f_gs_made_40_49_yards * 4,
         pt_5_fgs = f_gs_made_50_yards * 5,
         tot_pts = pt_3_fgs + pt_4_fgs + pt_5_fgs
  )

pts_per_fg &amp;lt;- round(sum(pts_per_fg$tot_pts) / sum(pts_per_fg$fg_made), 1)

# Average number of attempts
attempts_per_season &amp;lt;- 
  stats_processed %&amp;gt;% 
  filter(year == 2016) %&amp;gt;% 
  pull(fg_attempted) %&amp;gt;% 
  mean() %&amp;gt;% 
  round()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes the fun part. Below we’ll simulate 1000 seasons for each player by randomly generating 1000 values of &lt;code&gt;beta&lt;/code&gt;. This value is based on the posterior estimates, &lt;code&gt;alpha1&lt;/code&gt; and &lt;code&gt;beta1&lt;/code&gt;, produced by our model. The estimates will vary from one simulation to next, though most values will fall somewhere between 0.75 and 0.9. Better players like Justin Tucker will be near the high end of that range while player like Graham Gano will be near the lower end. We’ll then take each estimate and plug it into the &lt;code&gt;binomial distribution&lt;/code&gt; below. Recall that the &lt;code&gt;binomial distribution&lt;/code&gt; is defined by a single parameter, which represents the probability of success. This is exactly what our estimate of &lt;code&gt;beta&lt;/code&gt; represents! Given that all active players had an average of 27 FG attempts in 2016, each of the 1000 simulations will consist of 27 trials (or &lt;code&gt;attempts_per_season&lt;/code&gt;) each with a slightly different probability of success (how likely they are to make a field goal on a given attempt). We’ll lean on the &lt;code&gt;purrr&lt;/code&gt; package to vectorize these operations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2018)
n_seasons &amp;lt;- 1000

est_active &amp;lt;- 
  stats_agg_est %&amp;gt;% 
  filter(status == &amp;#39;active&amp;#39;)

est_make_pct &amp;lt;- map2(est_active %&amp;gt;% pull(alpha1),
                     est_active %&amp;gt;% pull(beta1), 
                     function(x, y) rbeta(n_seasons, x, y)
                     )
est_outcomes &amp;lt;- map(est_make_pct, 
                    function(x) rbinom(n = n_seasons, 
                                       size = attempts_per_season,
                                       prob = x
                                       )
                    )
names(est_outcomes) &amp;lt;- est_active$name&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So much data! Below we’ll plot the distribution of total points accumulated for each player across the 1000 simulated seasons. We’ll create quantiles as a way to see how much overlap there is between players.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt_simulation &amp;lt;- 
  est_outcomes %&amp;gt;% 
  tbl_df() %&amp;gt;% 
  gather() %&amp;gt;% 
  transmute(name = key,
            season_pts = value * pts_per_fg
            ) %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  mutate(avg_pts = mean(season_pts)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(name = fct_reorder(name, avg_pts))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `tbl_df()` is deprecated as of dplyr 1.0.0.
## Please use `tibble::as_tibble()` instead.
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_warnings()` to see where this warning was generated.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt_simulation %&amp;gt;% 
  ggplot(aes(season_pts, y = name, fill = factor(..quantile..))) + 
  stat_density_ridges(
    geom = &amp;quot;density_ridges_gradient&amp;quot;,
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE,
    bandwidth = 2
  ) +
  scale_fill_viridis(discrete = TRUE, name = &amp;quot;Point Quartile&amp;quot;, alpha = 0.5) +
  my_plot_theme() + 
  scale_x_continuous(breaks = pretty_breaks(n = 7)) + 
  labs(x = &amp;#39;Total Points Per Simulated Season&amp;#39;,
       y = NULL,
       title = &amp;quot;The best kicker is not much better than the worst kicker&amp;quot;,
       subtitle = &amp;#39;Drafing any kicker is fine&amp;#39;
       ) + 
  theme(legend.position = &amp;#39;none&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wait! We went all this way for you to tell me that the status quo is probably right? Yes, I did. But we still haven’t quantified how much better or worse drafting the best or worst kicker is in terms of fantasy points. A simple way is to count the number of seasons where Justin Tucker (the best kicker) scored more points than Andrew Franks (the worst kicker).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jt_pts &amp;lt;- 
  pt_simulation %&amp;gt;% 
  filter(name == &amp;#39;Justin Tucker&amp;#39;) %&amp;gt;% 
  pull(season_pts) 

af_pts &amp;lt;- 
pt_simulation %&amp;gt;% 
  filter(name == &amp;#39;Andrew Franks&amp;#39;) %&amp;gt;% 
  pull(season_pts)

pct_greater &amp;lt;- sum(jt_pts &amp;gt; af_pts) / n_seasons
print(str_glue(&amp;#39;PCT greater: {pct_greater * 100}%&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## PCT greater: 77.5%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out that approximately 77 of every 100 seasons Justin Tucker outscores Andrew Franks. Let’s go one step further and quantify the actual difference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data.frame(pt_diff = jt_pts - af_pts), aes(pt_diff)) + 
  geom_histogram(fill = &amp;#39;gray&amp;#39;, color = &amp;#39;black&amp;#39;, bins = 10) + 
  scale_x_continuous(breaks = pretty_breaks(n = 15)) + 
  labs(x = &amp;#39;Point Difference over Entire Season&amp;#39;) + 
  theme_minimal() + 
  geom_vline(xintercept = quantile(jt_pts - af_pts, .05), lty = 2) + 
  geom_vline(xintercept = quantile(jt_pts - af_pts, .5), lty = 2, color = &amp;#39;red&amp;#39;, size = 2) + 
  geom_vline(xintercept = quantile(jt_pts - af_pts, .95), lty = 2) + 
  my_plot_theme() + 
  labs(x = &amp;#39;Point Difference&amp;#39;,
       y = &amp;#39;Count&amp;#39;,
       title = &amp;#39;The best kicker should score about 10 more points per season compared to the worst&amp;#39;,
       subtitle = &amp;#39;Estimate based on 27 FG attempts per season with each FG worth 3.5 points&amp;#39;
       )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-08-29-fantasy-football-kickers/fantasy_football_kickers_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;1152&#34; /&gt;
If we spread this estimate out across 16 regular-season games, it comes out to less than a single point per game.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Needless to say, pick your kicker last in Fantasy Football! All kickers in modern-day NFL are really good, so save those late-round picks for positions other than a kicker. Cheers!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The State of Names in America</title>
      <link>http://example.org/post/2019-06-12-state-of-names/state_of_names/</link>
      <pubDate>Wed, 12 Jun 2019 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2019-06-12-state-of-names/state_of_names/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/images/header_img.jpg&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Phil Karlton, a famous Netscape Developer (i.e., OG Google Chrome) once said, ‘There are two hard things in computer science: cache invalidation and naming things’. I haven’t done much cache invalidation, but I have named a few things – and naming a person is by far the hardest of them all! Indeed, having waited two days after my own son’s birth to finally settle on a name, I wondered to what extent other new parents encountered the same struggles. Are there shortcuts or heuristics that others use to simplify the decision-making process, specifically cues from their immediate surroundings to help guide their choices when choosing a baby name? This question motivated me to look into the nuances of naming conventions over the past century in America.&lt;/p&gt;
&lt;p&gt;Accordingly, in this post, we’ll investigate the influence of one’s state of residence on the frequency with which certain names occur. We’ll also explore possible reasons for why some states have more variety in their names than others. Finally, we’ll finish up in my home state of Oregon to identify the trendiest names over the past 20 years and predict whether those names will remain trendy in the future. From a technical standpoint, we’ll cover some central, bread-and-butter topics in data science, including trend detection, false discovery rates, web scraping, time-series forecasting, and geovisualization. Let’s get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;people-born-in-oregon-are-named-after-trees&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;People Born in Oregon are Named after Trees&lt;/h3&gt;
&lt;p&gt;We’ll begin by downloading more than 110 years of US name data from 🎄 &lt;a href=&#34;https://github.com/thecodeforest&#34;&gt;the codeforest github repo&lt;/a&gt; 🎄. Our dataset is published yearly by the &lt;a href=&#34;https://www.ssa.gov/OACT/babynames/limits.html&#34;&gt;Social Security Administration&lt;/a&gt;, and it contains a count of all names that occur more than five times by year within each US state. Let’s get started by loading relevant libraries and pulling our data into R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Core Packages
library(tidyverse)
library(purrr)
library(skimr)
library(janitor)
library(drlib)
library(broom)
library(openintro)
library(sweep)
library(tidytext)
library(usdata)

# Date Manipulation
library(lubridate)

# Forecasting Packages
library(forecast)
library(timetk)

# Webscraping
library(rvest)

# Visualization Packages
library(ggplot2)
library(ggmap)
library(ggthemes)
library(ggrepel)
library(artyfarty)
library(gt)
library(maps)

# Trend Detection Packages
library(trend)

# # Set visualization themes
theme_set(theme_bw())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_repo &amp;lt;- &amp;quot;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/state_of_names&amp;quot;
# Create unique path for each state
data_paths &amp;lt;- paste0(file.path(data_repo, datasets::state.abb), &amp;#39;.TXT&amp;#39;)
# Append data from each state into single table
names_raw_df &amp;lt;- data_paths %&amp;gt;%
  purrr::map(read_csv, col_names = FALSE) %&amp;gt;%
  reduce(rbind)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s have a quick peek at our data.&lt;br /&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#uylsmmxvft .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#uylsmmxvft .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#uylsmmxvft .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#uylsmmxvft .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#uylsmmxvft .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#uylsmmxvft .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#uylsmmxvft .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#uylsmmxvft .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#uylsmmxvft .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#uylsmmxvft .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#uylsmmxvft .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#uylsmmxvft .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#uylsmmxvft .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#uylsmmxvft .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#uylsmmxvft .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#uylsmmxvft .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#uylsmmxvft .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#uylsmmxvft .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#uylsmmxvft .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#uylsmmxvft .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#uylsmmxvft .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#uylsmmxvft .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#uylsmmxvft .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#uylsmmxvft .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#uylsmmxvft .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#uylsmmxvft .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#uylsmmxvft .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#uylsmmxvft .gt_left {
  text-align: left;
}

#uylsmmxvft .gt_center {
  text-align: center;
}

#uylsmmxvft .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#uylsmmxvft .gt_font_normal {
  font-weight: normal;
}

#uylsmmxvft .gt_font_bold {
  font-weight: bold;
}

#uylsmmxvft .gt_font_italic {
  font-style: italic;
}

#uylsmmxvft .gt_super {
  font-size: 65%;
}

#uylsmmxvft .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;uylsmmxvft&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;5&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Sample Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;5&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;X1&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;X2&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;X3&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;X4&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;X5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;AL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;FALSE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1910&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Mary&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;875&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;AL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;FALSE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1910&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Annie&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;482&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;AL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;FALSE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1910&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Willie&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;257&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;AL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;FALSE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1910&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Mattie&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;232&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;AL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;FALSE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1910&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Ruby&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;204&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;A little cleaning is in order. We’ll name our fields, create a gender feature, and remove spurious names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(names_raw_df) &amp;lt;- c(&amp;quot;state&amp;quot;, &amp;quot;gender&amp;quot;, &amp;quot;year&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;frequency&amp;quot;)

names_processed_df &amp;lt;- names_raw_df %&amp;gt;% 
  mutate(gender = ifelse(is.na(gender), &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;)) %&amp;gt;%
  filter(!str_to_lower(name) %in% c(&amp;quot;unknown&amp;quot;, &amp;quot;noname&amp;quot;, &amp;quot;female&amp;quot;, &amp;quot;male&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s do some quick exploratory data analysis before addressing our original questions. Any time we are working with categorical variables (e.g., name, state, gender, etc.), I like to start by counting and visualizing their distributions. Below we’ll create two separate data views for quality assurance purposes: (1) The most popular names since 1910, and (2) the total number of births (based on name counts) across time. The goal is to ensure the data aligns with our expectations (e.g., the most popular boy names over the past 100 years are not ‘Florp’ or ‘Spaghetti Joe’).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculate the top 20 most popular names
name_popularity &amp;lt;- names_processed_df %&amp;gt;% 
  group_by(name, gender) %&amp;gt;% 
  summarise(total = sum(frequency)) %&amp;gt;% 
  group_by(gender) %&amp;gt;% 
  top_n(20, total) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(name = reorder_within(name, total, gender))

name_popularity %&amp;gt;% 
  ggplot(aes(name, total, fill = gender)) + 
  geom_col(alpha = 0.8, color = &amp;#39;black&amp;#39;) + 
  coord_flip() + 
  scale_x_reordered() +
  facet_wrap(~ gender, scales = &amp;#39;free&amp;#39;, ncol = 1) + 
  scale_y_continuous(labels = scales::comma_format()) + 
  scale_fill_manual(values = pal(&amp;quot;monokai&amp;quot;)) +
  my_plot_theme() + 
  labs(x = NULL,
       y = &amp;#39;Total Names&amp;#39;,
       title = &amp;#39;US Top 20 names by gender since 1910&amp;#39;
       ) + 
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These frequencies seem reasonable! Next, let’s examine how the total count of names has changed across time between 1910 and 2018 to determine if there are any missing or incomplete years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names_processed_df %&amp;gt;% 
  mutate(year = as.Date(paste(as.character(year), &amp;#39;01&amp;#39;, &amp;#39;01&amp;#39;, sep = &amp;#39;-&amp;#39;))) %&amp;gt;% 
  group_by(year) %&amp;gt;% 
  summarise(total = sum(frequency)) %&amp;gt;% 
  ggplot(aes(year, total)) + 
  geom_line(size = 2) + 
  scale_y_continuous(labels = scales::comma_format()) + 
  scale_x_date(date_breaks = &amp;quot;10 year&amp;quot;, date_labels = &amp;#39;%Y&amp;#39;) + 
  my_plot_theme() + 
  labs(x = &amp;#39;Year&amp;#39;,
       y = &amp;#39;Total Births&amp;#39;,
       title = &amp;#39;Total US Births by Year&amp;#39;,
       subtitle = &amp;#39;Total based only on names appearing &amp;gt; 5 times per state per year&amp;#39;
       ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The overall trend here also checks out as well, with the baby-boom occurring between 1946 to 1964 and a steady decline in births rates since the early 1990s.&lt;/p&gt;
&lt;p&gt;Now that we’ve done some quick validation, let’s tackle our first question: Which names over-index within each state? To address this question, we’ll compare the proportion of names occupied by a single name within a state relative to how frequently the name occurs across all 50 states. We’ll also focus only on the past 10 years to capture recent name trends. Note that the technique implemented below was adapted from the excellent Tidy Tuesday Screen cast series found &lt;a href=&#34;https://www.youtube.com/watch?v=EF4A4OtQprg&amp;amp;t=1071s&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# count of names by state since 2008
name_state_counts &amp;lt;- names_processed_df %&amp;gt;%
  filter(year &amp;gt;= 2008) %&amp;gt;%
  group_by(name, state) %&amp;gt;%
  summarise(n = sum(frequency)) %&amp;gt;%
  ungroup() %&amp;gt;%
  complete(state, name, fill = list(n = 0))

# total births in US
total_names &amp;lt;- sum(name_state_counts$n)

# name count across all states
name_counts &amp;lt;- name_state_counts %&amp;gt;%
  group_by(name) %&amp;gt;%
  summarise(name_total = sum(n))

# birth count by state
state_counts &amp;lt;- name_state_counts %&amp;gt;%
  group_by(state) %&amp;gt;%
  summarise(state_total = sum(n))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll create a ratio that summarizes how much more likely a name is to appear within a state relative to the US as a whole. We’ll put some filters on as well to prevent rare names from overwhelming our analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Minimum occurrences within a state
cnt_in_state &amp;lt;- 100

# Minimum occurrences across all US
cnt_in_US &amp;lt;- 200

# Calculate name ratio within state relative to within US
all_name_counts &amp;lt;- name_state_counts %&amp;gt;%
  inner_join(name_counts) %&amp;gt;%
  inner_join(state_counts) %&amp;gt;%
  mutate(state_name_full = abbr2state(state)) %&amp;gt;%
  filter(
    n &amp;gt;= cnt_in_state,
    name_total &amp;gt;= cnt_in_US
  ) %&amp;gt;%
  mutate(
    percent_of_state = n / state_total,
    percent_of_names = name_total / total_names
  ) %&amp;gt;%
  mutate(overrepresented_ratio = percent_of_state / percent_of_names) %&amp;gt;%
  arrange(desc(overrepresented_ratio))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below we’ll plot the top 10 names by state from a geographically representative sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_n_names &amp;lt;- 10

all_name_counts %&amp;gt;%
  group_by(state_name_full) %&amp;gt;%
  top_n(top_n_names, overrepresented_ratio) %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(state_name_full %in%
    c(
      &amp;quot;Alabama&amp;quot;, &amp;quot;New Jersey&amp;quot;, &amp;quot;Arkansas&amp;quot;,
      &amp;quot;Oregon&amp;quot;, &amp;quot;Colorado&amp;quot;, &amp;quot;New Mexico&amp;quot;,
      &amp;quot;West Virginia&amp;quot;, &amp;quot;Hawaii&amp;quot;
    )) %&amp;gt;%
  mutate(name = reorder_within(name, overrepresented_ratio, state_name_full)) %&amp;gt;%
  ggplot(aes(name, overrepresented_ratio, fill = state_name_full)) +
  geom_col(color = &amp;quot;black&amp;quot;, alpha = 0.8) +
  coord_flip() +
  scale_x_reordered() +
  facet_wrap(~state_name_full, scales = &amp;quot;free&amp;quot;, ncol = 2) +
  scale_fill_manual(values = pal(&amp;quot;monokai&amp;quot;)) +
  my_plot_theme() + 
  labs(
    x = NULL,
    y = &amp;quot;Overrepresentation Ratio&amp;quot;
  ) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot to unpack here, but that fact that ‘Crimson’ over-indexes in Alabama tells me we’re on to something. Let’s briefly summarise our findings for each state separately:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alabama&lt;/strong&gt; - Roll Tide.&lt;br /&gt;
&lt;strong&gt;Arkansas&lt;/strong&gt; - Future country music stars.&lt;br /&gt;
&lt;strong&gt;Colorado&lt;/strong&gt; - Mountain towns (Aspen, Breckenridge) and famous skiers (Bode Miller)&lt;br /&gt;
&lt;strong&gt;Hawaii&lt;/strong&gt; - Native Hawaiian names. Note the large magnitude of this ratio, indicating that these names are found exclusively in Hawaii.&lt;br /&gt;
&lt;strong&gt;New Jersey&lt;/strong&gt; - Large Jewish population.&lt;br /&gt;
&lt;strong&gt;New Mexico&lt;/strong&gt; - Large Hispanic population.&lt;br /&gt;
&lt;strong&gt;Oregon&lt;/strong&gt; - Nature.&lt;br /&gt;
&lt;strong&gt;West Virginia&lt;/strong&gt; - Preferred gun brands (Remington, Kolton).&lt;/p&gt;
&lt;p&gt;It’s interesting to see how cultures unique to each state come through in people’s names. Are you a big fan of the University of Alabama’s Football team? Name your kid Crimson. Are you a firearm’s enthusiast? Remington has a nice ring to it. Do you enjoy long hikes in the woods? Forrest is a great name. This finding indicates that (unsurprisingly) geography plays a significant role in determining naming conventions within a state, and that people leverage the cultural norms from within their state when deciding on a name.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diversity-of-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Diversity of Names&lt;/h3&gt;
&lt;p&gt;In the previous section, we established that one’s state of birth influences naming conventions (still trying to figure out if this is a good or bad thing…). Let’s continue with this theme and initially consider how ‘Name Diversity’ varies between states, which we’ll define by comparing the proportion of all names represented by the top 100 most popular names in each state. For example, the figure below shows the cumulative percentage of all names captured by the top 5 names in Oregon relative to Vermont.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names_diversity_sample &amp;lt;- name_state_counts %&amp;gt;% 
  filter(state %in% c(&amp;#39;OR&amp;#39;, &amp;#39;VT&amp;#39;)) %&amp;gt;% 
  group_by(state) %&amp;gt;% 
  arrange(desc(n)) %&amp;gt;%
  mutate(total = sum(n),
         cum_sum = cumsum(n),
         cum_pct = round(cum_sum / total, 2),
         name_rnk = 1:n()
         ) %&amp;gt;% 
  slice(1:5) %&amp;gt;% 
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#xcqwiyijsn .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#xcqwiyijsn .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#xcqwiyijsn .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#xcqwiyijsn .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#xcqwiyijsn .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#xcqwiyijsn .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#xcqwiyijsn .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#xcqwiyijsn .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#xcqwiyijsn .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#xcqwiyijsn .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#xcqwiyijsn .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#xcqwiyijsn .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#xcqwiyijsn .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#xcqwiyijsn .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#xcqwiyijsn .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#xcqwiyijsn .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#xcqwiyijsn .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#xcqwiyijsn .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#xcqwiyijsn .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#xcqwiyijsn .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#xcqwiyijsn .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#xcqwiyijsn .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#xcqwiyijsn .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#xcqwiyijsn .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#xcqwiyijsn .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#xcqwiyijsn .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#xcqwiyijsn .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#xcqwiyijsn .gt_left {
  text-align: left;
}

#xcqwiyijsn .gt_center {
  text-align: center;
}

#xcqwiyijsn .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#xcqwiyijsn .gt_font_normal {
  font-weight: normal;
}

#xcqwiyijsn .gt_font_bold {
  font-weight: bold;
}

#xcqwiyijsn .gt_font_italic {
  font-style: italic;
}

#xcqwiyijsn .gt_super {
  font-size: 65%;
}

#xcqwiyijsn .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;xcqwiyijsn&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
    &lt;col style=&#34;width:80px;&#34;/&gt;
  &lt;/colgroup&gt;
  
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;state&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;n&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;total&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;cum_sum&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;cum_pct&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name_rnk&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;OR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Emma&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2549&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;366114&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2549&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.01&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;OR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Olivia&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2452&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;366114&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5001&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.01&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;OR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Sophia&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2210&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;366114&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7211&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.02&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;OR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Liam&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2155&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;366114&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9366&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.03&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;OR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Benjamin&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1999&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;366114&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;11365&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.03&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;VT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Emma&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;378&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;32623&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;378&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.01&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;VT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Liam&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;374&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;32623&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;752&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.02&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;VT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Owen&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;372&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;32623&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1124&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.03&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;VT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Mason&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;357&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;32623&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1481&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;VT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Olivia&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;354&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;32623&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1835&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.06&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
When comparing the &lt;code&gt;cum_pct&lt;/code&gt; between states, we see that approximately 3% of all names are represented by the top 10 in Oregon while 6% of all names are represented in Vermont. This means that fewer names occupy a greater proportion of names in Vermont relative to Oregon. Therefore, Vermont has less Name Diversity than Oregon. What does this relationship look like when expanding our search to the top 100 names across all lower 48 states?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_n_names &amp;lt;- 100

# Create Name Diversity metric
names_diversity_lower_48 &amp;lt;- name_state_counts %&amp;gt;%
  group_by(state) %&amp;gt;%
  arrange(state, desc(n)) %&amp;gt;%
  mutate(
    name_index = row_number(),
    cum_sum = cumsum(n),
    cum_pct = cum_sum / sum(n)
  ) %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(name_index == top_n_names) %&amp;gt;%
  select(state, cum_pct) %&amp;gt;%
  mutate(state_name_full = abbr2state(state))

# Join % of names accounted for by top 100 to map data
us_map &amp;lt;- map_data(&amp;quot;state&amp;quot;) %&amp;gt;%
  as_tibble() %&amp;gt;%
  mutate(state_name_full = str_to_title(region)) %&amp;gt;%
  inner_join(names_diversity_lower_48, by = &amp;quot;state_name_full&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot relationship by state
us_map %&amp;gt;%
  ggplot(aes(long, lat)) +
  geom_polygon(aes(group = group, fill = cum_pct), color = &amp;quot;white&amp;quot;) +
  theme_map() +
  coord_map() +
  my_plot_theme() + 
  scale_fill_viridis_c(labels = scales::percent) +
  labs(fill = &amp;quot;Percent of names in Top 100&amp;quot;,
       title = &amp;#39;Name Diversity by State&amp;#39;,
       subtitle = &amp;#39;Higher percentages indicate less diversity in names&amp;#39;
       ) + 
  theme(legend.text=element_text(size=14),
        legend.title = element_blank(),
        legend.position = &amp;#39;top&amp;#39;,
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.title.x = element_blank()
        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;West Coast and Southeastern states tend to have greater name diversity (i.e., a lower % of names are represented in the top 100) while the North East has less diversity. This begs the question: What type of diversity correlates with our Name Diversity index? A &lt;a href=&#34;https://wallethub.com/edu/most-least-diverse-states-in-america/38262/&#34;&gt;recent study&lt;/a&gt; ranked states along six dimensions of diversity, such as Cultural, Economic, Household, Religious and Political. Let’s bring these rankings in and join them with our newly created diversity index.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- &amp;quot;https://wallethub.com/edu/most-least-diverse-states-in-america/38262/&amp;quot;

diversity_rank &amp;lt;- read_html(url) %&amp;gt;%
  html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;%
  .[1] %&amp;gt;%
  html_table(fill = TRUE) %&amp;gt;%
  data.frame() %&amp;gt;%
  clean_names()

names(diversity_rank) &amp;lt;- purrr::map_chr(names(diversity_rank), 
                                        function(x) str_replace(x, &amp;quot;x_&amp;quot;, &amp;quot;&amp;quot;)
                                        )

diversity_tidy &amp;lt;- diversity_rank %&amp;gt;%
  select(state, ends_with(&amp;quot;_rank&amp;quot;)) %&amp;gt;%
  gather(diversity_metric, rank, -state) %&amp;gt;%
  mutate(diversity_metric = str_to_title(str_replace(
                                         str_replace(diversity_metric,&amp;quot;_rank&amp;quot;,&amp;quot;&amp;quot;) 
                                                                     ,&amp;quot;_&amp;quot;, &amp;quot; &amp;quot;
                                                    )
                                         )
         ) %&amp;gt;%
  inner_join(names_diversity_lower_48, by = c(&amp;quot;state&amp;quot; = &amp;quot;state_name_full&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll plot the relationship between Name Diversity and the six aforementioned dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diversity_tidy %&amp;gt;%
  ggplot(aes(rank, cum_pct, label = state)) +
  geom_point() +
  stat_smooth() +
  facet_wrap(~diversity_metric, scales = &amp;quot;free&amp;quot;, ncol = 2) +
  scale_y_percent() + 
  my_plot_theme() + 
  labs(
    x = &amp;quot;State Rank (1 = Most Diverse, 50 = Least Diverse)&amp;quot;,
    y = &amp;quot;Percent of names in Top 100&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1152&#34; /&gt;
There might be a positive relationship between Cultural and Household diversity relative to Name Diversity, such that states with lower Cultural Diversity also have lower Name Diversity. Some formal hypothesis testing can be useful when we don’t have a strong prior hypothesis. However, we’ll need to be careful when considering the strength of evidence, given that we are testing six separate hypotheses. To do so, we’ll adjust each p-value based on the &lt;em&gt;FDR&lt;/em&gt; or False Discovery Rate. Additionally, we’ll use Spearman’s correlation coefficient in lieu of the more popular Pearson’s because we have no reason to believe that our relationships are linear. We can relax this assumption and simply state that the relationship is monotonically increasing/decreasing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor_tidy &amp;lt;- diversity_tidy %&amp;gt;%
  select(-state.y, -state) %&amp;gt;%
  nest(-diversity_metric) %&amp;gt;%
  mutate(
    test = purrr::map(data, ~ cor.test(.x$rank, .x$cum_pct, method = &amp;quot;spearman&amp;quot;)),
    tidied = purrr::map(test, tidy)
  ) %&amp;gt;%
  unnest(tidied, .drop = TRUE) %&amp;gt;%
  clean_names() %&amp;gt;%
  mutate(p_val_adj = p.adjust(p_value, method = &amp;quot;fdr&amp;quot;)) %&amp;gt;%
  arrange(p_val_adj) %&amp;gt;% 
  select(diversity_metric, estimate, p_value, p_val_adj)&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#qfomdglcac .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#qfomdglcac .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qfomdglcac .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#qfomdglcac .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#qfomdglcac .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#qfomdglcac .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qfomdglcac .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#qfomdglcac .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#qfomdglcac .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#qfomdglcac .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#qfomdglcac .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#qfomdglcac .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#qfomdglcac .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#qfomdglcac .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#qfomdglcac .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#qfomdglcac .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#qfomdglcac .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#qfomdglcac .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qfomdglcac .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#qfomdglcac .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qfomdglcac .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#qfomdglcac .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#qfomdglcac .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#qfomdglcac .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qfomdglcac .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#qfomdglcac .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qfomdglcac .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#qfomdglcac .gt_left {
  text-align: left;
}

#qfomdglcac .gt_center {
  text-align: center;
}

#qfomdglcac .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#qfomdglcac .gt_font_normal {
  font-weight: normal;
}

#qfomdglcac .gt_font_bold {
  font-weight: bold;
}

#qfomdglcac .gt_font_italic {
  font-style: italic;
}

#qfomdglcac .gt_super {
  font-size: 65%;
}

#qfomdglcac .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;qfomdglcac&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
  &lt;/colgroup&gt;
  
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;metric&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;est&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;p_val&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;p_val_adj&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Cultural Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.41&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.00&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Household Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.35&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.01&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Religious Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.21&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.15&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Political Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.18&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.22&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Socioeconomic Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.43&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Economic Diversity&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-0.02&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.89&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.89&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;After adjusting for multiple hypothesis tests, the only statistically significant relationships to emerge are Cultural and Household Diversity. This intuitively makes sense, as states with a greater blend of cultures will likely bring their own unique naming traditions. Let’s see how all of the states stack up against one another on the Cultural Diversity metric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diversity_tidy %&amp;gt;%
  filter(diversity_metric == &amp;quot;Cultural Diversity&amp;quot;) %&amp;gt;%
  ggplot(aes(rank, cum_pct, label = state)) +
  geom_smooth(span = 3, alpha = 0.5) +
  geom_point() +
  geom_label_repel() +
  scale_y_percent() +
  my_plot_theme() + 
  labs(
    x = &amp;quot;Cultural Diversity (1 = Most Diverse, 50 = Least Diverse)&amp;quot;,
    y = &amp;quot;Name Diversity (Lower = More diverse)&amp;quot;,
    title = &amp;#39;States with Higher Cultural Diversity have a Greater Variety of Names&amp;#39; 
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;1152&#34; /&gt;
We see that Cultural Diversity relates to the breadth of names represented in each state, a relationship that is particularly pronounced among states with lower Cultural Diversity. Thus, if you live in a state with low Cultural Diversity and give your child a popular name, there’s a good chance they’ll be referred to as “Oliver #2”, “Emma C”, or “Other James” during grade school.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;trendy-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Trendy Names&lt;/h3&gt;
&lt;p&gt;In this section, we’ll focus on my current state of residence – Oregon – and explore which names have trended the most over the past two decades and where we expect the popularity of these names to go over the next decade. Let’s start with a little data cleaning.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only consider names that appear at least 300 times
frequency_limit &amp;lt;- 300

start_year &amp;lt;- 2000

# arrange each name by year and count number of occurrences
oregon_names &amp;lt;- names_processed_df %&amp;gt;%
  as_tibble() %&amp;gt;%
  filter(
    state == &amp;quot;OR&amp;quot;,
    year &amp;gt;= start_year
  ) %&amp;gt;%
  group_by(year, name) %&amp;gt;%
  summarise(frequency = sum(frequency)) %&amp;gt;%
  ungroup() %&amp;gt;%
  complete(year, name, fill = list(frequency = 0)) %&amp;gt;%
  group_by(name) %&amp;gt;%
  mutate(total_freq = sum(frequency)) %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(total_freq &amp;gt;= frequency_limit) %&amp;gt;%
  select(-total_freq) %&amp;gt;%
  group_by(name) %&amp;gt;%
  arrange(name, year)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below we’re going to use a simple (yet powerful) approach for trend detection via the &lt;code&gt;mk.test&lt;/code&gt; (Mann-Kendall Test) function, which determines if a series follows a monotonic trend. Below we’ll apply this test to each name, order by the size of the resulting test statistic, and then select the top 25 largest test statistics. This will provide us with the ‘trendiest’ names since 2000.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Identify trendiest names based on top 25 largest test statistics
trendy_names &amp;lt;- oregon_names %&amp;gt;%
  nest(-name) %&amp;gt;%
  mutate(
    model = purrr::map(data, ~ mk.test(.$frequency)),
    tidied = purrr::map(model, tidy)
  ) %&amp;gt;%
  unnest(tidied, .drop = TRUE) %&amp;gt;%
  arrange(desc(statistic)) %&amp;gt;%
  clean_names() %&amp;gt;%
  select(name:p_value) %&amp;gt;%
  head(25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a quick glance at some of the resulting names.
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#dtgqjeqjju .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#dtgqjeqjju .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dtgqjeqjju .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#dtgqjeqjju .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#dtgqjeqjju .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dtgqjeqjju .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dtgqjeqjju .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#dtgqjeqjju .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#dtgqjeqjju .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#dtgqjeqjju .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#dtgqjeqjju .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#dtgqjeqjju .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#dtgqjeqjju .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#dtgqjeqjju .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#dtgqjeqjju .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#dtgqjeqjju .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#dtgqjeqjju .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#dtgqjeqjju .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dtgqjeqjju .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#dtgqjeqjju .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dtgqjeqjju .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#dtgqjeqjju .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#dtgqjeqjju .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dtgqjeqjju .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dtgqjeqjju .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#dtgqjeqjju .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dtgqjeqjju .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#dtgqjeqjju .gt_left {
  text-align: left;
}

#dtgqjeqjju .gt_center {
  text-align: center;
}

#dtgqjeqjju .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#dtgqjeqjju .gt_font_normal {
  font-weight: normal;
}

#dtgqjeqjju .gt_font_bold {
  font-weight: bold;
}

#dtgqjeqjju .gt_font_italic {
  font-style: italic;
}

#dtgqjeqjju .gt_super {
  font-size: 65%;
}

#dtgqjeqjju .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;dtgqjeqjju&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:120px;&#34;/&gt;
    &lt;col style=&#34;width:120px;&#34;/&gt;
    &lt;col style=&#34;width:120px;&#34;/&gt;
  &lt;/colgroup&gt;
  
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;statistic&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;p_val&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Oliver&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.78&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7.60e-09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Hazel&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.53&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3.12e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Luna&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.52&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3.37e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Hudson&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.47&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4.41e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Leo&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.46&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4.64e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Nora&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.46&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4.82e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Mila&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.45&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.03e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Harper&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.42&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6.07e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Penelope&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.42&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6.07e-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Sawyer&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5.39&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6.88e-08&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;A quick cross-reference with some popular naming sites indicates that these names are popular both in Oregon as well as the remainder of the US. Let’s make some predictions (because you can’t have a blog post on data without trying to predict something!) for the next 10 years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set forecasting horizon
time_horizon &amp;lt;- 10

# Create a separate forecast for each name based on 18 years of history
name_forecast &amp;lt;- oregon_names %&amp;gt;%
  filter(name %in% trendy_names$name) %&amp;gt;%
  mutate(year = as.Date(&amp;quot;0001-01-1&amp;quot;) + lubridate::years(year - 1)) %&amp;gt;%
  nest(-name) %&amp;gt;%
  mutate(
    ts = purrr::map(data, tk_ts, start = start_year, freq = 1),
    model = purrr::map(ts, ets),
    fcast = purrr::map(model, forecast, level=80, h = time_horizon)
  )
# Extract forecasting data
unnest_fcast &amp;lt;- function(name_forecast, dt_field=&amp;#39;year&amp;#39;){
  max_year &amp;lt;- year(max(name_forecast$data[[1]] %&amp;gt;% 
                       pull({{dt_field}})))
  index = 1  
  fcast_tibble &amp;lt;- tibble()
  for(fcast in name_forecast$fcast){
    name &amp;lt;- name_forecast$name[index]
    frequency &amp;lt;- as.vector(fcast$mean)
    lo_80 &amp;lt;- as.vector(fcast$lower)
    hi_80 &amp;lt;- as.vector(fcast$upper)
    tmp_fcast_tibble &amp;lt;- tibble(key = &amp;#39;fcast&amp;#39;,
                               name = name, 
                               year = seq(max_year + 1, 
                                          length.out = length(hi_80)
                                          ),
                               frequency = frequency, 
                               lo_80 = lo_80, 
                               hi_80 = hi_80)
    fcast_tibble &amp;lt;- bind_rows(fcast_tibble, tmp_fcast_tibble)
    index &amp;lt;- index + 1
  }
  fcast_tibble
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s visualize both the historical time series as well as our 10-year ahead forecast.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names_plot_df &amp;lt;- bind_rows(oregon_names %&amp;gt;%
                           filter(name %in% trendy_names$name) %&amp;gt;% 
                           mutate(key = &amp;#39;actual&amp;#39;),
                           unnest_fcast(name_forecast)
                          )
names_plot_df %&amp;gt;%
  mutate(lo_80 = ifelse(lo_80 &amp;lt; 0, 0, lo_80)) %&amp;gt;%
  ggplot(aes(year, frequency, color = key)) +
  geom_line() +
  geom_ribbon(aes(ymin = lo_80, ymax = hi_80), alpha = .5) +
  facet_wrap(~name, scales = &amp;quot;free_y&amp;quot;) +
  ylim(0, max(names_plot_df$hi_80)) +
  scale_color_manual(values = pal(&amp;quot;monokai&amp;quot;)[c(1, 3)]) +
  my_plot_theme() +
  labs(
    x = &amp;quot;Year&amp;quot;,
    y = &amp;quot;Total Names&amp;quot;,
    title = &amp;quot;Trendiest Name in Oregon over the Past 20 Years&amp;quot;,
    subtitle = &amp;quot;Forecast for 10 Year Period. Shaded region represents 80% prediction interval.&amp;quot;
  ) +
  theme(legend.position = &amp;#39;none&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2019-06-12-state-of-names/state_of_names_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There’s about to be a lot more Luna’s, Mila’s, Oliver’s, Asher’s and Jameson’s in Oregon over the next decade, whereas the popularity of Harper and Penelope are either flat or heading downward. This could be helpful depending on if you wanted your child to be cool and trendy from day-1 😄. However, the intervals on the majority of these forecasts are fairly wide, indicating that naming trends are not an easy thing to predict!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;parting-thoughts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Parting Thoughts&lt;/h3&gt;
&lt;p&gt;While this post only scratches the surface in terms of understanding how names come-to-be in America, it reveals the extent to which parents rely on cues from their surroundings and cognitive shortcuts when naming their children. Whether it’s a favorite football team, a family name that’s been passed down through generations, a ski town with great powder, or that cool tree in the backyard, our immediate environments play a central role in the naming process. It also highlights the pivotal role that cultural diversity plays in determining the breadth of names by geographical location, as well as how unpredictable naming trends can be into the near future.&lt;/p&gt;
&lt;p&gt;Hopefully you enjoyed the post and, if faced with naming a child any time soon, can leverage some of the techniques outlined here to come up with an awesome name!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Appendix&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_plot_theme = function(){
  font_family = &amp;quot;Helvetica&amp;quot;
  font_face = &amp;quot;bold&amp;quot;
  return(theme(
    axis.text.x = element_text(size = 12, face = font_face, family = font_family),
    axis.text.y = element_text(size = 12, face = font_face, family = font_family),
    axis.title.x = element_text(size = 16, face = font_face, family = font_family),
    axis.title.y = element_text(size = 16, face = font_face, family = font_family),
    strip.text.y = element_text(size = 16, face = font_face, family = font_family),
    strip.text.x = element_text(size = 16, face = font_face, family = font_family),
    plot.title = element_text(size = 20, face = font_face, family = font_family),
    plot.subtitle = element_text(size = 16, family = font_family),
    plot.caption = element_text(size = 11, face = &amp;quot;italic&amp;quot;, hjust = 0),
    legend.position = &amp;quot;top&amp;quot;,
    legend.text = element_text(size = 8,
                               face = font_face,
                               family = font_family),
    legend.key = element_rect(size = 2),
    legend.key.size = unit(2, &amp;#39;lines&amp;#39;),
    legend.title=element_blank()
  ))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Optimal Portland Pub Crawl</title>
      <link>http://example.org/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl/</link>
      <pubDate>Fri, 01 Jun 2018 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl/</guid>
      <description>
&lt;script src=&#34;http://example.org/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://example.org/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://example.org/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2018-06-01-optimal-bar-crawl/images/portland.jpg&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;The premise of a Pub Crawl is quite simple: visit several bars in an afternoon or evening without a clear plan of where you’ll go next. While this sort of spontaneous, unstructured approach may work for some people, I’ve always been a fan of having a plan – in this case, an optimal plan. If we want to maximize the number of places visited (and beers tasted) in a finite period of time, then there is simply no room for shoddy planning. Accordingly, this post provides a framework for designing the optimal Portland Pub Crawl by working through the following steps:&lt;/p&gt;
&lt;p&gt;🍺 Web Scrape the top 100 Portland bars from &lt;a href=&#34;http://www.oregonlive.com/dining/index.ssf/2014/10/portlands_100_best_bars_bar_ta.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🍺 Geocode each bar’s location&lt;/p&gt;
&lt;p&gt;🍺 Find the optimal route between a subsample of the bars, because visiting 100 in a day would make the following day very bad&lt;/p&gt;
&lt;p&gt;🍺 Determine a walking path between the bars&lt;/p&gt;
&lt;p&gt;🍺 Create a map of the walking path, which can be use as a field guide to impress your friends once the pub crawl is under way&lt;/p&gt;
&lt;p&gt;🍺 Promptly spill beer on the map at the 2nd bar, rendering it unreadable, followed by a game of darts and some popcorn&lt;/p&gt;
&lt;p&gt;If that sounds like a plan, let’s get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-the-top-100-bars&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Defining the Top 100 Bars&lt;/h3&gt;
&lt;p&gt;First, let’s identify the stops during our tour of Portland’s pub scene. In the section below, we’ll load up the R libraries, identify which version of Python we’d like to use, and then do some web scraping. Note that all of the python modules and R-scripts are contained in the same directory for simplicity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Core pacakges
library(tidyverse)

# Mapping
library(leaflet)
library(widgetframe)
library(leaflet.extras)

# Calling python functions from R
library(reticulate)

# route optimization
library(tspmeta)

# Making nice tables
library(gt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;geocode_best_portland_bars&lt;/code&gt; function below is responsible for collecting the information.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# best_bars.py

import os
import urllib
from bs4 import BeautifulSoup
import re
from typing import List
import googlemaps
from tqdm import tqdm
import pandas as pd
from dotenv import load_dotenv

API_KEY = os.getenv(&amp;#39;GOOGLE_API_KEY&amp;#39;)


def find_best_bars() -&amp;gt; str:
    base_url = &amp;quot;http://www.oregonlive.com/dining/index.ssf/2014/10/portlands_100_best_bars_bar_ta.html&amp;quot;
    page = urllib.request.urlopen(base_url)
    soup = BeautifulSoup(page, &amp;quot;html.parser&amp;quot;)
    bar_descriptors = soup.find_all(&amp;quot;div&amp;quot;, class_=&amp;quot;entry-content&amp;quot;)
    bar_descriptors = str(bar_descriptors).split(&amp;quot;&amp;lt;p&amp;gt;&amp;quot;)[0]
    best_bars_raw_lst = re.findall(r&amp;quot;\&amp;lt;strong&amp;gt;(.*?)&amp;lt;/strong&amp;gt;&amp;quot;, bar_descriptors)
    return best_bars_raw_lst


def clean_bar_names(raw_bar_lst: str) -&amp;gt; List[str]:
    # exclude emphasis tags
    best_bars = [re.sub(r&amp;quot;&amp;lt;em&amp;gt; (.*?)&amp;lt;/em&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, x) for x in raw_bar_lst]
    # exclude number included in bar name
    best_bars = [re.sub(r&amp;quot;No. \d+ --&amp;quot;, &amp;quot;&amp;quot;, x).strip() for x in best_bars]
    # exclude headers in all caps
    best_bars = [x for x in best_bars if not x.isupper()]
    # exclude all lower case tags
    best_bars = [x for x in best_bars if not x.islower()]
    # exclude bold tags in html
    best_bars = [x.replace(&amp;quot;&amp;amp;amp;&amp;quot;, &amp;quot;&amp;amp;&amp;quot;) for x in best_bars]
    # exclude other emphasis tags
    best_bars = [re.sub(r&amp;quot;: &amp;lt;em&amp;gt;(.*?)&amp;lt;/em&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, x) for x in best_bars]
    # strip colons
    best_bars = [x.replace(&amp;quot;:&amp;quot;, &amp;quot;&amp;quot;) for x in best_bars]
    # exclude blanks
    best_bars = [x for x in best_bars if x]
    return best_bars


def geocode_best_portland_bars() -&amp;gt; pd.DataFrame:
    best_bars_lst = find_best_bars()
    bar_names = clean_bar_names(raw_bar_lst=best_bars_lst)
    bar_names = [f&amp;quot;{x}, Portland, OR&amp;quot; for x in bar_names]
    gmaps = googlemaps.Client(key=API_KEY)
    geocoded_bars_lst = []
    for name in tqdm(bar_names):
        geocode_result = gmaps.geocode(name)
        lat_lng = geocode_result[0].get(&amp;quot;geometry&amp;quot;).get(&amp;quot;location&amp;quot;)
        lat, lng = lat_lng.get(&amp;quot;lat&amp;quot;), lat_lng.get(&amp;quot;lng&amp;quot;)
        geocoded_bars_lst.append([name, lat, lng])
    geocoded_bars_df = pd.DataFrame(geocoded_bars_lst)
    geocoded_bars_df.columns = [&amp;quot;name&amp;quot;, &amp;quot;lat&amp;quot;, &amp;quot;lng&amp;quot;]
    return geocoded_bars_df   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Historically, this operation would require executing a python script, writing the results out (in an &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.csv&lt;/code&gt; file), and then reading the result back into R. However, with the advent of &lt;code&gt;reticulate&lt;/code&gt;, we can execute a python function and pull the output back without ever having to leave the cozy confines of R (or R-studio in this case). Recall that the actual python module &lt;code&gt;geocode_best_portland_bars.py&lt;/code&gt; is located in the same directory as our R-script. Below, we’ll first “source” this function via &lt;code&gt;source_python&lt;/code&gt; (which simply means to bring it into the R environment), then we’ll execute it. Note that we aren’t passing in any arguments; this function is designed for a very specific purpose, which is to find the best watering holes in Portland.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# specify which version of Python to use
reticulate::use_python(&amp;#39;//anaconda/bin/python&amp;#39;, required = TRUE)

# brings our function into the R Environment
reticulate::source_python(&amp;#39;best_bars.py&amp;#39;)

# executes and stores the output  in our variable &amp;#39;best_bars&amp;#39;
best_bars = geocode_best_portland_bars()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_bars %&amp;gt;%
  tail(10) %&amp;gt;%
  mutate(name = str_replace(name, &amp;#39;, Portland, OR&amp;#39;, &amp;#39;&amp;#39;)) %&amp;gt;%
  gt() %&amp;gt;%
  tab_header(title = gt::md(&amp;#39;**Data Sample of Best Portland Bars**&amp;#39;)) %&amp;gt;%
  cols_align(
  align = &amp;quot;center&amp;quot;,
  columns = everything()) %&amp;gt;%
  cols_width(
    everything() ~ px(155)
    )&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#sszsgucrgp .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#sszsgucrgp .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#sszsgucrgp .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#sszsgucrgp .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#sszsgucrgp .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#sszsgucrgp .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#sszsgucrgp .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#sszsgucrgp .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#sszsgucrgp .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#sszsgucrgp .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#sszsgucrgp .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#sszsgucrgp .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#sszsgucrgp .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#sszsgucrgp .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#sszsgucrgp .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#sszsgucrgp .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sszsgucrgp .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#sszsgucrgp .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sszsgucrgp .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#sszsgucrgp .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#sszsgucrgp .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#sszsgucrgp .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#sszsgucrgp .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#sszsgucrgp .gt_left {
  text-align: left;
}

#sszsgucrgp .gt_center {
  text-align: center;
}

#sszsgucrgp .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#sszsgucrgp .gt_font_normal {
  font-weight: normal;
}

#sszsgucrgp .gt_font_bold {
  font-weight: bold;
}

#sszsgucrgp .gt_font_italic {
  font-style: italic;
}

#sszsgucrgp .gt_super {
  font-size: 65%;
}

#sszsgucrgp .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;sszsgucrgp&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Data Sample of Best Portland Bars&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Swine&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51827&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Jackknife&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52051&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6828&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Stammtisch&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52586&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Cooper&#39;s Hall&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51988&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;The Knock Back&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.55923&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6416&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Multnomah Whiskey Library&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Trifecta Tavern &amp;amp; Bakery&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51756&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Angel Face&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52321&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6371&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Pepe Le Moko&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52187&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6813&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Expatriate&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.56240&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6346&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;We have successfully scraped the best bars and geocoded their locations. In the following section, we’ll solve a classic routing optimization problem: The Traveling Salesman Problem (TSP). The goal is to find the most direct route between all of the bars we decide to visit during the pub crawl.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;route-optimization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Route Optimization&lt;/h3&gt;
&lt;p&gt;The goal of any routing optimization problem is simple: minimize the total distance travelled between different nodes (locations) in space while ensuring that each node is visited once. There are many algorithms to solve this type of problem, but we’ll leverage the &lt;code&gt;2-optimization&lt;/code&gt; or &lt;code&gt;2-opt&lt;/code&gt; method due to its simplicity. This algorithm finds the lowest cost route (i.e., the route with the shortest distance that ensures each node is visited once) by swapping the ‘edges’ (the path that connects two nodes) between different nodes. If a swap reduces the total length of our tour, then the swap is maintained; otherwise the swap is reversed and we try again with different edges. Note that the swap must ensure that a single route is always possible between all nodes. The algorithm stops when a tour is reached that cannot be improved with any more swaps (see &lt;a href=&#34;https://ocw.mit.edu/courses/sloan-school-of-management/15-053-optimization-methods-in-management-science-spring-2013/lecture-notes/MIT15_053S13_lec17.pdf&#34;&gt;here&lt;/a&gt; for a more in-depth explanation).&lt;/p&gt;
&lt;p&gt;Before going any further, let’s plot out our locations to see what we’re working with. We’ll also define our starting point, which is often referred to as the ‘depot’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;depot_lat = 45.525915
depot_lng = -122.684957

bar_map = leaflet(data = best_bars) %&amp;gt;% 
          setView(lng = depot_lng + 0.05, lat = depot_lat, zoom = 13) %&amp;gt;% 
          addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
          addMarkers(lng=depot_lng, lat=depot_lat) %&amp;gt;% 
          addCircleMarkers(lat=~lat, 
                           lng=~lng,
                           color = &amp;quot;orange&amp;quot;,
                           radius = 4,
                           weight = 10,
                           stroke = FALSE,
                           opacity = 4,
                           fillOpacity = 4
                           ) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Each orange dot is a bar, and the pointer indicates our starting position (the depot). Given that we are walking, let’s limit the potential distance to a maximum of three miles from our starting location. The function below calculates the total feet between two points defined by a latitude/longitude coordinate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earth_dist = function (lat1, lng1, lat2, lng2)
{
  rad = pi/180
  a1 = lat1 * rad
  a2 = lng1 * rad
  b1 = lat2 * rad
  b2 = lng2 * rad
  dlon = b2 - a2
  dlat = b1 - a1
  a = (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
  c = 2 * atan2(sqrt(a), sqrt(1 - a))
  R = 6378.145
  d = R * c
  return(d* 3280.8)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below we’ll filter to all locations based on the maximum distance we’re willing to travel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;feet_in_mile = 5280
# maximum distance is 3 miles
max_miles_away = 3

bar_locations_nearby = best_bars %&amp;gt;% 
                       mutate(distance_from_depot = earth_dist(depot_lat,
                                                               depot_lng,
                                                               lat,
                                                               lng
                                                               )
                              ) %&amp;gt;% 
                       filter(distance_from_depot &amp;lt;= feet_in_mile * max_miles_away)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)

# we&amp;#39;ll visit 24 bars
n_bars = 24

# randomly select 24 bars to visit
bar_locations_nearby = bar_locations_nearby %&amp;gt;% 
                       sample_n(n_bars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll transform the lat/long locations into a distance matrix. The distance matrix specifies the euclidean distance of each bar from every other bar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# now find optimal route
coordinates = bar_locations_nearby %&amp;gt;% 
              dplyr::select(lat, lng, name) %&amp;gt;% 
              mutate(location_index = 2:(n() + 1)) %&amp;gt;% 
              bind_rows(data.frame(lat = depot_lat,
                                   lng = depot_lng,
                                   address = &amp;#39;depot&amp;#39;,
                                   name = &amp;#39;depot&amp;#39;,
                                   location_index = 1
                                          )
                               ) %&amp;gt;% 
              arrange(location_index)

coords_matrix = coordinates %&amp;gt;% 
                dplyr::select(lat, lng) %&amp;gt;% 
                as.matrix()

dist_matrix = dist(coords_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two functions below &lt;code&gt;tsp_instance&lt;/code&gt; and &lt;code&gt;run_solver&lt;/code&gt; will do the heavy lifting and find the optimal route between bars.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create tsp instance
tsp_ins = tspmeta::tsp_instance(coords_matrix,dist_matrix)

# find optimal route based on 2-opt method
opt_tour = as.integer(run_solver(tsp_ins, method=&amp;quot;2-opt&amp;quot;))

# sort to start at depot
sorted_tour = c(opt_tour[which(opt_tour == 1):length(opt_tour)],
                opt_tour[1:(which(opt_tour == 1) - 1)]
                )

# join route order back to original data
coordinates = coordinates %&amp;gt;% 
              dplyr::inner_join(data.frame(location_index = sorted_tour,
                                           route_order = 1:length(sorted_tour)
                                           )
                                ) %&amp;gt;% 
              dplyr::arrange(route_order)

# reformat so each row has a starting lat/lng and ending lat/lng
route_df = coordinates %&amp;gt;% 
            dplyr::select(-address) %&amp;gt;%
            dplyr::rename(start_lat = lat,
                          start_lng = lng
                          ) %&amp;gt;% 
            dplyr::mutate(end_lat = c(start_lat[2:n()], NA),
                          end_lng = c(start_lng[2:n()], NA)
                          ) %&amp;gt;% 
            na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a peak at our data to see how everything turned out.&lt;/p&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#dmhypywntg .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#dmhypywntg .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#dmhypywntg .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#dmhypywntg .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dmhypywntg .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#dmhypywntg .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#dmhypywntg .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#dmhypywntg .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#dmhypywntg .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#dmhypywntg .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#dmhypywntg .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#dmhypywntg .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#dmhypywntg .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#dmhypywntg .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#dmhypywntg .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#dmhypywntg .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dmhypywntg .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#dmhypywntg .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dmhypywntg .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#dmhypywntg .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#dmhypywntg .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dmhypywntg .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#dmhypywntg .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#dmhypywntg .gt_left {
  text-align: left;
}

#dmhypywntg .gt_center {
  text-align: center;
}

#dmhypywntg .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#dmhypywntg .gt_font_normal {
  font-weight: normal;
}

#dmhypywntg .gt_font_bold {
  font-weight: bold;
}

#dmhypywntg .gt_font_italic {
  font-style: italic;
}

#dmhypywntg .gt_super {
  font-size: 65%;
}

#dmhypywntg .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;dmhypywntg&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Route&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;route_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;start_lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;start_lng&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;end_lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;end_lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;depot&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52591&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6850&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52627&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6784&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Park Kitchen&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52627&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6784&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52531&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6783&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Remedy Wine Bar&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52531&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6783&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52201&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6816&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Clyde Common&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52201&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6816&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52246&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Cassidy&#39;s&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52246&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Multnomah Whiskey Library&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51487&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;The Rookery at Raven &amp;amp; Rose&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51487&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6824&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51400&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6753&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Veritable Quandary&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51400&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6753&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51904&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6781&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Departure&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51904&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6781&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52403&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6756&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Ground Kontrol&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52403&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6756&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51900&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6641&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Sweet! Almost there. The final step is to convert these points into an actual travel path.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-walking-path&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a Walking Path&lt;/h3&gt;
&lt;p&gt;Currently, the path between different nodes (i.e., bars) are straight lines. We’ll be walking this tour, so a sidewalk travel path is required. We’ll call on the Google Maps API one last time to convert each of the straight-line edges to actual walking paths via the &lt;code&gt;convert_route_to_path.py&lt;/code&gt; module. This module consists of two functions: &lt;code&gt;find_path&lt;/code&gt; and &lt;code&gt;extract_polyline&lt;/code&gt;. &lt;code&gt;find_path&lt;/code&gt; takes a starting lat/long, ending lat/long, and method of travel (walking in our case) and returns step-by-step lat/long coordinates along with distance and time estimates. &lt;code&gt;extract_polyline&lt;/code&gt; is a helper function that will format each of the step-by-step coordinates into pandas DataFrame. The output will then be returned as an R DataFrame. We’ll specify the python module below.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# convert_route_to_path.py
import os
import pandas as pd
import polyline
import googlemaps
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv(&amp;#39;GOOGLE_API_KEY&amp;#39;)

def extract_polyline(coords: dict) -&amp;gt; pd.DataFrame:
    gmaps_polyline = coords[&amp;quot;overview_polyline&amp;quot;][&amp;quot;points&amp;quot;]
    polyline_df = pd.DataFrame(polyline.decode(gmaps_polyline))
    polyline_df.columns = [&amp;quot;lat&amp;quot;, &amp;quot;lng&amp;quot;]
    polyline_df[&amp;quot;path_order&amp;quot;] = range(1, polyline_df.shape[0] + 1)
    return polyline_df


def create_travel_path(
    route_df: pd.DataFrame, travel_mode: str = &amp;quot;walking&amp;quot;
) -&amp;gt; pd.DataFrame:
    gmaps = googlemaps.Client(key=API_KEY)
    out_route_df = pd.DataFrame()
    for row in route_df.itertuples():
        coords = gmaps.directions(
            origin=[row.start_lat, row.start_lng],
            destination=[row.end_lat, row.end_lng],
            mode=travel_mode,
        )
        coords_df = extract_polyline(coords=coords[0])
        coords_df[&amp;quot;location_index&amp;quot;] = row.location_index
        coords_df[&amp;quot;travel_time&amp;quot;] = coords[0][&amp;quot;legs&amp;quot;][0][&amp;quot;duration&amp;quot;][&amp;quot;value&amp;quot;]
        coords_df[&amp;quot;miles&amp;quot;] = coords[0][&amp;quot;legs&amp;quot;][0][&amp;quot;distance&amp;quot;][&amp;quot;text&amp;quot;]
        coords_df[&amp;quot;route_order&amp;quot;] = row.route_order
        out_route_df = out_route_df.append(coords_df)
    out_route_df = out_route_df.reset_index(drop=True)
    return out_route_df&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll read the &lt;code&gt;convert_route_to_path.py&lt;/code&gt; module into R and pass in our route DataFrame, the Google Maps API key, and our preferred method of travel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reticulate::source_python(&amp;#39;convert_route_to_path.py&amp;#39;)
path_df = create_travel_path(route_df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data indicating the path between our depot and the first bar should look like this:&lt;/p&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#pamufqigws .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 10px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pamufqigws .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pamufqigws .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pamufqigws .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pamufqigws .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pamufqigws .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pamufqigws .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pamufqigws .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pamufqigws .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pamufqigws .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#pamufqigws .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pamufqigws .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#pamufqigws .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#pamufqigws .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pamufqigws .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#pamufqigws .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pamufqigws .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#pamufqigws .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pamufqigws .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pamufqigws .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pamufqigws .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pamufqigws .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#pamufqigws .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#pamufqigws .gt_left {
  text-align: left;
}

#pamufqigws .gt_center {
  text-align: center;
}

#pamufqigws .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pamufqigws .gt_font_normal {
  font-weight: normal;
}

#pamufqigws .gt_font_bold {
  font-weight: bold;
}

#pamufqigws .gt_font_italic {
  font-style: italic;
}

#pamufqigws .gt_super {
  font-size: 65%;
}

#pamufqigws .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;pamufqigws&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;7&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Sample Travel Path&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;7&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;location_index&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;route_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;travel_time&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;miles&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;path_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52576&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6849&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52575&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52508&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52449&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52443&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52362&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52312&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52304&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52282&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52263&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52247&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6854&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52243&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Note the small changes between each of the successive lat/long coordinates. This is the path we’ll be walking to obtain our first frosty mug of beer. Before mapping our data, let’s get a general idea of total walking time and distance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;travel_time_in_hours = round(path_df %&amp;gt;% 
                             dplyr::select(location_index, travel_time) %&amp;gt;% 
                             dplyr::distinct() %&amp;gt;% 
                             dplyr::pull(travel_time) %&amp;gt;% 
                             sum() / 3600, 1)

print(glue::glue(&amp;quot;Total Travel Time Is: &amp;quot;,
                 travel_time_in_hours,
                 &amp;quot; Hours&amp;quot;
                 )
      )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Total Travel Time Is: 6.6 Hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like this walk will take around six hours, so we’ll need to bring some comfy shoes. What about distance (we’ll need some way to work off those calories)?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;travel_distance_in_miles = round(path_df %&amp;gt;% 
  dplyr::mutate(feet_numeric = 
                case_when(stringr::str_detect(miles, &amp;#39;ft&amp;#39;) == TRUE ~ 
                          as.numeric(stringr::str_replace(miles, 
                                                          &amp;quot; ft&amp;quot;, 
                                                          &amp;quot;&amp;quot;
                                                          )
                                     ),
                          stringr::str_detect(miles, &amp;quot; mi&amp;quot;) == TRUE ~ 
                          as.numeric(stringr::str_replace(miles, 
                                                          &amp;quot; mi&amp;quot;, 
                                                          &amp;quot;&amp;quot;)
                                     ) * feet_in_mile
                         )
                ) %&amp;gt;% 
  dplyr::select(location_index, feet_numeric) %&amp;gt;% 
  dplyr::distinct() %&amp;gt;% 
  dplyr::pull(feet_numeric) %&amp;gt;% 
  sum() / feet_in_mile, 1)

print(glue::glue(&amp;quot;Total Travel Distance Is: &amp;quot;,
                 travel_distance_in_miles,
                 &amp;quot; Miles&amp;quot;
                 )
      )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Total Travel Distance Is: 19 Miles&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, this is more of a Pub Crawl half-marathon. That’s some serious distance to cover. Let’s bring it all together with some visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-the-route&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Mapping the Route&lt;/h3&gt;
&lt;p&gt;The last step is to bring this analysis to life with everyone’s favorite visualization: MAPS! Indeed, we’ll plot the walking path across downtown Portland so we can actually see the Pub Crawl route.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We&amp;#39;ll use this to identify the labels for each stop 
label_df = path_df %&amp;gt;% 
           dplyr::filter(path_order == 1)

# Bar crawl visualization
final_route = leaflet(data = path_df) %&amp;gt;%
  setView(lng = depot_lng + 0.02, lat = depot_lat, zoom = 13) %&amp;gt;% 
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
  addPolylines(data = path_df %&amp;gt;% 
                 filter(route_order &amp;lt; 24),
               lng = ~lng,
               lat = ~lat,
               color = &amp;quot;orange&amp;quot;,
               opacity = 4
  ) %&amp;gt;% 
  addMarkers(lng = depot_lng,
             lat = depot_lat
  ) %&amp;gt;% 
  addCircleMarkers(data = label_df,
                   lng = ~lng,
                   lat = ~lat,
                   radius = 4,
                   label = ~as.character(route_order),
                   labelOptions = labelOptions(noHide = T,
                                               textOnly = T,
                                               direction = &amp;#39;top&amp;#39;,
                                               textsize = &amp;quot;14px&amp;quot;,
                                               offset=c(0,-5),
                                               size = 1
                   )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl_files/figure-html//widgets/widget_unnamed-chunk-21.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Choosing a Fantasy Football Quarterback</title>
      <link>http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/</link>
      <pubDate>Sun, 10 Sep 2017 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb_files/mariota.jpg&#34; width=&#34;700&#34; height=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Understanding a new concept is all about connecting it with something you already know. I don’t know much, but I do know Fantasy Football. Thus, when I come across new concepts, I often think to myself, “How can I use this information to beat my friend Steve in Fantasy Football”? This very question was the impetus for putting these words and figures together in a post, which will introduce the idea of using the Beta Distribution to determine your weekly starter. I’ll explain this approach in the context of my 2015 Fantasy Football season.&lt;/p&gt;
&lt;p&gt;At the outset of that season, I drafted two quarterbacks: Joe Flacco and Marcus Mariota (it was a rough draft). Flacco had been in the NFL for a few years, while Mariota was still a rookie yet to play a game. I was also considering a separate rookie, Jameis Winston, who was available to pick up anytime during the season off the waiver wire. Throughout the season, I was faced with the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who do I make the starting QB?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If one QB is performing poorly, when is the right time to make the switch (e.g., Flacco -&amp;gt; Mariota; Flacco -&amp;gt; Winston; Mariota -&amp;gt; Winston)?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This question is faced by NFL coaches and fantasy owners alike. If your QB has a few bad weeks, should you continue with them into the next week, replace them with the 2nd string QB, or sign a free agent to your team mid-season?&lt;/p&gt;
&lt;p&gt;Before getting into the technical details, let’s first define what “Success” looks like for a Fantasy Football QB. Success can be defined in one word: Consistency. A QB that throws three touchdowns (TDs) every game for the first six games of the season (18 total) is better than a QB who throws five TDs for the first three games and then one TD during the next three games, despite having thrown the same number of TDs. Simply put - you want consistent, reliable performance every week. It doesn’t matter if you win by one point or 50 points – a win is a win. Thus, I evaluate my QB’s performance on the following criteria: A “Successful” performance is defined as &lt;strong&gt;3 or more touchdowns AND/OR 300 or more yards&lt;/strong&gt; for a given week. Touchdowns and passing yards are the two primary sources of QB fantasy points, and a +3TD|300yard weekly statline should cement a QB amongst that week’s top performers. Failing to meet either of these criteria was defined as an “Unsuccessful” performance. Note that this label could also factor in interceptions, pass completions, and fumble, but we’ll keep it simple and just focus on passing yards and passing touchdowns.&lt;/p&gt;
&lt;p&gt;Having defined the evaluation criteria, the data generating process was modeled via the beta distribution. Recall that the beta distribution defines a distribution of probabilities, and we’re interested in the probability of our QB having a Successful week. There are several years of performance history on Joe Flacco, so we can provide a reasonably informed estimate of his weekly probabilty for achieving success (i.e., our prior). In contrast, there is no NFL game history on Mariota or Winston, so we’ll assign each a uniform or uninformative prior. Our estimate of the Success parameter for Winston and Mariota will change rapidly as we acquire in-season data because our posterior is determined entirely from the data. We could create a more informed-–and stronger-–prior by assigning Mariota and Winston the historic first-year league average for all rookie QBs entering the NFL but we’ll keep it simple. A uniform prior means that all probabilities from 0-1 are equally likely.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;collecting-qb-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Collecting QB Data&lt;/h3&gt;
&lt;p&gt;We’ll use the &lt;code&gt;nflgame&lt;/code&gt; python package to gather QB data. We’ll pull 2013-2014 weekly performance data for Joe Flacco to calculate our prior, as well as the 2015 data for all three players. During the season we’ll update our priors to determine which QB we should play for a given week. That is, as we acquire results over the season, updates will be made to obtain a better, more reliable estimate of the “success” parameter for each QB.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import nflgame
import pandas as pd

game_years = range(2013, 2016)
game_weeks = range(1, 17)
qbs = (&amp;quot;Joe Flacco&amp;quot;, 
       &amp;quot;Marcus Mariota&amp;quot;,
       &amp;quot;Jameis Winston&amp;quot;)
       
def get_passing_data(year, week, players, qbs):
    qb_list = list()
    for p in players.passing():
        player = &amp;quot; &amp;quot;.join(str(p.player).split(&amp;quot; &amp;quot;)[:2]) 
        if player in qbs:
            qb_list.append([year, week, player, p.passing_tds, p.passing_yds])
    return qb_list
    
quarterback_data = pd.DataFrame()
for year in game_years:
    print &amp;quot;Retrieving Player Data for {year}&amp;quot;.format(year = year)
    for week in game_weeks:
        games = nflgame.games(year, week)
        players = nflgame.combine_game_stats(games)
        temp_qb_stats = get_passing_data(year, week, players, qbs)
        quarterback_data = quarterback_data.append(pd.DataFrame(temp_qb_stats))
        
quarterback_data.columns = [&amp;quot;year&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;player&amp;quot;, &amp;quot;touchdowns&amp;quot;, &amp;quot;passing_yds&amp;quot;]
quarterback_data.to_csv(&amp;quot;quarterback_data.csv&amp;quot;, index = False)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
