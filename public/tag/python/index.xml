<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | The Code Forest</title>
    <link>http://example.org/tag/python/</link>
      <atom:link href="http://example.org/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Mark LeBoeuf</copyright><lastBuildDate>Thu, 20 May 2021 21:13:14 -0500</lastBuildDate>
    <image>
      <url>http://example.org/media/icon_huc737709a4be44af6221d1cabfe197959_22580_512x512_fill_lanczos_center_2.png</url>
      <title>Python</title>
      <link>http://example.org/tag/python/</link>
    </image>
    
    <item>
      <title>Time to Run with AWS</title>
      <link>http://example.org/post/2021-05-21-time-to-run-with-aws/running_alert_aws_lambda/</link>
      <pubDate>Thu, 20 May 2021 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2021-05-21-time-to-run-with-aws/running_alert_aws_lambda/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/architecture_flow.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;As a runner, I’ve always enjoyed the pursuit of pacing faster today relative to yesterday. With the advent of apps like &lt;a href=&#34;https://www.strava.com/&#34;&gt;Strava&lt;/a&gt; that track your performance (among many other metrics), it’s easy to measure if you are running faster over time and, perhaps more importantly, which factors affect your run pace. Indeed, based on my historical running data, I’ve noticed two factors that moderate my run times: time of day and weather. My fastest runs usually happen between 12 PM - 7 PM, and slower runs occurred with high winds, cold weather (less than 30°F ), hot weather (greater than 90°F), or rain (being wet makes me miserable). On these “bad weather” days, I’d prefer to run inside on the treadmill and wait until more optimal running conditions.&lt;/p&gt;
&lt;p&gt;With these criteria in mind, I would begin most mornings by deciding if it was an “inside” or “outside” running day by executing the following mental steps:&lt;/p&gt;
&lt;p&gt;☁️ Log on to weather.com at 7AM&lt;br /&gt;
☁️ Check the hourly forecast between 12PM and 5PM&lt;br /&gt;
☁️ Check the temperature, wind-speed, and chance of precipitation&lt;br /&gt;
☁️ Make a “Yes” or “No” decision to run outside based on the forecast&lt;/p&gt;
&lt;p&gt;While it isn’t a huge inconvenience to repeat these steps each day, it required a few minutes of the morning. Perhaps more importantly, though, it was yet another decision that needed attention. I make lots of decisions in a day, and each decision requires thought and energy. Thus, if I could automate one of those decisions by creating a “rules engine,” it would save me the time and cognition required to plan my daily run.&lt;/p&gt;
&lt;p&gt;The journey of automating this process is what inspired the following post, which will cover a few key concepts, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scheduling a workflow using AWS Event Bridge&lt;/li&gt;
&lt;li&gt;Building Lambda functions&lt;/li&gt;
&lt;li&gt;Sending emails via AWS SES&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These concepts can be generalized to any reoccurring process. Perhaps it’s a daily forecast that planners use to manage a store’s inventory. Or maybe it’s a marketing email sent to new customers after making their first purchase. Extracting data from a database/API, applying some business logic, and then socializing the results through an Email is a standard analytics workflow. Read on to learn more about how I leveraged this approach to identify the best times to run each day, save myself a few minutes, and remove one more decision from my day.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;be-the-algorithm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Be The Algorithm&lt;/h3&gt;
&lt;p&gt;Before diving into the solution, I wanted to quickly discuss a technique I’ve found helpful when automating a decision-making process. Before writing code or building queries, it’s good to step through the process manually that you are trying to automate. That is, you want to assume the role of the computer or algorithm. Repeating the steps above each day made it clear how I would automate the decision-making process by identifying:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The information I needed to make a decision&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;The timing and frequency of the decision&lt;/li&gt;
&lt;li&gt;The values of the criteria that would lead to an “inside” or “outside” run decision&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You could easily sub in a machine learning model to discover the rules, but the overall process flow will be essentially unchanged. Keep this in mind next time you go to create a process that automates a decision.&lt;br /&gt;
In the next section, we’ll cover the technical specifics.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;architecture-overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Architecture Overview&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/architecture_flow.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;br /&gt;
No post on AWS would be complete without a diagram outlining how data flows through our system. Accordingly, the figure above depicts the order of operations and each service’s role in our decision workflow. Each service is described in greater detail below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Event Bridge&lt;/strong&gt; - this is our scheduler. Each day at Noon PST, Amazon Event Bridge initiates the first Lambda function (TimeToRun).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lambda (TimeToRun)&lt;/strong&gt; - TimeToRun connects to the OpenWeather API, extracts weather forecasts for my latitude and longitude, and formats the resulting data. The forecasts are then saved to an S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lambda (SendRunningEmail)&lt;/strong&gt; - SendRunningEmail is triggered by any action in the S3 bucket containing the hourly weather forecasts. In this case, when a new object lands in the bucket, the Lambda function automatically starts and retrieves the data from the S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Amazon SES&lt;/strong&gt; - While this service is part of the SendRunningEmail Lambda, I separated it since it’s such a helpful service. Sending emails through Python can be tricky, and I’ve found the approach using AWS SES to be much easier. You import the service, define the message contents, add a bit of HTML (to make it look pretty, of course), and send the message to a set of desired email addresses. It’s that simple.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Personal Gmail&lt;/strong&gt; - this is where the resulting message lands, alerting me if it is an “inside” or “outside” running day.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following sections, we’ll cover the two Lambda functions that comprise this workflow. We’ll also cover a few “gotchas” that come up frequently when working with Lambda for the first time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-1-timetorun&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part 1: TimeToRun&lt;/h3&gt;
&lt;p&gt;The first part will cover the data collection process, which briefly entails:&lt;br /&gt;
1. Scheduling&lt;br /&gt;
2. Extracting hourly forecasts from OpenWeather API&lt;br /&gt;
3. Saving the forecasts to an S3 bucket&lt;/p&gt;
&lt;p&gt;We’ll use EventBridge for scheduling, which you can see in the diagram on the left below.
&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/eventbridge.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;
To connect Lambda with EventBridge, you add a trigger and then indicate how frequently you want it to execute. The desired cadence for the hourly weather forecasts was every weekday at 7 PM GMT (or noon PST), expressed via Cron below.
&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/cron_expression.png&#34; width=&#34;200&#34; height=&#34;200&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we’ve scheduled our Lambda function, the next step is to add logic that collects the forecasts and saves them to S3.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os
import sys
from typing import List
import json
from datetime import datetime
import logging

import pytz
import requests
import boto3

S3_BUCKET = &amp;quot;running-weather-data&amp;quot;

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def retrieve_weather_data(units_of_measure: str) -&amp;gt; dict:
    api_key = os.environ[&amp;quot;WEATHER_API_KEY&amp;quot;]
    lat = os.environ[&amp;quot;LOCATION_LATITUDE&amp;quot;]
    lon = os.environ[&amp;quot;LOCATION_LONGITUDE&amp;quot;]
    base_url = &amp;quot;https://api.openweathermap.org/data/2.5/onecall?&amp;quot;
    url = f&amp;quot;{base_url}lat={lat}&amp;amp;lon={lon}&amp;amp;appid={api_key}&amp;amp;units={units_of_measure}&amp;quot;
    response = requests.get(url)
    weather_data = json.loads(response.text)
    return weather_data


def parse_weather_data(weather_hour: dict) -&amp;gt; dict:
    hour = datetime.fromtimestamp(
        weather_hour[&amp;quot;dt&amp;quot;], pytz.timezone(&amp;quot;America/Los_Angeles&amp;quot;)
    ).hour
    temp = weather_hour[&amp;quot;temp&amp;quot;]
    wind_speed = weather_hour[&amp;quot;wind_speed&amp;quot;]
    weather_status = weather_hour[&amp;quot;weather&amp;quot;][0]
    status = weather_status[&amp;quot;main&amp;quot;]
    return {&amp;quot;hour&amp;quot;: hour, &amp;quot;temp&amp;quot;: temp, &amp;quot;wind_speed&amp;quot;: wind_speed, &amp;quot;status&amp;quot;: status}


def is_today_weather(weather_hour: dict, timezone: str = &amp;quot;America/Los_Angeles&amp;quot;) -&amp;gt; bool:
    weather_fmt = &amp;quot;%Y-%m-%d&amp;quot;
    today_dt = datetime.now().strftime(weather_fmt)
    weather_dt = datetime.fromtimestamp(weather_hour[&amp;quot;dt&amp;quot;], pytz.timezone(timezone))
    if weather_dt.strftime(weather_fmt) == today_dt:
        return True
    else:
        return False


def _generate_s3_path() -&amp;gt; str:
    year, month, day = datetime.now().strftime(&amp;quot;%Y-%m-%d&amp;quot;).split(&amp;quot;-&amp;quot;)
    s3_path = f&amp;quot;data/{year}-{month}-{day}-running-times.json&amp;quot;
    return s3_path


def save_json_to_s3(json_data: dict, s3_bucket: str) -&amp;gt; None:
    s3 = boto3.resource(&amp;quot;s3&amp;quot;)
    response = s3.Object(s3_bucket, _generate_s3_path()).put(
        Body=(bytes(json.dumps(json_data).encode(&amp;quot;UTF-8&amp;quot;)))
    )
    if response.get(&amp;quot;HTTPStatusCode&amp;quot;) == 200:
        print(f&amp;quot;Data successfully landed&amp;quot;)


def lambda_handler(event, context):
    try:
        # retrieve weather forecast from OpenWeatherAPI
        weather_data = retrieve_weather_data(units_of_measure=&amp;quot;imperial&amp;quot;)
        # extract hourly forecast
        hourly_data = weather_data[&amp;quot;hourly&amp;quot;]
        # filter to only today&amp;#39;s forecast
        today_weather_bool = [is_today_weather(x) for x in hourly_data if x]
        # extract fields relevant to deciding if run outside
        hourly_data = [parse_weather_data(x) for x in hourly_data]
        # filter to today&amp;#39;s hourly data
        today_hourly_data = [
            today_weather
            for (today_weather, is_today) in zip(hourly_data, today_weather_bool)
            if is_today
        ]
        # convert all data to dictionary
        hourly_data_dict = {&amp;quot;weather_data&amp;quot;: today_hourly_data}
        # save hourly weather data to S3 Bucket as .json
        save_json_to_s3(json_data=json.dumps(hourly_data_dict), s3_bucket=S3_BUCKET)
        return {&amp;quot;statusCode&amp;quot;: 200, &amp;quot;body&amp;quot;: json.dumps(hourly_data_dict)}
    except Exception as exp:
        exception_type, exception_value, exception_traceback = sys.exc_info()
        err_msg = json.dumps(
            {&amp;quot;errorType&amp;quot;: exception_type.__name__, &amp;quot;errorMessage&amp;quot;: str(exception_value)}
        )
        logger.error(err_msg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This entire block of code is triggered daily, landing a single &lt;em&gt;.json&lt;/em&gt; file in the desired S3 Bucket. While this looks straightforward, it’s not as simple as copy-pasting your code and hitting play. Like most things in the AWS ecosystem, getting everything to work takes a few tries. The subsections below highlight areas that are potential sources of confusion when starting with Lambda.&lt;/p&gt;
&lt;div id=&#34;configuring-environment-variables&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Configuring Environment Variables&lt;/h4&gt;
&lt;p&gt;Environment variables store sensitive information, such as API keys, passwords, or other private values. In this case, I’ve stored the OpenWeather API key and Latitude/Longitude of where I want the daily forecasts. The image below depicts how to add these variables via the console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/environment_variables.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;br /&gt;
And this is where these variables are accessed in the Lambda code.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def retrieve_weather_data(units_of_measure: str) -&amp;gt; dict:
    api_key = os.environ[&amp;quot;WEATHER_API_KEY&amp;quot;]
    lat = os.environ[&amp;quot;LOCATION_LATITUDE&amp;quot;]
    lon = os.environ[&amp;quot;LOCATION_LONGITUDE&amp;quot;]
    base_url = &amp;quot;https://api.openweathermap.org/data/2.5/onecall?&amp;quot;
    url = f&amp;quot;{base_url}lat={lat}&amp;amp;lon={lon}&amp;amp;appid={api_key}&amp;amp;units={units_of_measure}&amp;quot;
    response = requests.get(url)
    weather_data = json.loads(response.text)
    return weather_data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this approach to managing keys and constants is sufficient for smaller projects and prototypes. However, for larger projects where you are collaborating with other developers and stakeholders, configuration data will likely be stored in a way that allows for versioning and tracking.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-layers&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Adding Layers&lt;/h4&gt;
&lt;p&gt;A layer is a .zip file that includes additional code or data. If you noticed in the &lt;code&gt;retrieve_weather_data&lt;/code&gt; function, we use the &lt;em&gt;requests&lt;/em&gt; package to access the OpenWeather API. &lt;em&gt;Requests&lt;/em&gt; is not part of the Python Standard Library, so we must include it as part of a layer (there is no way to &lt;code&gt;pip install requests&lt;/code&gt; or any other third-party libraries). While a full explanation of adding a layer is beyond the scope of this post, &lt;a href=&#34;https://towardsdatascience.com/how-to-install-python-packages-for-aws-lambda-layer-74e193c76a91&#34;&gt;the following article&lt;/a&gt; nicely summarizes how to incorporate third-party libraries on Lambda.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-permissions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Adding Permissions&lt;/h4&gt;
&lt;p&gt;Any time you set up a service through AWS, the default is to have minimal permissions in place. Among other activities, permissions allow your lambda function to interact with other AWS services. For example, the &lt;strong&gt;TimeToRun&lt;/strong&gt; Lambda function writes the weather forecasts to an S3 bucket. The ability to interact with S3 is not setup by default, so you’ll have to attach a policy. Below I’ve enabled &lt;em&gt;AmazonS3FullAccess&lt;/em&gt;, which allows access to S3. You’ll need to do the same for the second Lambda function as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/s3_permissions_access.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;
If you ever receive an error message like “…is not authorized to perform…”, it usually can be solved by updating the permissions for a given service.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;run-time-limit&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Run Time Limit&lt;/h4&gt;
&lt;p&gt;A second default setting that might not be immediately obvious is the standard run-time limit. This setting indicates how long AWS will let a Lambda run before terminating. The default is set to three seconds. Depending on the processing time, I’ll usually increase the limit to 30 seconds and then gradually go down or up from there. The image below indicates where you can adjust the run-time or memory for more compute-heavy tasks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/run_time_limit.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;
If you’ve successfully implemented all of the steps above, you should receive something that looks like this when testing the function:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/test_success.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This response indicates that everything ran smoothly and you are ready for the next section!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-2-sendrunningemail-lambda&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part 2: SendRunningEmail Lambda&lt;/h3&gt;
&lt;p&gt;The second part of this post covers the data formatting and transmission process in four steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Extract data from S3&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Determine if “inside” or “outside” running day&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Format the decision text (so it looks nice, of course)&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Send the decision to the desired email address(es)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import sys
import boto3
import json
import logging
from datetime import datetime
from typing import List

S3_BUCKET = &amp;quot;&amp;lt;weather-data-bucket-name&amp;gt;&amp;quot;
SENDER = &amp;quot;&amp;lt;sender-email-address&amp;gt;&amp;quot;
RECIPIENT = &amp;quot;&amp;lt;recipient-email-addresses&amp;gt;&amp;quot;
AWS_REGION = &amp;quot;us-west-2&amp;quot;
SUBJECT = &amp;quot;Best Times to Run Today&amp;quot;
CHARSET = &amp;quot;UTF-8&amp;quot;
RUNNING_CONDS = {
    &amp;quot;hour&amp;quot;: {&amp;quot;min_hour&amp;quot;: 13, &amp;quot;max_hour&amp;quot;: 19},
    &amp;quot;status&amp;quot;: [&amp;quot;Rain&amp;quot;, &amp;quot;Snow&amp;quot;, &amp;quot;Smoke&amp;quot;],
    &amp;quot;wind_speed&amp;quot;: {&amp;quot;min_speed&amp;quot;: 0, &amp;quot;max_speed&amp;quot;: 30},
    &amp;quot;temp&amp;quot;: {&amp;quot;min_temp&amp;quot;: 30, &amp;quot;max_temp&amp;quot;: 90},
}

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def find_most_recent_data_path(s3_bucket: str) -&amp;gt; str:
    today_dt = datetime.now().strftime(&amp;quot;%Y-%m-%d&amp;quot;)
    s3 = boto3.resource(&amp;quot;s3&amp;quot;)
    bucket = s3.Bucket(s3_bucket)
    existing_data = [
        x.key
        for x in bucket.objects.all()
        if str(x.key).startswith(&amp;quot;data&amp;quot;) and str(x.key).endswith(&amp;quot;-running-times.json&amp;quot;)
    ]
    most_recent_dt = max(
        [x.split(&amp;quot;/&amp;quot;)[-1].replace(&amp;quot;-running-times.json&amp;quot;, &amp;quot;&amp;quot;) for x in existing_data]
    )
    assert most_recent_dt == today_dt, &amp;quot;No Data Found for Today&amp;#39;s Date&amp;quot;
    s3_key = [x for x in existing_data if most_recent_dt in x][0]
    return s3_key


def read_json_from_s3(s3_bucket: str, s3_key: str) -&amp;gt; str:
    s3 = boto3.resource(&amp;quot;s3&amp;quot;)
    obj = s3.Object(s3_bucket, s3_key)
    file_content = obj.get()[&amp;quot;Body&amp;quot;].read().decode(&amp;quot;utf-8&amp;quot;)
    json_content = json.loads(file_content)
    return json_content


def _convert_to_12hr_format(hr: int) -&amp;gt; str:
    return datetime.strptime(str(hr), &amp;quot;%H&amp;quot;).strftime(&amp;quot;%I:%M %p&amp;quot;).strip(&amp;quot;0&amp;quot;)


def format_run_times(run_times: List[dict]) -&amp;gt; str:
    if run_times:
        hour_fmt = [
            f&amp;quot;&amp;lt;b&amp;gt;{_convert_to_12hr_format(x.get(&amp;#39;hour&amp;#39;))}:&amp;lt;/b&amp;gt;&amp;quot; for x in run_times
        ]
        temp_fmt = [f&amp;quot;{round(x.get(&amp;#39;temp&amp;#39;))}F with&amp;quot; for x in run_times]
        wind_speed_fmt = [
            f&amp;quot;wind at {round(x.get(&amp;#39;wind_speed&amp;#39;))} mph&amp;quot; for x in run_times
        ]
        status_fmt = [f&amp;quot;and {x.get(&amp;#39;status&amp;#39;).lower()}&amp;quot; for x in run_times]
        fmt_msg = zip(hour_fmt, temp_fmt, wind_speed_fmt, status_fmt)
        fmt_msg_list = [&amp;quot; &amp;quot;.join(x) for x in fmt_msg]
        return fmt_msg_list
    else:
        return [&amp;quot;No Times to Run Today!&amp;quot;]


def is_time_for_run(weather_hour: dict) -&amp;gt; bool:
    is_time = (
        RUNNING_CONDS[&amp;quot;hour&amp;quot;][&amp;quot;min_hour&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;hour&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;hour&amp;quot;][&amp;quot;max_hour&amp;quot;]
    )
    is_temp = (
        RUNNING_CONDS[&amp;quot;temp&amp;quot;][&amp;quot;min_temp&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;temp&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;temp&amp;quot;][&amp;quot;max_temp&amp;quot;]
    )
    is_wind = (
        RUNNING_CONDS[&amp;quot;wind_speed&amp;quot;][&amp;quot;min_speed&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;wind_speed&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;wind_speed&amp;quot;][&amp;quot;max_speed&amp;quot;]
    )
    is_status = weather_hour[&amp;quot;status&amp;quot;] not in RUNNING_CONDS[&amp;quot;status&amp;quot;]
    if all([is_time, is_temp, is_wind, is_status]):
        return True
    else:
        return False


def lambda_handler(event, context):
    # generate s3 key for most recent weather data
    running_data_path = find_most_recent_data_path(s3_bucket=S3_BUCKET)
    # read as str
    hourly_weather_data = read_json_from_s3(
        s3_bucket=S3_BUCKET, s3_key=running_data_path
    )
    # convert to dict and extract weather data
    hourly_data_dict = eval(hourly_weather_data)[&amp;quot;weather_data&amp;quot;]
    # True or False filter based on hour, temperature, windspeed criteria
    run_time_bool = [is_time_for_run(x) for x in hourly_data_dict]
    # applies weather criteria and filters only to hours where critera are met
    run_times = [
        time
        for (time, time_to_run) in zip(hourly_data_dict, run_time_bool)
        if time_to_run
    ]
    # beautify the message with a sprinkle of HTML
    running_msg_lst = format_run_times(run_times)
    running_msg_str = &amp;quot;&amp;lt;p&amp;gt;&amp;quot; + &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;.join(running_msg_lst) + &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;
    running_msg = f&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;
                        &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
                        &amp;lt;body&amp;gt;
                        &amp;lt;h1&amp;gt;Best Times to Run&amp;lt;/h1&amp;gt;
                        {running_msg_str}
                        &amp;lt;/body&amp;gt;
                        &amp;lt;/html&amp;gt;
                        &amp;quot;&amp;quot;&amp;quot;
    try:
        client = boto3.client(&amp;quot;ses&amp;quot;, region_name=AWS_REGION)
        response = client.send_email(
            Destination={
                &amp;quot;ToAddresses&amp;quot;: [
                    RECIPIENT,
                ]
            },
            Message={
                &amp;quot;Body&amp;quot;: {
                    &amp;quot;Html&amp;quot;: {
                        &amp;quot;Charset&amp;quot;: CHARSET,
                        &amp;quot;Data&amp;quot;: running_msg,
                    },
                },
                &amp;quot;Subject&amp;quot;: {
                    &amp;quot;Charset&amp;quot;: CHARSET,
                    &amp;quot;Data&amp;quot;: SUBJECT,
                },
            },
            Source=SENDER,
        )
    except Exception as exp:
        exception_type, exception_value, exception_traceback = sys.exc_info()
        err_msg = json.dumps(
            {&amp;quot;errorType&amp;quot;: exception_type.__name__, &amp;quot;errorMessage&amp;quot;: str(exception_value)}
        )
        logger.error(err_msg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the logic is concerned with accessing and formatting the data we collected in the first part. However, this is where we determine an inside or outside run. The two sections highlighted below are responsible for making this decision.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;RUNNING_CONDS = {
    &amp;quot;hour&amp;quot;: {&amp;quot;min_hour&amp;quot;: 13, &amp;quot;max_hour&amp;quot;: 19},
    &amp;quot;status&amp;quot;: [&amp;quot;Rain&amp;quot;, &amp;quot;Snow&amp;quot;, &amp;quot;Smoke&amp;quot;],
    &amp;quot;wind_speed&amp;quot;: {&amp;quot;min_speed&amp;quot;: 0, &amp;quot;max_speed&amp;quot;: 30},
    &amp;quot;temp&amp;quot;: {&amp;quot;min_temp&amp;quot;: 30, &amp;quot;max_temp&amp;quot;: 90},
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are all of the criteria - time, status (I probably don’t want to run if there’s a 🔥wildfire smoke 🔥), wind speed, and temperature - and their limits used in making the running decision. The &lt;code&gt;is_time_for_run&lt;/code&gt; function ensures that the forecast data satisfies all four conditions.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def is_time_for_run(weather_hour: dict) -&amp;gt; bool:
    is_time = (
        RUNNING_CONDS[&amp;quot;hour&amp;quot;][&amp;quot;min_hour&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;hour&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;hour&amp;quot;][&amp;quot;max_hour&amp;quot;]
    )
    is_temp = (
        RUNNING_CONDS[&amp;quot;temp&amp;quot;][&amp;quot;min_temp&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;temp&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;temp&amp;quot;][&amp;quot;max_temp&amp;quot;]
    )
    is_wind = (
        RUNNING_CONDS[&amp;quot;wind_speed&amp;quot;][&amp;quot;min_speed&amp;quot;]
        &amp;lt;= weather_hour[&amp;quot;wind_speed&amp;quot;]
        &amp;lt;= RUNNING_CONDS[&amp;quot;wind_speed&amp;quot;][&amp;quot;max_speed&amp;quot;]
    )
    is_status = weather_hour[&amp;quot;status&amp;quot;] not in RUNNING_CONDS[&amp;quot;status&amp;quot;]
    if all([is_time, is_temp, is_wind, is_status]):
        return True
    else:
        return False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll receive a message (like the one below) in my inbox every weekday at Noon when these conditions are met.
&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/running_email.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;
Otherwise, I’ll receive the message below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-05-21-time-to-run-with-aws/images/no_run_message.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Overall, it looks like a solid day for a run. The one thing to note is that 3 PM and 4 PM do not have any information. The absence of data at these times indicates that at least one of the criteria was not met. Indeed, the local weather forecast showed rain for those times, so they were automatically filtered out in the message, leaving only times that met all four criteria. Portland, Oregon (my home) is a rainy place, and this sort of granular information is beneficial for those days where you get a brief window of dryness to go run.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;parting-thoughts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Parting Thoughts&lt;/h3&gt;
&lt;p&gt;I hope this was a helpful introduction to setting up and running a basic Lambda workflow. It is a useful service, and I’ve found numerous applications in my day-to-day life beyond just helping me plan my daily run. Please feel free to comment below if you have any thoughts or questions. Until next time, happy coding!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scalable Time-Series Forecasting in Python</title>
      <link>http://example.org/post/2021-03-28-pyspark-forecasting/pyspark_time_series_forecasting/</link>
      <pubDate>Mon, 29 Mar 2021 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2021-03-28-pyspark-forecasting/pyspark_time_series_forecasting/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-03-28-pyspark-forecasting/images/header_image.png&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Whether predicting daily demand for thousands of products or the number of workers to staff across many distribution centers, generating operational forecasts in parallel is a common task for data scientists. Accordingly, the goal of this post is to outline an approach for creating many forecasts via PySpark. We’ll cover some common data-cleaning steps that often precede forecasting, and then generate several thousand week-level demand predictions for a variety consumer products. Note that we will not cover how to implement this workflow in a cloud computing environment (which, in a real-world setting, would typically be the case). Nor will we delve into model tuning or selection. The goal is to provide a straightforward workflow for quickly generating many time-series forecasts in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;We’ll use data originally provided by Walmart that represents weekly demand for products at the store-department level. All code for this post is stored in the &lt;a href=&#34;https://github.com/thecodeforest/codeforest2.0/tree/main/content/post/2021-03-28-pyspark-forecasting/pyspark_fcast&#34;&gt;Codeforest Repository&lt;/a&gt;. Before diving into the details, let’s briefly review the key modules and files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-03-28-pyspark-forecasting/images/project_tree.png&#34; width=&#34;300&#34; height=&#34;75&#34; /&gt;
&lt;strong&gt;conf.json&lt;/strong&gt; - A configuration file that defines various parameters for our job. It’s a good practice to keep these parameters outside of your actual code, as it makes it easier for others (or future you!) to adapt and extend to other use cases.
&lt;img src=&#34;http://example.org/post/2021-03-28-pyspark-forecasting/images/config_file.png&#34; width=&#34;700&#34; height=&#34;400&#34; /&gt;
&lt;strong&gt;pyspark_fcast.py&lt;/strong&gt; - Our main module, or where the forecasting gets done. We’ll cover this in detail below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fcast_data_frame.py&lt;/strong&gt; - A class responsible for common pre-forecasting data transformations. These include filling in missing values, filtering time-series with only a few observations, or log transforming our outcome variable. Visit &lt;a href=&#34;https://github.com/thecodeforest/codeforest2.0/blob/main/content/post/2021-03-28-pyspark-forecasting/pyspark_fcast/fcast_helpers/fcast_data_frame.py&#34;&gt;here&lt;/a&gt; for access to all methods.&lt;/p&gt;
&lt;p&gt;You’ll also need to import the following packages to follow along with the tutorial.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import argparse
import json
import logging
import os
import re
from datetime import datetime
from pathlib import Path
from typing import List

import numpy as np
import pandas as pd

from fbprophet import Prophet # fbprophet==0.7.1 &amp;amp; pystan==2.18.0
from pyspark.sql import SparkSession # pyspark==3.0.1
from pyspark.sql.functions import lit
from pyspark.sql.types import (DateType, FloatType, IntegerType, StructField,
                               StructType)
                               
from pyspark_ts_fcast.fcast_data_frame import FcastDataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming the imports were successful, we’ll peak at a few rows in our data to get a feel for the format.
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#rqobitfmng .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#rqobitfmng .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#rqobitfmng .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#rqobitfmng .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#rqobitfmng .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#rqobitfmng .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#rqobitfmng .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#rqobitfmng .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#rqobitfmng .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#rqobitfmng .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#rqobitfmng .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#rqobitfmng .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#rqobitfmng .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#rqobitfmng .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#rqobitfmng .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#rqobitfmng .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#rqobitfmng .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#rqobitfmng .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#rqobitfmng .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#rqobitfmng .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#rqobitfmng .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#rqobitfmng .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#rqobitfmng .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#rqobitfmng .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#rqobitfmng .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#rqobitfmng .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#rqobitfmng .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#rqobitfmng .gt_left {
  text-align: left;
}

#rqobitfmng .gt_center {
  text-align: center;
}

#rqobitfmng .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#rqobitfmng .gt_font_normal {
  font-weight: normal;
}

#rqobitfmng .gt_font_bold {
  font-weight: bold;
}

#rqobitfmng .gt_font_italic {
  font-style: italic;
}

#rqobitfmng .gt_super {
  font-size: 65%;
}

#rqobitfmng .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;rqobitfmng&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Sample Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;store&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;dept&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;date&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24924&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;46039&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;19404&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;21828&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
Let’s now discuss the process of passing and documenting the forecasting parameters. We’ll execute the following from the command line to generate our forecasts:&lt;br /&gt;
&lt;code&gt;python3 pyspark_fcast.py --forecast-config-file &#39;config/conf.json&#39;&lt;/code&gt;&lt;br /&gt;
Here we are passing in the location of our configuration file and extracting the parameters. Don’t worry if the individual parameters don’t make sense now. I’ll explain each in greater detail below.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;args = read_args()

with open(args.forecast_config_file) as f:
    config = json.load(f)

log_input_params(config=config)

# forecasting parameters
input_data_path = config[&amp;quot;input_data_path&amp;quot;]
fcast_params = config[&amp;quot;fcast_parameters&amp;quot;]
group_fields = fcast_params[&amp;quot;group_fields&amp;quot;]
date_field = fcast_params[&amp;quot;date_field&amp;quot;]
yvar_field = fcast_params[&amp;quot;yvar_field&amp;quot;]
ts_frequency = fcast_params[&amp;quot;ts_frequency&amp;quot;]
fcast_floor = fcast_params[&amp;quot;forecast_floor&amp;quot;]
fcast_cap = fcast_params[&amp;quot;forecast_cap&amp;quot;]
min_obs_threshold = fcast_params[&amp;#39;min_obs_count&amp;#39;]

# spark parameters
spark_n_threads = str(config[&amp;#39;spark_n_threads&amp;#39;])
java_home = config[&amp;quot;java_home&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the two helper functions: &lt;em&gt;read_args&lt;/em&gt; and &lt;em&gt;log_input_params&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def read_args() -&amp;gt; argparse.Namespace:
    &amp;quot;&amp;quot;&amp;quot;Read Forecasting arguments 

    Returns:
        argparse.Namespace: argparse Namespace
    &amp;quot;&amp;quot;&amp;quot;
    parser = argparse.ArgumentParser()
    parser.add_argument(&amp;quot;--forecast-config-file&amp;quot;, type=str)
    return parser.parse_args()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;read_args&lt;/em&gt; takes arguments in our configuration file, then we document which parameters we’re using with &lt;em&gt;log_input_params&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;logging.basicConfig(
    format=&amp;quot;%(levelname)s - %(asctime)s - %(filename)s - %(message)s&amp;quot;,
    level=logging.INFO,
    filename=&amp;quot;run_{start_time}.log&amp;quot;.format(
        start_time=datetime.now().strftime(&amp;quot;%Y-%m-%d %H-%M-%S&amp;quot;)
    ),
)

def log_input_params(config: dict) -&amp;gt; None:
    &amp;quot;&amp;quot;&amp;quot;Logs all parameters in configuration file

    Args:
        config (dict): Configuration parameters for forecast and data
    &amp;quot;&amp;quot;&amp;quot;
    params = pd.json_normalize(config).transpose()
    [
        logging.info(&amp;quot;input params:&amp;quot; + x[0] + &amp;quot;-&amp;quot; + str(x[1]))
        for x in zip(params.index, params.iloc[:, 0])
    ]
    return None&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several benefits to documenting our inputs. First, we can validate if the correct parameters have been passed to our forecasting process. Having a record of these values facilitates debugging. Second, it is useful for experimentation. We can try out different parameters to see which combination provides the best results. Logging does not receive a lot of attention in the data science world, but it is incredibly useful and will save you time as your project matures.&lt;/p&gt;
&lt;p&gt;We have our parameters and have set up logging. Next, we’ll read in the data stored &lt;a href=&#34;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/pyspark_forecasting_data/weekly_sales_data.csv&#34;&gt;here&lt;/a&gt; and execute some basic field formatting with &lt;em&gt;clean_names&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def clean_names(df: pd.DataFrame) -&amp;gt; pd.DataFrame:
    &amp;quot;&amp;quot;&amp;quot;Applies the following transformations to column names:
        - Removes camel case
        - Replaces any double underscore with single underscore
        - Removes spaces in the middle of a string name
        - Replaces periods with underscores

    Args:
        df (pd.DataFrame): Dataframe with untransformed column names

    Returns:
        pd.DataFrame: Dataframe with transformed column names
    &amp;quot;&amp;quot;&amp;quot;
    cols = df.columns
    cols = [re.sub(r&amp;quot;(?&amp;lt;!^)(?=[A-Z])&amp;quot;, &amp;quot;_&amp;quot;, x).lower() for x in cols]
    cols = [re.sub(r&amp;quot;_{2,}&amp;quot;, &amp;quot;_&amp;quot;, x) for x in cols]
    cols = [re.sub(r&amp;quot;\s&amp;quot;, &amp;quot;&amp;quot;, x) for x in cols]
    cols = [re.sub(r&amp;quot;\.&amp;quot;, &amp;quot;_&amp;quot;, x) for x in cols]
    df.columns = cols
    return df&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales_df = pd.read_csv(input_data_path)
sales_df = clean_names(sales_df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t have a &lt;em&gt;clean_names&lt;/em&gt;-type function as part of your codebase, I’d highly recommend creating one. It’s a function that I use frequently when reading data from various sources and encourages a standardized way of formatting field names.&lt;/p&gt;
&lt;p&gt;Now that we have our data, we’ll do some pre-forecasting data cleaning. The main steps are outlined below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filter groups with limited observations&lt;/strong&gt; - It’s a good idea to put predictions against items where you have some historical data. While the space of &lt;a href=&#34;https://aws.amazon.com/blogs/machine-learning/now-available-in-amazon-sagemaker-deepar-algorithm-for-more-accurate-time-series-forecasting/&#34;&gt;cold-start forecasting&lt;/a&gt; is very interesting, it is outside the scope of this post. Thus, we are putting a minimum threshold on the number of data points per group. This is also a good idea because some forecasting algorithms will not fit a model against a few observations, causing your program to crash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Replace negative values with zero&lt;/strong&gt; - I’m assuming a negative value represents a returned product. Our goal is to forecast &lt;strong&gt;demand&lt;/strong&gt; not &lt;strong&gt;demand - returns&lt;/strong&gt;. This is an assumption that would need to be validated with domain knowledge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pad missing values&lt;/strong&gt; - Accounting for missing data is an easy step to overlook for one simple reason: Missing values in time-series data are not usually flagged as “missing”. For example, a store may shut down for six weeks of renovations. As a result, there will be a series of dates that have no sales data. Identifying these gaps is pivotal for generating reliable forecasts. I’ve provided a brief example below to illustrate what this looks like from a data perspective.&lt;/p&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#nbpomebbll .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#nbpomebbll .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nbpomebbll .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#nbpomebbll .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#nbpomebbll .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nbpomebbll .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nbpomebbll .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#nbpomebbll .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#nbpomebbll .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#nbpomebbll .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#nbpomebbll .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#nbpomebbll .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#nbpomebbll .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#nbpomebbll .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#nbpomebbll .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#nbpomebbll .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#nbpomebbll .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#nbpomebbll .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nbpomebbll .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#nbpomebbll .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nbpomebbll .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#nbpomebbll .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#nbpomebbll .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nbpomebbll .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nbpomebbll .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#nbpomebbll .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nbpomebbll .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#nbpomebbll .gt_left {
  text-align: left;
}

#nbpomebbll .gt_center {
  text-align: center;
}

#nbpomebbll .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#nbpomebbll .gt_font_normal {
  font-weight: normal;
}

#nbpomebbll .gt_font_bold {
  font-weight: bold;
}

#nbpomebbll .gt_font_italic {
  font-style: italic;
}

#nbpomebbll .gt_super {
  font-size: 65%;
}

#nbpomebbll .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;nbpomebbll&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Incomplete Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;store&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;dept&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;date&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24924&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;19404&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;22137&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;26229&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#rggjwgclsv .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#rggjwgclsv .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#rggjwgclsv .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#rggjwgclsv .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#rggjwgclsv .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#rggjwgclsv .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#rggjwgclsv .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#rggjwgclsv .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#rggjwgclsv .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#rggjwgclsv .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#rggjwgclsv .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#rggjwgclsv .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#rggjwgclsv .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#rggjwgclsv .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#rggjwgclsv .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#rggjwgclsv .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#rggjwgclsv .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#rggjwgclsv .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#rggjwgclsv .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#rggjwgclsv .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#rggjwgclsv .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#rggjwgclsv .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#rggjwgclsv .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#rggjwgclsv .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#rggjwgclsv .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#rggjwgclsv .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#rggjwgclsv .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#rggjwgclsv .gt_left {
  text-align: left;
}

#rggjwgclsv .gt_center {
  text-align: center;
}

#rggjwgclsv .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#rggjwgclsv .gt_font_normal {
  font-weight: normal;
}

#rggjwgclsv .gt_font_bold {
  font-weight: bold;
}

#rggjwgclsv .gt_font_italic {
  font-style: italic;
}

#rggjwgclsv .gt_super {
  font-size: 65%;
}

#rggjwgclsv .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;rggjwgclsv&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Padded Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;4&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;store&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;dept&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;date&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24924&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;19404&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;22137&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;26229&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;We’ll go back and fill or “interpolate” those missing values in the &lt;code&gt;weekly_sales&lt;/code&gt; field in a later step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filter groups with long ‘streaks’ of missing observations&lt;/strong&gt; - Building on the previous example, let’s say the store closes for six months instead of six weeks. Thus, half of the year will not have any sales information. We could fill it in with a reasonable value, such as the average, but this won’t capture the overall trend, seasonality, or potential holiday/event effects that help to explain variation in our outcome variable. I’ll often initially exclude these time-series, and then try to understand why/how long streaks of values are missing. In this case, we’ll set a limit of four weeks (i.e., if any time-series has more than four consecutive dates missing, exclude from the final forecasting step).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpolate missing values&lt;/strong&gt; - Fills in missing data with “reasonable” values. We’ll use the overall mean of each series, which is a very simple and easy to understand technique. There are better approaches that account for seasonality or local trends. However, the goal here isn’t to generate the best forecast but instead to create a good starting point from which to iterate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add forecasting bounds&lt;/strong&gt; - This function is specific to the Prophet API and is not required to generate a forecast via PySpark. However, when you cannot inspect the quality of each forecast, adding in some “guardrails” can prevent errant predictions that erode trust with your stakeholders. The &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;cap&lt;/code&gt; fields provide bounds that a forecast cannot go above or below. For example, if the minimum value in a time-series is 10 and the maximum is 100, a floor of 0.5 and a cap of 1.5 ensures all forecasted values are not above 150 (100 * 1.5) or less than 5 (10 * 0.5). Again, these decisions are often driven by domain knowledge of the forecaster. We’ll go a bit deeper on this field below as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log transform outcome variable&lt;/strong&gt; - Log transforming our outcome variable is an effective approach to reduce the influence of outliers and stabilize variance that increases over time. A separate approach is to use a box-cox transformation (see &lt;a href=&#34;https://otexts.com/fpp2/transformations.html&#34;&gt;here&lt;/a&gt; for more details), which can yield better results than a log-transformation. However, I often start with a log-transformation because it does require us to keep track of the transformation parameters, which is something you’ll need to do with a box-cox transformation. Are we seeing a theme here? Start simple.&lt;/p&gt;
&lt;p&gt;Whew - that was a lot of information, but we can finally implement all of these data-cleaning steps via the &lt;code&gt;FcastDataFrame&lt;/code&gt; class. The format was inspired by the &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html&#34;&gt;sklearn.pipeline class&lt;/a&gt; to prepare and clean grouped time-series data prior to generating forecasts.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;class FcastDataFrame:
    &amp;quot;&amp;quot;&amp;quot;Use for pre-processing data prior to forecasting&amp;quot;&amp;quot;&amp;quot;
    def __init__(
        self,
        df: pd.DataFrame,
        group_fields: List[str],
        date_field: str,
        yvar_field: str,
        ts_frequency: str,
    ):
        &amp;quot;&amp;quot;&amp;quot;
        Args:
            df (pd.DataFrame): dataframe with to be forecasted data
            group_fields (List[str]): grouping fields. These are often re
                represented by attributes of each unit 
                (e.g., store id, product id, etc.).
            date_field (str): date field
            yvar_field (str): outcome (&amp;quot;y&amp;quot;) field
            ts_frequency (str): granularity of the data. For example, 
                data that is recorded on a weekly basis, every Friday will 
                be &amp;quot;W-FRI&amp;quot;. Note that sub-day level (e.g, hourly, minute) 
                data is not supported. 
        &amp;quot;&amp;quot;&amp;quot;
        self.df = df
        self.group_fields = group_fields
        self.date_field = date_field
        self.yvar_field = yvar_field
        self.ts_frequency = ts_frequency
        
fcast_df = FcastDataFrame(
        df=sales_df,
        group_fields=group_fields,
        date_field=date_field,
        yvar_field=yvar_field,
        ts_frequency=ts_frequency,
    )        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we won’t cover all methods in this class, I’ll briefly review one of the methods – &lt;code&gt;filter_groups_min_obs&lt;/code&gt; – to illustrate the structure of the class.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def filter_groups_min_obs(self, min_obs_threshold: int):
    &amp;quot;&amp;quot;&amp;quot;Filters groups based on some minimum number of observations 
       required for forecasting

    Args:
        min_obs_threshold (int): removes all groups with less obsevations than 
                                 this threshold
    &amp;quot;&amp;quot;&amp;quot;
    n_unique_groups = self.df[self.group_fields].drop_duplicates().shape[0]
    min_obs_filter_df = (
        self.df.groupby(self.group_fields)[self.yvar_field]
        .count()
        .reset_index()
        .rename(columns={self.yvar_field: &amp;quot;obs_count&amp;quot;})
        .query(f&amp;quot;obs_count &amp;gt; {str(min_obs_threshold)}&amp;quot;)
        .drop(columns=&amp;quot;obs_count&amp;quot;)
    )
    n_remaining_groups = min_obs_filter_df.shape[0]
    df = pd.merge(self.df, min_obs_filter_df, how=&amp;quot;inner&amp;quot;, on=self.group_fields)
    self.df = df
    logger.info(&amp;quot;N groups dropped: {}&amp;quot;.format(n_unique_groups - n_remaining_groups))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each data transformation takes in our data, applies some filtering, cleaning, or formatting, logs the changes, and then replaces the existing DataFrame with the updated DataFrame. This pattern is applied at each step until we are satisfied with the changes. Let’s apply these filtering and cleaning steps below.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# filter out groups with less than min number of observations
fcast_df.filter_groups_min_obs(min_obs_threshold=min_obs_threshold)  
# replace any negative value with a zero
fcast_df.replace_negative_value_with_zero()
# replace missing dates between start and end of time-series by group
fcast_df.pad_missing_values()
# filter groups with consecutive missing streak longer than 4
fcast_df.filter_groups_max_missing_streak(max_streak=4)
# impute missing values
fcast_df.fill_missing_values()
# add upper and lower bounds for forecasting
fcast_df.add_forecast_bounds(
    floor_multiplier=fcast_floor, 
    cap_multiplier=fcast_cap
)
# log transform outcome, floor, and cap values
fcast_df.log_transform_values(yvar_field, &amp;quot;floor_value&amp;quot;, &amp;quot;cap_value&amp;quot;)
# return transformed data
fcast_df_trans = fcast_df.return_transformed_df()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to do some forecasting. In the next section, we’ll produce our forecasts from the cleaned and prepared data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pyspark-forecasting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a id=&#34;forecasting_section&#34;&gt;&lt;/a&gt; Pyspark Forecasting&lt;/h3&gt;
&lt;p&gt;Let’s start by translating the field names to those that Prophet understands. For example, our date variable should be named &lt;code&gt;ds&lt;/code&gt; and our outcome variable &lt;code&gt;y&lt;/code&gt;. We’ll use the &lt;em&gt;prep_for_prophet&lt;/em&gt; function to make the transition.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def prep_for_prophet(
    df: pd.DataFrame, yvar_field: str, date_field: str, group_fields: List[str]
) -&amp;gt; pd.DataFrame:
    &amp;quot;&amp;quot;&amp;quot;Renames key field names to be compatible with Prophet Forecasting API

    Args:
        df (pd.DataFrame): Contains data that will be used to generate forecasting
        yvar_field (str): outcome (&amp;quot;y&amp;quot;) field name
        date_field (str): date field name
        group_fields (List[str]): grouping fields. These are often
                represented by attributes of each unit
                (e.g., store id, product id, etc.).

    Returns:
        pd.DataFrame: Data with compatible field names
    &amp;quot;&amp;quot;&amp;quot;
    fields = df.columns.tolist()
    cap_value_index = [
        index 
        for index, value in enumerate([&amp;quot;cap_value&amp;quot; in x for x in fields]) 
        if value
    ]
    floor_value_index = [
        index
        for index, value in enumerate([&amp;quot;floor_value&amp;quot; in x for x in fields])
        if value
    ]
    if cap_value_index and floor_value_index:
        df = df.rename(
            columns={
                fields[cap_value_index[0]]: &amp;quot;cap&amp;quot;,
                fields[floor_value_index[0]]: &amp;quot;floor&amp;quot;,
            }
        )
        group_fields = group_fields + [&amp;quot;cap&amp;quot;, &amp;quot;floor&amp;quot;]
    df = df[group_fields + [date_field] + [yvar_field]]
    df = df.rename(columns={date_field: &amp;quot;ds&amp;quot;, yvar_field: &amp;quot;y&amp;quot;})
    df[&amp;quot;ds&amp;quot;] = pd.to_datetime(df[&amp;quot;ds&amp;quot;])
    return df&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;fcast_df_prophet_input = prep_for_prophet(
        df=fcast_df_trans,
        yvar_field=&amp;quot;weekly_sales_prep_log1p&amp;quot;,
        date_field=date_field,
        group_fields=group_fields,
    )    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With our data prepared, we’ll shift over to creating a Spark Session and indicate where our Java version is located. Note this step will vary depending on your computing environment.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;os.environ[&amp;quot;JAVA_HOME&amp;quot;] = java_home

SPARK = (
    SparkSession.builder.master(f&amp;quot;local[{spark_n_threads}]&amp;quot;)
    .appName(config[&amp;quot;app_name&amp;quot;])
    .config(&amp;quot;spark.sql.execution.arrow.pyspark.enabled&amp;quot;, &amp;quot;true&amp;quot;)
    .getOrCreate()
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll define the schema (or format) of our input and output data.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;INPUT_SCHEMA = StructType(
        [
            StructField(&amp;quot;store&amp;quot;, IntegerType(), True),
            StructField(&amp;quot;dept&amp;quot;, IntegerType(), True),
            StructField(&amp;quot;cap&amp;quot;, FloatType(), True),
            StructField(&amp;quot;floor&amp;quot;, FloatType(), True),
            StructField(&amp;quot;ds&amp;quot;, DateType(), True),
            StructField(&amp;quot;y&amp;quot;, FloatType(), True),
        ]
    )
    
OUTPUT_SCHEMA = StructType(
        [
            StructField(&amp;quot;ds&amp;quot;, DateType(), True),
            StructField(&amp;quot;store&amp;quot;, IntegerType(), True),
            StructField(&amp;quot;dept&amp;quot;, IntegerType(), True),
            StructField(&amp;quot;yhat_lower&amp;quot;, FloatType(), True), 
            StructField(&amp;quot;yhat_upper&amp;quot;, FloatType(), True),
            StructField(&amp;quot;yhat&amp;quot;, FloatType(), True),
        ]
)    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll now translate our Pandas DataFrame to a Spark DataFrame and pass in the schema we defined above.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;fcast_spark_prophet_input = SPARK.createDataFrame(
        fcast_df_prophet_input, schema=INPUT_SCHEMA
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function below does the actual forecasting and we’ll spend some time unpacking what’s happening here.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def run_forecast(keys, df):
    &amp;quot;&amp;quot;&amp;quot;Generate time-series forecast 

    Args:
        keys: Grouping keys
        df: Spark Dataframe 
    &amp;quot;&amp;quot;&amp;quot;
    fields = [&amp;quot;ds&amp;quot;, &amp;quot;store&amp;quot;, &amp;quot;dept&amp;quot;, &amp;quot;yhat_lower&amp;quot;, &amp;quot;yhat_upper&amp;quot;,&amp;quot;yhat&amp;quot;]
    store, dept = keys
    cap = df[&amp;quot;cap&amp;quot;][0]
    floor = df[&amp;quot;floor&amp;quot;][0]
    model = Prophet(
        interval_width=0.95,
        growth=&amp;quot;logistic&amp;quot;,
        yearly_seasonality=True,
        seasonality_mode=&amp;quot;additive&amp;quot;,
    )
    model.add_country_holidays(country_name=&amp;quot;US&amp;quot;)
    model.fit(df)
    future_df = model.make_future_dataframe(
        periods=13, freq=&amp;quot;W-FRI&amp;quot;, include_history=False
    )
    future_df[&amp;quot;cap&amp;quot;] = cap
    future_df[&amp;quot;floor&amp;quot;] = floor
    results_df = model.predict(future_df)
    results_df[&amp;quot;store&amp;quot;] = store
    results_df[&amp;quot;dept&amp;quot;] = dept
    results_df = results_df[fields]
    return results_df&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s start by discussing the Prophet model, which automates the selection of many forecasting settings, like seasonality, determined during the model fitting process. Below is a brief summary of some of the key settings:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;interval_width&lt;/strong&gt; - Interval width quantifies uncertainty in our forecast. Wider intervals indicate greater uncertainty. Here, we are indicating that the actual values should fall outside of the interval ~5% of the time. By default, Prophet is set to 80%, which is less conservative than our setting here. Providing a measure of uncertainty is perhaps even more important than the forecast itself, as it allows a business to hedge against the risk of being wrong. For example, imagine a product has a high margin and a low inventory holding cost. In this instance, you would want to plan to a high percentile, as you rarely want to stock out of this product.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yearly_seasonality&lt;/strong&gt; - Setting this to &lt;code&gt;True&lt;/code&gt; indicates my belief that there is week-over-week variation that repeats itself over the course of a year. For example, sales for items like sandals or sunscreen are likely higher in Summer weeks and lower in the Winter weeks. There are two other seasonality options not included above - &lt;code&gt;daily&lt;/code&gt; and &lt;code&gt;hourly&lt;/code&gt;. Daily captures hourly changes within a day, while hourly captures minute-by-minute changes within an hour. Our data is at the week level, so we can ignore these two settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;growth&lt;/strong&gt; - Growth is a way to encode our beliefs regarding if a forecast should reach a “saturation” point across your prediction horizon (see &lt;a href=&#34;https://facebook.github.io/prophet/docs/saturating_forecasts.html&#34;&gt;here&lt;/a&gt; for official documentation). For example, customer acquisition slows as a market matures and will eventually reach a saturation point (i.e., the total addressable market has been acquired). This is typically used for “long-range” forecasting on the scale of several years. Our forecasting horizon is much shorter at only 13 weeks. However, I like to codify what I consider to be reasonable amount of growth, via the “cap” parameter, as well as contraction, via the “floor” parameter, in my forecasts, especially when I cannot inspect each result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;seasonality_mode&lt;/strong&gt; - I’ve selected “additive” for this parameter based on my belief that the magnitude of seasonal changes do not vary across time. Recall that our outcome variable has already been log-transformed, thus we are actually using an additive decomposition of the log-transformed values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add_country_holidays&lt;/strong&gt; - Holidays tend to drive increases in consumption of particular products. And some holidays, like Easter, are not consistent year-over-year. Thus, you can improve forecasting accuracy if you anticipate how demand shifts when generating forecasts based on when holidays occur. One thing to note that is not included in the current post (but is incredibly useful) is the ability to apply a &lt;code&gt;lower_window&lt;/code&gt; and &lt;code&gt;upper_window&lt;/code&gt; to each holiday date. Continuing with our Easter example, you can imagine egg sales increase in the days leading up to Easter. Sales on the holiday date may not be that high, unless you are doing some last minute shopping. By extending the &lt;code&gt;lower_window&lt;/code&gt; parameter for this holiday to something like -5, you can capture the elevated demand during the five days that precede Easter.&lt;/p&gt;
&lt;p&gt;Now that we are familiar with how the model is being tuned, let’s generate the forecasts. This may take a few minutes depending on how many threads you are using. I am using four, and it took about 20 minutes to complete.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;fcast_df_prophet_output = (
    fcast_spark_prophet_input.groupBy(group_fields)
    .applyInPandas(func=run_forecast, schema=OUTPUT_SCHEMA)
    .withColumn(&amp;quot;part&amp;quot;, lit(&amp;quot;forecast&amp;quot;))
    .withColumn(&amp;quot;fcast_date&amp;quot;, lit(datetime.now().strftime(&amp;quot;%Y-%m-%d&amp;quot;)))
    .toPandas()
    .rename(
        columns={
            &amp;quot;yhat&amp;quot;: yvar_field,
            &amp;quot;yhat_lower&amp;quot;: f&amp;quot;{yvar_field}_lb&amp;quot;,
            &amp;quot;yhat_upper&amp;quot;: f&amp;quot;{yvar_field}_ub&amp;quot;,
            &amp;quot;ds&amp;quot;: date_field,
        }
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should have 13-week forecasts for all store-department combinations. Our next steps are to combine the forecasts with the historical data and invert our log-transformation of the outcome variable to get back to our original scale. Note that &lt;code&gt;np.log1p&lt;/code&gt; and &lt;code&gt;np.expm1&lt;/code&gt; are inverses of one another, and elegantly deal with zero values by adding/subtracting a value of “1” to avoid taking the log of zero, which is undefined and will make your code go 💥. Lastly, we’ll write the results out to our root directory.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;fcast_df_prophet_input[&amp;quot;part&amp;quot;] = &amp;quot;actuals&amp;quot;
fcast_df_prophet_input = fcast_df_prophet_input.rename(
    columns={&amp;quot;y&amp;quot;: yvar_field, &amp;quot;ds&amp;quot;: date_field}
)
del fcast_df_prophet_input[&amp;quot;cap&amp;quot;]
del fcast_df_prophet_input[&amp;quot;floor&amp;quot;]

ret_df = pd.concat([fcast_df_prophet_input, fcast_df_prophet_output])
ret_df = ret_df.apply(lambda x: round(np.expm1(x)) if yvar_field in x.name else x)

ret_df.to_csv(Path.cwd() / &amp;quot;sales_data_forecast.csv&amp;quot;, index=False)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quality-assurance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quality Assurance&lt;/h3&gt;
&lt;p&gt;We’ll transition back to the world of R for some quick quality-assurance work. Let’s read in our forecasts and examine a few store-department combinations. Note there are much more formal ways to validate the performance of our models, but our objective is to do a quick sanity check (i.e., “do the forecasts look reasonable for a few randomly sampled grouped?”). The raw output is stored in &lt;a href=&#34;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/pyspark_forecasting_data/sales_data_forecast.csv&#34;&gt;Github&lt;/a&gt;. Let’s start by examining the first and last five rows for a single Store-Dept combination.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(timetk)
library(lubridate)

fcast_df_url = &amp;quot;https://raw.githubusercontent.com/thecodeforest/codeforest_datasets/main/pyspark_forecasting_data/sales_data_forecast.csv&amp;quot;
fcast_df = read_csv(fcast_df_url)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_store_dept_sample &amp;lt;- fcast_df %&amp;gt;% 
  filter(store == 1, dept == 1) %&amp;gt;% 
  mutate(date = as_date(date))&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#vajqssudrv .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 9px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#vajqssudrv .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#vajqssudrv .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#vajqssudrv .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#vajqssudrv .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#vajqssudrv .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#vajqssudrv .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#vajqssudrv .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#vajqssudrv .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#vajqssudrv .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#vajqssudrv .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#vajqssudrv .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#vajqssudrv .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#vajqssudrv .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#vajqssudrv .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#vajqssudrv .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#vajqssudrv .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#vajqssudrv .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#vajqssudrv .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#vajqssudrv .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#vajqssudrv .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#vajqssudrv .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#vajqssudrv .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#vajqssudrv .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#vajqssudrv .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#vajqssudrv .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#vajqssudrv .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#vajqssudrv .gt_left {
  text-align: left;
}

#vajqssudrv .gt_center {
  text-align: center;
}

#vajqssudrv .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#vajqssudrv .gt_font_normal {
  font-weight: normal;
}

#vajqssudrv .gt_font_bold {
  font-weight: bold;
}

#vajqssudrv .gt_font_italic {
  font-style: italic;
}

#vajqssudrv .gt_super {
  font-size: 65%;
}

#vajqssudrv .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;vajqssudrv&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;8&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Top 5 Rows of Forecasting Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;8&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;store&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;dept&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;date&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;part&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales_lb&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales_ub&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fcast_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24924&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;actuals&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;46039&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;actuals&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41596&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;actuals&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-02-26&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;19404&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;actuals&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2010-03-05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;21828&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;actuals&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#uwmuwyxmsv .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 9px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#uwmuwyxmsv .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#uwmuwyxmsv .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#uwmuwyxmsv .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#uwmuwyxmsv .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#uwmuwyxmsv .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#uwmuwyxmsv .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#uwmuwyxmsv .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#uwmuwyxmsv .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#uwmuwyxmsv .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#uwmuwyxmsv .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#uwmuwyxmsv .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#uwmuwyxmsv .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#uwmuwyxmsv .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#uwmuwyxmsv .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#uwmuwyxmsv .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#uwmuwyxmsv .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#uwmuwyxmsv .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#uwmuwyxmsv .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#uwmuwyxmsv .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#uwmuwyxmsv .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#uwmuwyxmsv .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#uwmuwyxmsv .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#uwmuwyxmsv .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#uwmuwyxmsv .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#uwmuwyxmsv .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#uwmuwyxmsv .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#uwmuwyxmsv .gt_left {
  text-align: left;
}

#uwmuwyxmsv .gt_center {
  text-align: center;
}

#uwmuwyxmsv .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#uwmuwyxmsv .gt_font_normal {
  font-weight: normal;
}

#uwmuwyxmsv .gt_font_bold {
  font-weight: bold;
}

#uwmuwyxmsv .gt_font_italic {
  font-style: italic;
}

#uwmuwyxmsv .gt_super {
  font-size: 65%;
}

#uwmuwyxmsv .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;uwmuwyxmsv&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
    &lt;col style=&#34;width:75px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;8&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Bottom 5 Rows of Forecasting Data&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;8&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;store&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;dept&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;date&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;part&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales_lb&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weekly_sales_ub&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fcast_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2012-12-28&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30948&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;forecast&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;21883&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;42839&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2021-04-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2013-01-04&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;21138&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;forecast&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;14793&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30024&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2021-04-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2013-01-11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;16149&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;forecast&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;11384&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;22832&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2021-04-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2013-01-18&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;15553&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;forecast&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10712&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;21662&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2021-04-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2013-01-25&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;18954&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;forecast&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;13475&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;27282&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2021-04-05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Let’s sample a few forecasts and plot them out.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2021)
fcast_df %&amp;gt;% 
  filter(store &amp;lt; 3,
         dept %in% c(df %&amp;gt;% distinct(dept) %&amp;gt;% sample_n(2) %&amp;gt;% pull())
         ) %&amp;gt;% 
  mutate(store = paste0(&amp;#39;Store: &amp;#39;, store),
         dept = paste0(&amp;#39;Dept: &amp;#39;, dept),
         store_id = paste(store, dept, sep=&amp;#39; &amp;#39;)) %&amp;gt;% 
  select(date, store_id, contains(&amp;#39;weekly&amp;#39;)) %&amp;gt;% 
  pivot_longer(contains(&amp;#39;weekly&amp;#39;)) %&amp;gt;%  
  mutate(name = str_to_title(str_replace_all(name, &amp;#39;_&amp;#39;, &amp;#39; &amp;#39;))) %&amp;gt;% 
  ggplot(aes(date, value, color = name)) + 
  geom_line(size = 1.5, alpha = 0.8) + 
  facet_grid(store_id ~ ., scales = &amp;#39;free&amp;#39;) + 
  theme_bw() + 
  scale_y_continuous(labels = scales::comma_format()) + 
  labs(x = &amp;#39;Date&amp;#39;,
       y = &amp;#39;Weekly Sales&amp;#39;,
       color = NULL,
       title = &amp;#39;Sample Forecasts&amp;#39;
       ) + 
  theme(legend.position = &amp;quot;top&amp;quot;,
        legend.text = element_text(size = 12),
        strip.text.y = element_text(size = 12),
        plot.title = element_text(size = 14)
        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/post/2021-03-28-pyspark-forecasting/pyspark_time_series_forecasting_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Overall, the forecasts appear to capture changes in the trend and seasonal variation. A more formal approach to this problem is to do back-testing by holding out some historical data and generating forecasts against it. However, this is a great starting point from which to build more advanced models and incorporate external variables to further improve our forecasts. Hopefully this is enough to get you started on your way to forecasting at an enterprise scale. Until next time, happy forecasting!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Optimal Portland Pub Crawl</title>
      <link>http://example.org/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl/</link>
      <pubDate>Fri, 01 Jun 2018 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl/</guid>
      <description>
&lt;script src=&#34;http://example.org/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://example.org/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://example.org/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2018-06-01-optimal-bar-crawl/images/portland.jpg&#34; width=&#34;700&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;The premise of a Pub Crawl is quite simple: visit several bars in an afternoon or evening without a clear plan of where you’ll go next. While this sort of spontaneous, unstructured approach may work for some people, I’ve always been a fan of having a plan – in this case, an optimal plan. If we want to maximize the number of places visited (and beers tasted) in a finite period of time, then there is simply no room for shoddy planning. Accordingly, this post provides a framework for designing the optimal Portland Pub Crawl by working through the following steps:&lt;/p&gt;
&lt;p&gt;🍺 Web Scrape the top 100 Portland bars from &lt;a href=&#34;http://www.oregonlive.com/dining/index.ssf/2014/10/portlands_100_best_bars_bar_ta.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🍺 Geocode each bar’s location&lt;/p&gt;
&lt;p&gt;🍺 Find the optimal route between a subsample of the bars, because visiting 100 in a day would make the following day very bad&lt;/p&gt;
&lt;p&gt;🍺 Determine a walking path between the bars&lt;/p&gt;
&lt;p&gt;🍺 Create a map of the walking path, which can be use as a field guide to impress your friends once the pub crawl is under way&lt;/p&gt;
&lt;p&gt;🍺 Promptly spill beer on the map at the 2nd bar, rendering it unreadable, followed by a game of darts and some popcorn&lt;/p&gt;
&lt;p&gt;If that sounds like a plan, let’s get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-the-top-100-bars&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Defining the Top 100 Bars&lt;/h3&gt;
&lt;p&gt;First, let’s identify the stops during our tour of Portland’s pub scene. In the section below, we’ll load up the R libraries, identify which version of Python we’d like to use, and then do some web scraping. Note that all of the python modules and R-scripts are contained in the same directory for simplicity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Core pacakges
library(tidyverse)

# Mapping
library(leaflet)
library(widgetframe)
library(leaflet.extras)

# Calling python functions from R
library(reticulate)

# route optimization
library(tspmeta)

# Making nice tables
library(gt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;geocode_best_portland_bars&lt;/code&gt; function below is responsible for collecting the information.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# best_bars.py

import os
import urllib
from bs4 import BeautifulSoup
import re
from typing import List
import googlemaps
from tqdm import tqdm
import pandas as pd
from dotenv import load_dotenv

API_KEY = os.getenv(&amp;#39;GOOGLE_API_KEY&amp;#39;)


def find_best_bars() -&amp;gt; str:
    base_url = &amp;quot;http://www.oregonlive.com/dining/index.ssf/2014/10/portlands_100_best_bars_bar_ta.html&amp;quot;
    page = urllib.request.urlopen(base_url)
    soup = BeautifulSoup(page, &amp;quot;html.parser&amp;quot;)
    bar_descriptors = soup.find_all(&amp;quot;div&amp;quot;, class_=&amp;quot;entry-content&amp;quot;)
    bar_descriptors = str(bar_descriptors).split(&amp;quot;&amp;lt;p&amp;gt;&amp;quot;)[0]
    best_bars_raw_lst = re.findall(r&amp;quot;\&amp;lt;strong&amp;gt;(.*?)&amp;lt;/strong&amp;gt;&amp;quot;, bar_descriptors)
    return best_bars_raw_lst


def clean_bar_names(raw_bar_lst: str) -&amp;gt; List[str]:
    # exclude emphasis tags
    best_bars = [re.sub(r&amp;quot;&amp;lt;em&amp;gt; (.*?)&amp;lt;/em&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, x) for x in raw_bar_lst]
    # exclude number included in bar name
    best_bars = [re.sub(r&amp;quot;No. \d+ --&amp;quot;, &amp;quot;&amp;quot;, x).strip() for x in best_bars]
    # exclude headers in all caps
    best_bars = [x for x in best_bars if not x.isupper()]
    # exclude all lower case tags
    best_bars = [x for x in best_bars if not x.islower()]
    # exclude bold tags in html
    best_bars = [x.replace(&amp;quot;&amp;amp;amp;&amp;quot;, &amp;quot;&amp;amp;&amp;quot;) for x in best_bars]
    # exclude other emphasis tags
    best_bars = [re.sub(r&amp;quot;: &amp;lt;em&amp;gt;(.*?)&amp;lt;/em&amp;gt;&amp;quot;, &amp;quot;&amp;quot;, x) for x in best_bars]
    # strip colons
    best_bars = [x.replace(&amp;quot;:&amp;quot;, &amp;quot;&amp;quot;) for x in best_bars]
    # exclude blanks
    best_bars = [x for x in best_bars if x]
    return best_bars


def geocode_best_portland_bars() -&amp;gt; pd.DataFrame:
    best_bars_lst = find_best_bars()
    bar_names = clean_bar_names(raw_bar_lst=best_bars_lst)
    bar_names = [f&amp;quot;{x}, Portland, OR&amp;quot; for x in bar_names]
    gmaps = googlemaps.Client(key=API_KEY)
    geocoded_bars_lst = []
    for name in tqdm(bar_names):
        geocode_result = gmaps.geocode(name)
        lat_lng = geocode_result[0].get(&amp;quot;geometry&amp;quot;).get(&amp;quot;location&amp;quot;)
        lat, lng = lat_lng.get(&amp;quot;lat&amp;quot;), lat_lng.get(&amp;quot;lng&amp;quot;)
        geocoded_bars_lst.append([name, lat, lng])
    geocoded_bars_df = pd.DataFrame(geocoded_bars_lst)
    geocoded_bars_df.columns = [&amp;quot;name&amp;quot;, &amp;quot;lat&amp;quot;, &amp;quot;lng&amp;quot;]
    return geocoded_bars_df   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Historically, this operation would require executing a python script, writing the results out (in an &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.csv&lt;/code&gt; file), and then reading the result back into R. However, with the advent of &lt;code&gt;reticulate&lt;/code&gt;, we can execute a python function and pull the output back without ever having to leave the cozy confines of R (or R-studio in this case). Recall that the actual python module &lt;code&gt;geocode_best_portland_bars.py&lt;/code&gt; is located in the same directory as our R-script. Below, we’ll first “source” this function via &lt;code&gt;source_python&lt;/code&gt; (which simply means to bring it into the R environment), then we’ll execute it. Note that we aren’t passing in any arguments; this function is designed for a very specific purpose, which is to find the best watering holes in Portland.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# specify which version of Python to use
reticulate::use_python(&amp;#39;//anaconda/bin/python&amp;#39;, required = TRUE)

# brings our function into the R Environment
reticulate::source_python(&amp;#39;best_bars.py&amp;#39;)

# executes and stores the output  in our variable &amp;#39;best_bars&amp;#39;
best_bars = geocode_best_portland_bars()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_bars %&amp;gt;%
  tail(10) %&amp;gt;%
  mutate(name = str_replace(name, &amp;#39;, Portland, OR&amp;#39;, &amp;#39;&amp;#39;)) %&amp;gt;%
  gt() %&amp;gt;%
  tab_header(title = gt::md(&amp;#39;**Data Sample of Best Portland Bars**&amp;#39;)) %&amp;gt;%
  cols_align(
  align = &amp;quot;center&amp;quot;,
  columns = everything()) %&amp;gt;%
  cols_width(
    everything() ~ px(155)
    )&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#sszsgucrgp .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#sszsgucrgp .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#sszsgucrgp .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#sszsgucrgp .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#sszsgucrgp .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#sszsgucrgp .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#sszsgucrgp .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#sszsgucrgp .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#sszsgucrgp .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#sszsgucrgp .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#sszsgucrgp .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#sszsgucrgp .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#sszsgucrgp .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#sszsgucrgp .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#sszsgucrgp .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#sszsgucrgp .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sszsgucrgp .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#sszsgucrgp .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sszsgucrgp .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#sszsgucrgp .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#sszsgucrgp .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#sszsgucrgp .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#sszsgucrgp .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sszsgucrgp .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#sszsgucrgp .gt_left {
  text-align: left;
}

#sszsgucrgp .gt_center {
  text-align: center;
}

#sszsgucrgp .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#sszsgucrgp .gt_font_normal {
  font-weight: normal;
}

#sszsgucrgp .gt_font_bold {
  font-weight: bold;
}

#sszsgucrgp .gt_font_italic {
  font-style: italic;
}

#sszsgucrgp .gt_super {
  font-size: 65%;
}

#sszsgucrgp .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;sszsgucrgp&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
    &lt;col style=&#34;width:155px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Data Sample of Best Portland Bars&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Swine&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51827&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Jackknife&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52051&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6828&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Stammtisch&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52586&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Cooper&#39;s Hall&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51988&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;The Knock Back&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.55923&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6416&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Multnomah Whiskey Library&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Trifecta Tavern &amp;amp; Bakery&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51756&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6596&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Angel Face&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52321&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6371&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Pepe Le Moko&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52187&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6813&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Expatriate&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.56240&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6346&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;We have successfully scraped the best bars and geocoded their locations. In the following section, we’ll solve a classic routing optimization problem: The Traveling Salesman Problem (TSP). The goal is to find the most direct route between all of the bars we decide to visit during the pub crawl.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;route-optimization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Route Optimization&lt;/h3&gt;
&lt;p&gt;The goal of any routing optimization problem is simple: minimize the total distance travelled between different nodes (locations) in space while ensuring that each node is visited once. There are many algorithms to solve this type of problem, but we’ll leverage the &lt;code&gt;2-optimization&lt;/code&gt; or &lt;code&gt;2-opt&lt;/code&gt; method due to its simplicity. This algorithm finds the lowest cost route (i.e., the route with the shortest distance that ensures each node is visited once) by swapping the ‘edges’ (the path that connects two nodes) between different nodes. If a swap reduces the total length of our tour, then the swap is maintained; otherwise the swap is reversed and we try again with different edges. Note that the swap must ensure that a single route is always possible between all nodes. The algorithm stops when a tour is reached that cannot be improved with any more swaps (see &lt;a href=&#34;https://ocw.mit.edu/courses/sloan-school-of-management/15-053-optimization-methods-in-management-science-spring-2013/lecture-notes/MIT15_053S13_lec17.pdf&#34;&gt;here&lt;/a&gt; for a more in-depth explanation).&lt;/p&gt;
&lt;p&gt;Before going any further, let’s plot out our locations to see what we’re working with. We’ll also define our starting point, which is often referred to as the ‘depot’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;depot_lat = 45.525915
depot_lng = -122.684957

bar_map = leaflet(data = best_bars) %&amp;gt;% 
          setView(lng = depot_lng + 0.05, lat = depot_lat, zoom = 13) %&amp;gt;% 
          addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
          addMarkers(lng=depot_lng, lat=depot_lat) %&amp;gt;% 
          addCircleMarkers(lat=~lat, 
                           lng=~lng,
                           color = &amp;quot;orange&amp;quot;,
                           radius = 4,
                           weight = 10,
                           stroke = FALSE,
                           opacity = 4,
                           fillOpacity = 4
                           ) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Each orange dot is a bar, and the pointer indicates our starting position (the depot). Given that we are walking, let’s limit the potential distance to a maximum of three miles from our starting location. The function below calculates the total feet between two points defined by a latitude/longitude coordinate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earth_dist = function (lat1, lng1, lat2, lng2)
{
  rad = pi/180
  a1 = lat1 * rad
  a2 = lng1 * rad
  b1 = lat2 * rad
  b2 = lng2 * rad
  dlon = b2 - a2
  dlat = b1 - a1
  a = (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
  c = 2 * atan2(sqrt(a), sqrt(1 - a))
  R = 6378.145
  d = R * c
  return(d* 3280.8)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below we’ll filter to all locations based on the maximum distance we’re willing to travel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;feet_in_mile = 5280
# maximum distance is 3 miles
max_miles_away = 3

bar_locations_nearby = best_bars %&amp;gt;% 
                       mutate(distance_from_depot = earth_dist(depot_lat,
                                                               depot_lng,
                                                               lat,
                                                               lng
                                                               )
                              ) %&amp;gt;% 
                       filter(distance_from_depot &amp;lt;= feet_in_mile * max_miles_away)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)

# we&amp;#39;ll visit 24 bars
n_bars = 24

# randomly select 24 bars to visit
bar_locations_nearby = bar_locations_nearby %&amp;gt;% 
                       sample_n(n_bars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll transform the lat/long locations into a distance matrix. The distance matrix specifies the euclidean distance of each bar from every other bar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# now find optimal route
coordinates = bar_locations_nearby %&amp;gt;% 
              dplyr::select(lat, lng, name) %&amp;gt;% 
              mutate(location_index = 2:(n() + 1)) %&amp;gt;% 
              bind_rows(data.frame(lat = depot_lat,
                                   lng = depot_lng,
                                   address = &amp;#39;depot&amp;#39;,
                                   name = &amp;#39;depot&amp;#39;,
                                   location_index = 1
                                          )
                               ) %&amp;gt;% 
              arrange(location_index)

coords_matrix = coordinates %&amp;gt;% 
                dplyr::select(lat, lng) %&amp;gt;% 
                as.matrix()

dist_matrix = dist(coords_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two functions below &lt;code&gt;tsp_instance&lt;/code&gt; and &lt;code&gt;run_solver&lt;/code&gt; will do the heavy lifting and find the optimal route between bars.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create tsp instance
tsp_ins = tspmeta::tsp_instance(coords_matrix,dist_matrix)

# find optimal route based on 2-opt method
opt_tour = as.integer(run_solver(tsp_ins, method=&amp;quot;2-opt&amp;quot;))

# sort to start at depot
sorted_tour = c(opt_tour[which(opt_tour == 1):length(opt_tour)],
                opt_tour[1:(which(opt_tour == 1) - 1)]
                )

# join route order back to original data
coordinates = coordinates %&amp;gt;% 
              dplyr::inner_join(data.frame(location_index = sorted_tour,
                                           route_order = 1:length(sorted_tour)
                                           )
                                ) %&amp;gt;% 
              dplyr::arrange(route_order)

# reformat so each row has a starting lat/lng and ending lat/lng
route_df = coordinates %&amp;gt;% 
            dplyr::select(-address) %&amp;gt;%
            dplyr::rename(start_lat = lat,
                          start_lng = lng
                          ) %&amp;gt;% 
            dplyr::mutate(end_lat = c(start_lat[2:n()], NA),
                          end_lng = c(start_lng[2:n()], NA)
                          ) %&amp;gt;% 
            na.omit()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a peak at our data to see how everything turned out.&lt;/p&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#dmhypywntg .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#dmhypywntg .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#dmhypywntg .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#dmhypywntg .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dmhypywntg .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#dmhypywntg .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#dmhypywntg .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#dmhypywntg .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#dmhypywntg .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#dmhypywntg .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#dmhypywntg .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#dmhypywntg .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#dmhypywntg .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#dmhypywntg .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#dmhypywntg .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#dmhypywntg .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dmhypywntg .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#dmhypywntg .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dmhypywntg .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#dmhypywntg .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#dmhypywntg .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dmhypywntg .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#dmhypywntg .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dmhypywntg .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#dmhypywntg .gt_left {
  text-align: left;
}

#dmhypywntg .gt_center {
  text-align: center;
}

#dmhypywntg .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#dmhypywntg .gt_font_normal {
  font-weight: normal;
}

#dmhypywntg .gt_font_bold {
  font-weight: bold;
}

#dmhypywntg .gt_font_italic {
  font-style: italic;
}

#dmhypywntg .gt_super {
  font-size: 65%;
}

#dmhypywntg .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;dmhypywntg&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
    &lt;col style=&#34;width:115px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Route&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;route_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;start_lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;start_lng&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;end_lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;end_lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;depot&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52591&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6850&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52627&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6784&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Park Kitchen&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52627&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6784&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52531&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6783&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Remedy Wine Bar&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52531&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6783&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52201&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6816&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Clyde Common&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52201&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6816&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52246&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Cassidy&#39;s&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52246&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Multnomah Whiskey Library&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52098&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6835&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51487&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;The Rookery at Raven &amp;amp; Rose&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51487&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6824&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51400&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6753&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Veritable Quandary&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51400&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6753&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51904&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6781&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Departure&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51904&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6781&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52403&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6756&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;Ground Kontrol&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52403&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6756&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.51900&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6641&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Sweet! Almost there. The final step is to convert these points into an actual travel path.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-walking-path&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a Walking Path&lt;/h3&gt;
&lt;p&gt;Currently, the path between different nodes (i.e., bars) are straight lines. We’ll be walking this tour, so a sidewalk travel path is required. We’ll call on the Google Maps API one last time to convert each of the straight-line edges to actual walking paths via the &lt;code&gt;convert_route_to_path.py&lt;/code&gt; module. This module consists of two functions: &lt;code&gt;find_path&lt;/code&gt; and &lt;code&gt;extract_polyline&lt;/code&gt;. &lt;code&gt;find_path&lt;/code&gt; takes a starting lat/long, ending lat/long, and method of travel (walking in our case) and returns step-by-step lat/long coordinates along with distance and time estimates. &lt;code&gt;extract_polyline&lt;/code&gt; is a helper function that will format each of the step-by-step coordinates into pandas DataFrame. The output will then be returned as an R DataFrame. We’ll specify the python module below.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# convert_route_to_path.py
import os
import pandas as pd
import polyline
import googlemaps
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv(&amp;#39;GOOGLE_API_KEY&amp;#39;)

def extract_polyline(coords: dict) -&amp;gt; pd.DataFrame:
    gmaps_polyline = coords[&amp;quot;overview_polyline&amp;quot;][&amp;quot;points&amp;quot;]
    polyline_df = pd.DataFrame(polyline.decode(gmaps_polyline))
    polyline_df.columns = [&amp;quot;lat&amp;quot;, &amp;quot;lng&amp;quot;]
    polyline_df[&amp;quot;path_order&amp;quot;] = range(1, polyline_df.shape[0] + 1)
    return polyline_df


def create_travel_path(
    route_df: pd.DataFrame, travel_mode: str = &amp;quot;walking&amp;quot;
) -&amp;gt; pd.DataFrame:
    gmaps = googlemaps.Client(key=API_KEY)
    out_route_df = pd.DataFrame()
    for row in route_df.itertuples():
        coords = gmaps.directions(
            origin=[row.start_lat, row.start_lng],
            destination=[row.end_lat, row.end_lng],
            mode=travel_mode,
        )
        coords_df = extract_polyline(coords=coords[0])
        coords_df[&amp;quot;location_index&amp;quot;] = row.location_index
        coords_df[&amp;quot;travel_time&amp;quot;] = coords[0][&amp;quot;legs&amp;quot;][0][&amp;quot;duration&amp;quot;][&amp;quot;value&amp;quot;]
        coords_df[&amp;quot;miles&amp;quot;] = coords[0][&amp;quot;legs&amp;quot;][0][&amp;quot;distance&amp;quot;][&amp;quot;text&amp;quot;]
        coords_df[&amp;quot;route_order&amp;quot;] = row.route_order
        out_route_df = out_route_df.append(coords_df)
    out_route_df = out_route_df.reset_index(drop=True)
    return out_route_df&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll read the &lt;code&gt;convert_route_to_path.py&lt;/code&gt; module into R and pass in our route DataFrame, the Google Maps API key, and our preferred method of travel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reticulate::source_python(&amp;#39;convert_route_to_path.py&amp;#39;)
path_df = create_travel_path(route_df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data indicating the path between our depot and the first bar should look like this:&lt;/p&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#pamufqigws .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 10px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pamufqigws .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pamufqigws .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pamufqigws .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pamufqigws .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pamufqigws .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pamufqigws .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pamufqigws .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pamufqigws .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pamufqigws .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#pamufqigws .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pamufqigws .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#pamufqigws .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#pamufqigws .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pamufqigws .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#pamufqigws .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pamufqigws .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#pamufqigws .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pamufqigws .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pamufqigws .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pamufqigws .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pamufqigws .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#pamufqigws .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pamufqigws .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#pamufqigws .gt_left {
  text-align: left;
}

#pamufqigws .gt_center {
  text-align: center;
}

#pamufqigws .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pamufqigws .gt_font_normal {
  font-weight: normal;
}

#pamufqigws .gt_font_bold {
  font-weight: bold;
}

#pamufqigws .gt_font_italic {
  font-style: italic;
}

#pamufqigws .gt_super {
  font-size: 65%;
}

#pamufqigws .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;pamufqigws&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34; style=&#34;table-layout: fixed;; width: 0px&#34;&gt;
  &lt;colgroup&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
    &lt;col style=&#34;width:100px;&#34;/&gt;
  &lt;/colgroup&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;7&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;&lt;strong&gt;Sample Travel Path&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;7&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;location_index&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;route_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;travel_time&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;miles&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;path_order&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lat&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lng&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52576&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6849&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52575&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52508&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52449&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52443&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52362&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52312&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52304&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52282&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52263&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6853&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52247&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6854&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;344&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;0.3 mi&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;45.52243&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;-122.6852&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Note the small changes between each of the successive lat/long coordinates. This is the path we’ll be walking to obtain our first frosty mug of beer. Before mapping our data, let’s get a general idea of total walking time and distance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;travel_time_in_hours = round(path_df %&amp;gt;% 
                             dplyr::select(location_index, travel_time) %&amp;gt;% 
                             dplyr::distinct() %&amp;gt;% 
                             dplyr::pull(travel_time) %&amp;gt;% 
                             sum() / 3600, 1)

print(glue::glue(&amp;quot;Total Travel Time Is: &amp;quot;,
                 travel_time_in_hours,
                 &amp;quot; Hours&amp;quot;
                 )
      )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Total Travel Time Is: 6.6 Hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like this walk will take around six hours, so we’ll need to bring some comfy shoes. What about distance (we’ll need some way to work off those calories)?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;travel_distance_in_miles = round(path_df %&amp;gt;% 
  dplyr::mutate(feet_numeric = 
                case_when(stringr::str_detect(miles, &amp;#39;ft&amp;#39;) == TRUE ~ 
                          as.numeric(stringr::str_replace(miles, 
                                                          &amp;quot; ft&amp;quot;, 
                                                          &amp;quot;&amp;quot;
                                                          )
                                     ),
                          stringr::str_detect(miles, &amp;quot; mi&amp;quot;) == TRUE ~ 
                          as.numeric(stringr::str_replace(miles, 
                                                          &amp;quot; mi&amp;quot;, 
                                                          &amp;quot;&amp;quot;)
                                     ) * feet_in_mile
                         )
                ) %&amp;gt;% 
  dplyr::select(location_index, feet_numeric) %&amp;gt;% 
  dplyr::distinct() %&amp;gt;% 
  dplyr::pull(feet_numeric) %&amp;gt;% 
  sum() / feet_in_mile, 1)

print(glue::glue(&amp;quot;Total Travel Distance Is: &amp;quot;,
                 travel_distance_in_miles,
                 &amp;quot; Miles&amp;quot;
                 )
      )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Total Travel Distance Is: 19 Miles&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, this is more of a Pub Crawl half-marathon. That’s some serious distance to cover. Let’s bring it all together with some visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-the-route&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Mapping the Route&lt;/h3&gt;
&lt;p&gt;The last step is to bring this analysis to life with everyone’s favorite visualization: MAPS! Indeed, we’ll plot the walking path across downtown Portland so we can actually see the Pub Crawl route.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We&amp;#39;ll use this to identify the labels for each stop 
label_df = path_df %&amp;gt;% 
           dplyr::filter(path_order == 1)

# Bar crawl visualization
final_route = leaflet(data = path_df) %&amp;gt;%
  setView(lng = depot_lng + 0.02, lat = depot_lat, zoom = 13) %&amp;gt;% 
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
  addPolylines(data = path_df %&amp;gt;% 
                 filter(route_order &amp;lt; 24),
               lng = ~lng,
               lat = ~lat,
               color = &amp;quot;orange&amp;quot;,
               opacity = 4
  ) %&amp;gt;% 
  addMarkers(lng = depot_lng,
             lat = depot_lat
  ) %&amp;gt;% 
  addCircleMarkers(data = label_df,
                   lng = ~lng,
                   lat = ~lat,
                   radius = 4,
                   label = ~as.character(route_order),
                   labelOptions = labelOptions(noHide = T,
                                               textOnly = T,
                                               direction = &amp;#39;top&amp;#39;,
                                               textsize = &amp;quot;14px&amp;quot;,
                                               offset=c(0,-5),
                                               size = 1
                   )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2018-06-01-optimal-bar-crawl/optimal_bar_crawl_files/figure-html//widgets/widget_unnamed-chunk-21.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Choosing a Fantasy Football Quarterback</title>
      <link>http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/</link>
      <pubDate>Sun, 10 Sep 2017 21:13:14 -0500</pubDate>
      <guid>http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://example.org/post/2017-09-10-choosing-ff-qb/choosing_fantasy_qb_files/mariota.jpg&#34; width=&#34;700&#34; height=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Understanding a new concept is all about connecting it with something you already know. I don’t know much, but I do know Fantasy Football. Thus, when I come across new concepts, I often think to myself, “How can I use this information to beat my friend Steve in Fantasy Football”? This very question was the impetus for putting these words and figures together in a post, which will introduce the idea of using the Beta Distribution to determine your weekly starter. I’ll explain this approach in the context of my 2015 Fantasy Football season.&lt;/p&gt;
&lt;p&gt;At the outset of that season, I drafted two quarterbacks: Joe Flacco and Marcus Mariota (it was a rough draft). Flacco had been in the NFL for a few years, while Mariota was still a rookie yet to play a game. I was also considering a separate rookie, Jameis Winston, who was available to pick up anytime during the season off the waiver wire. Throughout the season, I was faced with the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who do I make the starting QB?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If one QB is performing poorly, when is the right time to make the switch (e.g., Flacco -&amp;gt; Mariota; Flacco -&amp;gt; Winston; Mariota -&amp;gt; Winston)?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This question is faced by NFL coaches and fantasy owners alike. If your QB has a few bad weeks, should you continue with them into the next week, replace them with the 2nd string QB, or sign a free agent to your team mid-season?&lt;/p&gt;
&lt;p&gt;Before getting into the technical details, let’s first define what “Success” looks like for a Fantasy Football QB. Success can be defined in one word: Consistency. A QB that throws three touchdowns (TDs) every game for the first six games of the season (18 total) is better than a QB who throws five TDs for the first three games and then one TD during the next three games, despite having thrown the same number of TDs. Simply put - you want consistent, reliable performance every week. It doesn’t matter if you win by one point or 50 points – a win is a win. Thus, I evaluate my QB’s performance on the following criteria: A “Successful” performance is defined as &lt;strong&gt;3 or more touchdowns AND/OR 300 or more yards&lt;/strong&gt; for a given week. Touchdowns and passing yards are the two primary sources of QB fantasy points, and a +3TD|300yard weekly statline should cement a QB amongst that week’s top performers. Failing to meet either of these criteria was defined as an “Unsuccessful” performance. Note that this label could also factor in interceptions, pass completions, and fumble, but we’ll keep it simple and just focus on passing yards and passing touchdowns.&lt;/p&gt;
&lt;p&gt;Having defined the evaluation criteria, the data generating process was modeled via the beta distribution. Recall that the beta distribution defines a distribution of probabilities, and we’re interested in the probability of our QB having a Successful week. There are several years of performance history on Joe Flacco, so we can provide a reasonably informed estimate of his weekly probabilty for achieving success (i.e., our prior). In contrast, there is no NFL game history on Mariota or Winston, so we’ll assign each a uniform or uninformative prior. Our estimate of the Success parameter for Winston and Mariota will change rapidly as we acquire in-season data because our posterior is determined entirely from the data. We could create a more informed-–and stronger-–prior by assigning Mariota and Winston the historic first-year league average for all rookie QBs entering the NFL but we’ll keep it simple. A uniform prior means that all probabilities from 0-1 are equally likely.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;collecting-qb-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Collecting QB Data&lt;/h3&gt;
&lt;p&gt;We’ll use the &lt;code&gt;nflgame&lt;/code&gt; python package to gather QB data. We’ll pull 2013-2014 weekly performance data for Joe Flacco to calculate our prior, as well as the 2015 data for all three players. During the season we’ll update our priors to determine which QB we should play for a given week. That is, as we acquire results over the season, updates will be made to obtain a better, more reliable estimate of the “success” parameter for each QB.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import nflgame
import pandas as pd

game_years = range(2013, 2016)
game_weeks = range(1, 17)
qbs = (&amp;quot;Joe Flacco&amp;quot;, 
       &amp;quot;Marcus Mariota&amp;quot;,
       &amp;quot;Jameis Winston&amp;quot;)
       
def get_passing_data(year, week, players, qbs):
    qb_list = list()
    for p in players.passing():
        player = &amp;quot; &amp;quot;.join(str(p.player).split(&amp;quot; &amp;quot;)[:2]) 
        if player in qbs:
            qb_list.append([year, week, player, p.passing_tds, p.passing_yds])
    return qb_list
    
quarterback_data = pd.DataFrame()
for year in game_years:
    print &amp;quot;Retrieving Player Data for {year}&amp;quot;.format(year = year)
    for week in game_weeks:
        games = nflgame.games(year, week)
        players = nflgame.combine_game_stats(games)
        temp_qb_stats = get_passing_data(year, week, players, qbs)
        quarterback_data = quarterback_data.append(pd.DataFrame(temp_qb_stats))
        
quarterback_data.columns = [&amp;quot;year&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;player&amp;quot;, &amp;quot;touchdowns&amp;quot;, &amp;quot;passing_yds&amp;quot;]
quarterback_data.to_csv(&amp;quot;quarterback_data.csv&amp;quot;, index = False)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
